<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Mapdigit.Drawing</name>
    </assembly>
    <members>
        <member name="T:Mapdigit.Drawing.Brush">
            <summary>
            Classes derived from this abstract base class define objects used to fill the
            interiors of graphical shapes such as rectangles, ellipses, pies, polygons,
            and paths.
            </summary>
        </member>
        <member name="F:Mapdigit.Drawing.Brush.NoCycle">
            <summary>
             Use the terminal colors to fill the remaining area.
            </summary>
        </member>
        <member name="F:Mapdigit.Drawing.Brush.Reflect">
            <summary>
             Cycle the gradient colors start-to-end, end-to-start
             to fill the remaining area.
            </summary>
        </member>
        <member name="F:Mapdigit.Drawing.Brush.Repeat">
            <summary>
             Cycle the gradient colors start-to-end, start-to-end
             to fill the remaining area.
            </summary>
        </member>
        <member name="M:Mapdigit.Drawing.Brush.Transform(Mapdigit.Drawing.Geometry.AffineTransform)">
            <summary>
            Transform with a new matrix.
            </summary>
            <param name="m1">a new matrix</param>
        </member>
        <member name="F:Mapdigit.Drawing.Brush._wrappedBrushFp">
            internal wrapped brush in the drawing core package.
        </member>
        <member name="P:Mapdigit.Drawing.Brush.Matrix">
            <summary>
            Get/Set the matrix associated with this brush.
            </summary>
        </member>
        <member name="P:Mapdigit.Drawing.Brush.Transparency">
            <summary>
            Returns the transparency mode for this Color. 
            </summary>
        </member>
        <member name="T:Mapdigit.Drawing.Color">
            <summary>
            The Color class is used to encapsulate colors in the default
            sRGB color space.
            </summary>
            <remarks>
            Every color has an implicit alpha value of 255 or an explicit one provided
            in the constructor.  The alpha value  defines the transparency of a color
            and can be represented by a int value in the range 0-255.
            An alpha value of  255 means that the color is completely
            opaque and an alpha value of 0 means that the color is
            completely transparent.
            </remarks>
        </member>
        <member name="F:Mapdigit.Drawing.Color.Opaque">
            <summary>
             Represents image data that is guaranteed to be completely opaque,
             meaning that all pixels have an alpha Value of 255.
            </summary>
        </member>
        <member name="F:Mapdigit.Drawing.Color.Bitmask">
            <summary>
            Represents image data that is guaranteed to be either completely
            opaque, with an alpha Value of 255, or completely transparent,
            with an alpha Value of 0. 
            </summary>
        </member>
        <member name="F:Mapdigit.Drawing.Color.Translucent">
            <summary>
            Represents image data that contains or might contain arbitrary
            alpha values between and including 0 and 255.
            </summary>
        </member>
        <member name="F:Mapdigit.Drawing.Color.Factor">
            <summary>
            darker and brigher factor.
            </summary>
        </member>
        <member name="F:Mapdigit.Drawing.Color.White">
            <summary>
            The color white.
            </summary>
        </member>
        <member name="F:Mapdigit.Drawing.Color.LightGray">
            <summary>
            The color light gray.
            </summary>
        </member>
        <member name="F:Mapdigit.Drawing.Color.Gray">
            <summary>
            The color gray.
            </summary>
        </member>
        <member name="F:Mapdigit.Drawing.Color.DarkGray">
            <summary>
            The color dark gray.
            </summary>
        </member>
        <member name="F:Mapdigit.Drawing.Color.Black">
            <summary>
            The color black.
            </summary>
        </member>
        <member name="F:Mapdigit.Drawing.Color.Red">
            <summary>
            The color red.
            </summary>
        </member>
        <member name="F:Mapdigit.Drawing.Color.Pink">
            <summary>
            The color pink.
            </summary>
        </member>
        <member name="F:Mapdigit.Drawing.Color.Orange">
            <summary>
            The color orange.
            </summary>
        </member>
        <member name="F:Mapdigit.Drawing.Color.Yellow">
            <summary>
            The color yellow.
            </summary>
        </member>
        <member name="F:Mapdigit.Drawing.Color.Green">
            <summary>
            The color green.
            </summary>
        </member>
        <member name="F:Mapdigit.Drawing.Color.Magenta">
            <summary>
            The color magenta.
            </summary>
        </member>
        <member name="F:Mapdigit.Drawing.Color.Cyan">
            <summary>
            The color cyan.
            </summary>
        </member>
        <member name="F:Mapdigit.Drawing.Color.Blue">
            <summary>
            The color blue.
            </summary>
        </member>
        <member name="M:Mapdigit.Drawing.Color.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates an opaque sRGB color with the specified red, green,
            and blue values in the range (0 - 255).
            The actual color used in rendering depends
            on finding the best match given the color space
            available for a given output device.
            Alpha is defaulted to 255.
            </summary>
            <param name="r">the red component.</param>
            <param name="g">the green component</param>
            <param name="b">the blue component</param>
        </member>
        <member name="M:Mapdigit.Drawing.Color.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates an sRGB color with the specified red, green, blue, and alpha
            values in the range (0 - 255).
            </summary>
            <param name="r">the red component</param>
            <param name="g">the green component</param>
            <param name="b">the blue component</param>
            <param name="a">the alpha component</param>
        </member>
        <member name="M:Mapdigit.Drawing.Color.#ctor(System.UInt32,System.Boolean)">
            <summary>
            Creates an opaque sRGB color with the specified combined RGB value
            consisting of the red component in bits 16-23, the green component
            in bits 8-15, and the blue component in bits 0-7.  The actual color
            used in rendering depends on finding the best match given the
            color space available for a particular output device.  Alpha is
            defaulted to 255.
            </summary>
            <param name="rgb">the combined RGB components</param>
            <param name="hasAlpha">true,if the alpha bits are valid</param>
        </member>
        <member name="M:Mapdigit.Drawing.Color.#ctor(System.Int32)">
            <summary>
            Creates an opaque sRGB color with the specified combined RGB value
            consisting of the red component in bits 16-23, the green component
            in bits 8-15, and the blue component in bits 0-7.  The actual color
            used in rendering depends on finding the best match given the
            color space available for a particular output device.  Alpha is
            defaulted to 255.
            </summary>
            <param name="rgb">the combined RGB components</param>
        </member>
        <member name="M:Mapdigit.Drawing.Color.#ctor(System.Int32,System.Boolean)">
            <summary>
            Creates an sRGB color with the specified combined RGBA value consisting
            of the alpha component in bits 24-31, the red component in bits 16-23,
            the green component in bits 8-15, and the blue component in bits 0-7.
            If the hasalpha argument is false, alpha
            is defaulted to 255.
            </summary>
            <param name="rgba">the combined RGBA components</param>
            <param name="hasalpha">hasalpha true if the alpha bits are valid;
            false otherwise</param>
        </member>
        <member name="M:Mapdigit.Drawing.Color.Brighter">
            <summary>
            Creates a new Color that is a brighter version of this Color.
            This method applies an arbitrary scale factor to each of the three RGB
            components of this Color to create a brighter version
            of this Color. Although brighter and darker are inverse operations,
            the results of a series of invocations of these two methods might be 
            inconsistent because of rounding errors.
            </summary>
            <returns>a new Color object that is a brighter version of this Color.</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Color.Darker">
            <summary>
            Creates a new Color that is a darker version of this Color.
            This method applies an arbitrary scale factor to each of the three RGB
            components of this Color to create a darker version of this Color.  
            Although brighter and darker are inverse operations, the results of a series
            of invocations of these two methods might be inconsistent because
            of rounding errors.
            </summary>
            <returns> a new Color object that is a darker version of this Color.</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Color.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms 
            and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Mapdigit.Drawing.Color.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:System.Object"/> is equal to 
            this instance; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
            </exception>
        </member>
        <member name="M:Mapdigit.Drawing.Color.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="F:Mapdigit.Drawing.Color._value">
            The color Value.
        </member>
        <member name="M:Mapdigit.Drawing.Color.TestColorValueRange(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Checks the color integer components supplied for validity.
            </summary>
            <param name="r">The r.</param>
            <param name="g">The g.</param>
            <param name="b">The b.</param>
            <param name="a">A.</param>
        </member>
        <member name="P:Mapdigit.Drawing.Color.R">
            <summary>
            Returns the red component in the range 0-255 in the default sRGB
            </summary>
        </member>
        <member name="P:Mapdigit.Drawing.Color.G">
            <summary>
            Returns the green component in the range 0-255 in the default sRGB
            </summary>
        </member>
        <member name="P:Mapdigit.Drawing.Color.B">
            <summary>
            Returns the blue component in the range 0-255 in the default sRGB
            </summary>
        </member>
        <member name="P:Mapdigit.Drawing.Color.A">
            <summary>
            Returns the alpha component in the range 0-255 in the default sRGB
            </summary>
        </member>
        <member name="P:Mapdigit.Drawing.Color.Argb">
             <summary>
            Returns the RGB value representing the color in the default sRGB
             (Bits 24-31 are alpha, 16-23 are red, 8-15 are green, 0-7 are blue).
             </summary>
        </member>
        <member name="P:Mapdigit.Drawing.Color.Transparency">
            <summary>
            Returns the transparency mode for this Color. 
            </summary>
        </member>
        <member name="T:Mapdigit.Drawing.Core.BrushFP">
            <summary>
            Defines objects used to fill the interiors of graphical shapes such as
            rectangles, ellipses, pies, polygons, and paths.
            </summary>
        </member>
        <member name="F:Mapdigit.Drawing.Core.BrushFP.NoCycle">
            Use the terminal colors to fill the remaining area.
        </member>
        <member name="F:Mapdigit.Drawing.Core.BrushFP.Reflect">
            Cycle the gradient colors start-to-end, end-to-start
            to fill the remaining area.
        </member>
        <member name="F:Mapdigit.Drawing.Core.BrushFP.Repeat">
            Cycle the gradient colors start-to-end, start-to-end
            to fill the remaining area.
        </member>
        <member name="F:Mapdigit.Drawing.Core.BrushFP.FillMode">
            Fill mode of the brush.
        </member>
        <member name="M:Mapdigit.Drawing.Core.BrushFP.GetMatrix">
            <summary>
            Get the matrix associated with this brush
            </summary>
            <returns>the matrix</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Core.BrushFP.SetMatrix(Mapdigit.Drawing.Core.MatrixFP)">
            <summary>
            Set the matrix for this brush.
            </summary>
            <param name="value">value a new matrix.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Core.BrushFP.Transform(Mapdigit.Drawing.Core.MatrixFP)">
            <summary>
            Transform with a new matrix.
            </summary>
            <param name="m1">a new matrix</param>
        </member>
        <member name="M:Mapdigit.Drawing.Core.BrushFP.IsMonoColor">
            <summary>
            Check if it's a mono color brush.
            </summary>
            <returns>
            	true if it's mono color brush.
            </returns>
        </member>
        <member name="M:Mapdigit.Drawing.Core.BrushFP.GetColorAt(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Get the color value at given position.
            </summary>
            <param name="x">The x coordinate.</param>
            <param name="y">The y coordinate.</param>
            <param name="singlePoint">single point or not</param>
            <returns>the color value.</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Core.BrushFP.GetNextColor">
            <summary>
            Get the next color for this brush.
            </summary>
            <returns>the next color</returns>
        </member>
        <member name="F:Mapdigit.Drawing.Core.BrushFP._matrix">
            Brush matrix.
        </member>
        <member name="F:Mapdigit.Drawing.Core.BrushFP._graphicsMatrix">
            Graphics matrix.
        </member>
        <member name="F:Mapdigit.Drawing.Core.BrushFP._finalMatrix">
            The combined matrix.
        </member>
        <member name="M:Mapdigit.Drawing.Core.BrushFP.GetGraphicsMatrix">
            <summary>
            get the matrix associated with the graphics object.
            </summary>
            <returns>the matrix of the graphics object</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Core.BrushFP.SetGraphicsMatrix(Mapdigit.Drawing.Core.MatrixFP)">
            <summary>
            Set the graphics matrix.
            </summary>
            <param name="value">the graphics matrix.</param>
        </member>
        <member name="T:Mapdigit.Drawing.Core.ColorFP">
            <summary>
            The ColorFP class is used to encapsulate colors in the default
            sRGB color space  Every color has an implicit alpha value of 1.0 or
            an explicit one provided in the constructor.  The alpha value
            defines the transparency of a color and can be represented by
            a int value in the range 0-255.
            An alpha value of  255 means that the color is completely
            opaque and an alpha value of 0 means that the color is
            completely transparent.
            </summary>
        </member>
        <member name="M:Mapdigit.Drawing.Core.ColorFP.FromArgb(System.Int32)">
            <summary>
             Creates a Color structure from the four 8-bit ARGB components
            (alpha, red, green, and blue) values.
            </summary>
            <param name="color">A value specifying the 32-bit ARGB value</param>
            <returns>The Color object that this method creates</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Core.ColorFP.FromArgb(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a Color structure from the four 8-bit ARGB components
            (alpha, red, green, and blue) values.
            </summary>
            <param name="red">The red.</param>
            <param name="green">The green.</param>
            <param name="blue">The blue.</param>
            <returns>The Color object that this method creates.</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Core.ColorFP.#ctor(System.Int32)">
            <summary>
            Creates an opaque sRGB color with the specified combined RGB value
            consisting of the red component in bits 16-23, the green component
            in bits 8-15, and the blue component in bits 0-7.  The actual color
            used in rendering depends on finding the best match given the
            color space available for a particular output device.  Alpha is
            defaulted to 255.
            </summary>
            <param name="rgb">the combined RGB components.</param>
        </member>
        <member name="F:Mapdigit.Drawing.Core.ColorFP.Value">
            The color Value.
        </member>
        <member name="F:Mapdigit.Drawing.Core.ColorFP.Red">
            the red component.
        </member>
        <member name="F:Mapdigit.Drawing.Core.ColorFP.Green">
            the green compoent
        </member>
        <member name="F:Mapdigit.Drawing.Core.ColorFP.Blue">
            the blue component.
        </member>
        <member name="F:Mapdigit.Drawing.Core.ColorFP.Alpha">
            the alpha compoent.
        </member>
        <member name="T:Mapdigit.Drawing.Core.GraphicsFP">
            <summary>
              Encapsulates a 2D drawing surface.
            </summary>
        </member>
        <member name="F:Mapdigit.Drawing.Core.GraphicsFP.ModeXor">
            draw mode , XOR
        </member>
        <member name="F:Mapdigit.Drawing.Core.GraphicsFP.ModeZero">
            draw mode. nothing.
        </member>
        <member name="M:Mapdigit.Drawing.Core.GraphicsFP.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mapdigit.Drawing.Core.GraphicsFP"/> class.
            </summary>
        </member>
        <member name="M:Mapdigit.Drawing.Core.GraphicsFP.#ctor(System.Int32,System.Int32)">
            <summary>
             Constructor. create a graphics object with given width and height.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Core.GraphicsFP.GetRGB">
            <summary>
            Returns the content of this image as ARGB array.
            </summary>
            <returns>the ARGB array of the image content</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Core.GraphicsFP.GetBrush">
            <summary>
            Get the brush object of the graphics.
            </summary>
            <returns>the brush object</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Core.GraphicsFP.SetBrush(Mapdigit.Drawing.Core.BrushFP)">
            <summary>
            Set a new brush for this graphics object.
            </summary>
            <param name="value">value a new brush.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Core.GraphicsFP.GetPen">
            <summary>
            Get the pen object for this graphics.
            </summary>
            <returns>the pen object</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Core.GraphicsFP.SetPen(Mapdigit.Drawing.Core.PenFP)">
            <summary>
            set the new pen for this graphics object.
            </summary>
            <param name="value">a new pen object</param>
        </member>
        <member name="M:Mapdigit.Drawing.Core.GraphicsFP.GetPaintMode">
            <summary>
            Get the paint mode.
            </summary>
            <returns>the paint mode.</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Core.GraphicsFP.SetPaintMode(System.Int32)">
            <summary>
            Set the paint mode for this graphics.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Core.GraphicsFP.GetMatrix">
            <summary>
            Get the graphics drawing matrix.
            </summary>
            <returns>the drawing matrix</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Core.GraphicsFP.SetMatrix(Mapdigit.Drawing.Core.MatrixFP)">
            <summary>
            Set the graphics matrix.
            </summary>
            <param name="value">value the new matrix</param>
        </member>
        <member name="M:Mapdigit.Drawing.Core.GraphicsFP.Resize(System.Int32,System.Int32)">
            <summary>
            resize the graphics object.
            </summary>
            <param name="width">the new width of the graphics.</param>
            <param name="height">the new height of the graphics object.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Core.GraphicsFP.Clear(System.Int32)">
            <summary>
            Clear the graphics content with given color.
            </summary>
            <param name="color">The color.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Core.GraphicsFP.DrawLine(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws the line.
            </summary>
            <param name="ffX1">the x coord of the first point of the line.</param>
            <param name="ffY1">the y coord of the first point of the line</param>
            <param name="ffX2">the x coord of the second point of the line</param>
            <param name="ffY2">the y coord of the second point of the line</param>
        </member>
        <member name="M:Mapdigit.Drawing.Core.GraphicsFP.DrawPolyline(Mapdigit.Drawing.Core.PointFP[])">
            <summary>
            Draws the polyline.
            </summary>
            <param name="points"> the coordinates  of the polyline</param>
        </member>
        <member name="M:Mapdigit.Drawing.Core.GraphicsFP.DrawPolygon(Mapdigit.Drawing.Core.PointFP[])">
            <summary>
            Draws the polygon.
            </summary>
            <param name="points">the coordinates  of the polygon</param>
        </member>
        <member name="M:Mapdigit.Drawing.Core.GraphicsFP.DrawCurves(Mapdigit.Drawing.Core.PointFP[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws the curves.
            </summary>
            <param name="points">The points.</param>
            <param name="offset">The offset.</param>
            <param name="numberOfSegments">The number of segments.</param>
            <param name="ffFactor">The ff factor.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Core.GraphicsFP.DrawClosedCurves(Mapdigit.Drawing.Core.PointFP[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws the closed curves.
            </summary>
            <param name="points">The points.</param>
            <param name="offset">The offset.</param>
            <param name="numberOfSegments">The number of segments.</param>
            <param name="ffFactor">The ff factor.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Core.GraphicsFP.DrawRoundRect(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws the round rect.
            </summary>
            <param name="ffXmin">The ff xmin.</param>
            <param name="ffYmin">The ff ymin.</param>
            <param name="ffXmax">The ff xmax.</param>
            <param name="ffYmax">The ff ymax.</param>
            <param name="ffRx">The ff rx.</param>
            <param name="ffRy">The ff ry.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Core.GraphicsFP.DrawRect(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws the rect.
            </summary>
            <param name="ffXmin">The ff xmin.</param>
            <param name="ffYmin">The ff ymin.</param>
            <param name="ffXmax">The ff xmax.</param>
            <param name="ffYmax">The ff ymax.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Core.GraphicsFP.DrawOval(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws the oval.
            </summary>
            <param name="ffXmin">The ff xmin.</param>
            <param name="ffYmin">The ff ymin.</param>
            <param name="ffXmax">The ff xmax.</param>
            <param name="ffYmax">The ff ymax.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Core.GraphicsFP.DrawArc(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws the arc.
            </summary>
            <param name="ffXmin">The ff xmin.</param>
            <param name="ffYmin">The ff ymin.</param>
            <param name="ffXmax">The ff xmax.</param>
            <param name="ffYmax">The ff ymax.</param>
            <param name="ffStartangle">The ff startangle.</param>
            <param name="ffSweepangle">The ff sweepangle.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Core.GraphicsFP.DrawPie(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws the pie.
            </summary>
            <param name="ffXmin">The ff xmin.</param>
            <param name="ffYmin">The ff ymin.</param>
            <param name="ffXmax">The ff xmax.</param>
            <param name="ffYmax">The ff ymax.</param>
            <param name="ffStartangle">The ff startangle.</param>
            <param name="ffSweepangle">The ff sweepangle.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Core.GraphicsFP.DrawPath(Mapdigit.Drawing.Core.GraphicsPathFP)">
            <summary>
            Draws the path.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Core.GraphicsFP.FillClosedCurves(Mapdigit.Drawing.Core.PointFP[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Fills the closed curves.
            </summary>
            <param name="points">The points.</param>
            <param name="offset">The offset.</param>
            <param name="numberOfSegments">The number of segments.</param>
            <param name="ffFactor">The ff factor.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Core.GraphicsFP.FillPolygon(Mapdigit.Drawing.Core.PointFP[])">
            <summary>
            Fills the polygon.
            </summary>
            <param name="points">The points.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Core.GraphicsFP.FillRoundRect(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Fills the round rect.
            </summary>
            <param name="ffXmin">The ff xmin.</param>
            <param name="ffYmin">The ff ymin.</param>
            <param name="ffXmax">The ff xmax.</param>
            <param name="ffYmax">The ff ymax.</param>
            <param name="ffRx">The ff rx.</param>
            <param name="ffRy">The ff ry.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Core.GraphicsFP.FillRect(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Fills the rect.
            </summary>
            <param name="ffXmin">The ff xmin.</param>
            <param name="ffYmin">The ff ymin.</param>
            <param name="ffXmax">The ff xmax.</param>
            <param name="ffYmax">The ff ymax.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Core.GraphicsFP.FillOval(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Fills the oval.
            </summary>
            <param name="ffXmin">The ff xmin.</param>
            <param name="ffYmin">The ff ymin.</param>
            <param name="ffXmax">The ff xmax.</param>
            <param name="ffYmax">The ff ymax.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Core.GraphicsFP.FillPie(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Fills the pie.
            </summary>
            <param name="ffXmin">The ff xmin.</param>
            <param name="ffYmin">The ff ymin.</param>
            <param name="ffXmax">The ff xmax.</param>
            <param name="ffYmax">The ff ymax.</param>
            <param name="ffStartangle">The ff startangle.</param>
            <param name="ffSweepangle">The ff sweepangle.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Core.GraphicsFP.FillPath(Mapdigit.Drawing.Core.GraphicsPathFP)">
            <summary>
            Fills the path.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Core.GraphicsFP.GetClipHeight">
            <summary>
            Gets the height of the clip.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mapdigit.Drawing.Core.GraphicsFP.GetClipWidth">
            <summary>
            Gets the width of the clip.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mapdigit.Drawing.Core.GraphicsFP.GetClipX">
            <summary>
            Gets the clip X.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mapdigit.Drawing.Core.GraphicsFP.GetClipY">
            <summary>
            Gets the clip Y.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mapdigit.Drawing.Core.GraphicsFP.SetClip(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the clip.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Core.GraphicsFP.FinalizeBuffer(System.Int32)">
            <summary>
            Finalizes the buffer.
            </summary>
            <param name="color">The color.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Core.GraphicsFP.InitBlock">
            <summary>
            init the pen, brush, paint mode.
            </summary>
        </member>
        <member name="T:Mapdigit.Drawing.Core.GraphicsPathDasherFP">
            <summary>
            provide dash support.
            </summary>
        </member>
        <member name="T:Mapdigit.Drawing.Core.GraphicsPathSketchFP">
            <summary>
            the class uses line to draw a sketch for a given path.
            </summary>
        </member>
        <member name="T:Mapdigit.Drawing.Core.IGraphicsPathIteratorFP">
            <summary>
            The IPathIterator interface provides the mechanism for objects that
            return the geometry of their boundary by allowing a caller to retrieve the
            path of that boundary a segment at a time.
            This class cannot be inherited.
            </summary>
        </member>
        <member name="M:Mapdigit.Drawing.Core.IGraphicsPathIteratorFP.Begin">
            <summary>
            Begins the path.
            </summary>
        </member>
        <member name="M:Mapdigit.Drawing.Core.IGraphicsPathIteratorFP.End">
            <summary>
            Ends the path.
            </summary>
        </member>
        <member name="M:Mapdigit.Drawing.Core.IGraphicsPathIteratorFP.MoveTo(Mapdigit.Drawing.Core.PointFP)">
            <summary>
            Moves to given point.
            </summary>
            <param name="point">The point.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Core.IGraphicsPathIteratorFP.LineTo(Mapdigit.Drawing.Core.PointFP)">
            <summary>
            draw a line from current point to given point.
            </summary>
            <param name="point">The point.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Core.IGraphicsPathIteratorFP.QuadTo(Mapdigit.Drawing.Core.PointFP,Mapdigit.Drawing.Core.PointFP)">
            <summary>
            Draw quadic curve with given control points.
            </summary>
            <param name="control">The control.</param>
            <param name="point">The point.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Core.IGraphicsPathIteratorFP.CurveTo(Mapdigit.Drawing.Core.PointFP,Mapdigit.Drawing.Core.PointFP,Mapdigit.Drawing.Core.PointFP)">
            <summary>
            Draw curve with given control points.
            </summary>
            <param name="control1">The control1.</param>
            <param name="control2">The control2.</param>
            <param name="point">The point.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Core.IGraphicsPathIteratorFP.Close">
            <summary>
            Closes the path.
            </summary>
        </member>
        <member name="M:Mapdigit.Drawing.Core.GraphicsPathSketchFP.CurrentPoint">
            <summary>
            Currents the point.
            </summary>
            <returns>Get the current point.</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Core.GraphicsPathSketchFP.StartPoint">
            <summary>
            Get the start point
            </summary>
            <returns>the start point</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Core.GraphicsPathSketchFP.Begin">
            <summary>
            Begins the path.
            </summary>
        </member>
        <member name="M:Mapdigit.Drawing.Core.GraphicsPathSketchFP.End">
            <summary>
            Ends the path.
            </summary>
        </member>
        <member name="M:Mapdigit.Drawing.Core.GraphicsPathSketchFP.MoveTo(Mapdigit.Drawing.Core.PointFP)">
            <summary>
            Moves to given point.
            </summary>
            <param name="point">The point.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Core.GraphicsPathSketchFP.LineTo(Mapdigit.Drawing.Core.PointFP)">
            <summary>
            draw a line from current point to given point.
            </summary>
            <param name="point">The point.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Core.GraphicsPathSketchFP.QuadTo(Mapdigit.Drawing.Core.PointFP,Mapdigit.Drawing.Core.PointFP)">
            <summary>
            Draw quadic curve with given control points.
            </summary>
            <param name="control">The control.</param>
            <param name="point">The point.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Core.GraphicsPathSketchFP.CurveTo(Mapdigit.Drawing.Core.PointFP,Mapdigit.Drawing.Core.PointFP,Mapdigit.Drawing.Core.PointFP)">
            <summary>
            Draw curve with given control points.
            </summary>
            <param name="control1">The control1.</param>
            <param name="control2">The control2.</param>
            <param name="point">The point.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Core.GraphicsPathSketchFP.Close">
            <summary>
            Closes the path.
            </summary>
        </member>
        <member name="M:Mapdigit.Drawing.Core.GraphicsPathDasherFP.#ctor(Mapdigit.Drawing.Core.GraphicsPathFP,System.Int32[],System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Mapdigit.Drawing.Core.GraphicsPathDasherFP"/> class.
            </summary>
            <param name="from"> the path which need to be dashed</param>
            <param name="dashArray">The dash array.</param>
            <param name="offset">from where the dash starts</param>
        </member>
        <member name="M:Mapdigit.Drawing.Core.GraphicsPathDasherFP.GetDashedGraphicsPath">
            <summary>
            return the dashed path, if the dash array is null, return the path unchanged.
            </summary>
            <returns>the dash path</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Core.GraphicsPathDasherFP.MoveTo(Mapdigit.Drawing.Core.PointFP)">
            <summary>
            Moves to given point.
            </summary>
            <param name="point">The point.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Core.GraphicsPathDasherFP.LineTo(Mapdigit.Drawing.Core.PointFP)">
            <summary>
            draw a line from current point to given point.
            </summary>
            <param name="point">The point.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Core.GraphicsPathDasherFP.Close">
            <summary>
            Closes the path.
            </summary>
        </member>
        <member name="M:Mapdigit.Drawing.Core.GraphicsPathDasherFP.AddMoveTo(Mapdigit.Drawing.Core.PointFP)">
            <summary>
            Adds the move to.
            </summary>
            <param name="point">The point.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Core.GraphicsPathDasherFP.AddLineTo(Mapdigit.Drawing.Core.PointFP)">
            <summary>
            Adds the line to.
            </summary>
            <param name="point">The point.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Core.GraphicsPathDasherFP.AddClose">
            <summary>
            Adds the close.
            </summary>
        </member>
        <member name="M:Mapdigit.Drawing.Core.GraphicsPathDasherFP.ExtendIfNeeded(System.Int32,System.Int32)">
            <summary>
            Extends if needed.
            </summary>
            <param name="cmdsAddNum">The CMDS add num.</param>
            <param name="pntsAddNum">The PNTS add num.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Core.GraphicsPathDasherFP.DashLine(Mapdigit.Drawing.Core.GraphicsPathFP,Mapdigit.Drawing.Core.LineFP)">
            <summary>
            Dashes the line.
            </summary>
            <param name="path">The path.</param>
            <param name="line">The line.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Core.GraphicsPathDasherFP.VisitPath(Mapdigit.Drawing.Core.IGraphicsPathIteratorFP)">
            <summary>
            Visits the path.
            </summary>
            <param name="iterator">The iterator.</param>
        </member>
        <member name="T:Mapdigit.Drawing.Core.GraphicsPathFP">
            <summary>
            Represents a series of connected lines and curves.
            </summary>
        </member>
        <member name="M:Mapdigit.Drawing.Core.GraphicsPathFP.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mapdigit.Drawing.Core.GraphicsPathFP"/> class.
            </summary>
        </member>
        <member name="M:Mapdigit.Drawing.Core.GraphicsPathFP.#ctor(Mapdigit.Drawing.Core.GraphicsPathFP)">
            <summary>
            Initializes a new instance of the <see cref="T:Mapdigit.Drawing.Core.GraphicsPathFP"/> class.
            </summary>
            <param name="from">from the one to be copied</param>
        </member>
        <member name="M:Mapdigit.Drawing.Core.GraphicsPathFP.CreateLine(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Create the line path from given coordinates.
            </summary>
            <param name="ffX1">The ff x1.</param>
            <param name="ffY1">The ff y1.</param>
            <param name="ffX2">The ff x2.</param>
            <param name="ffY2">The ff y2.</param>
            <returns></returns>
        </member>
        <member name="M:Mapdigit.Drawing.Core.GraphicsPathFP.CreateOval(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Create the oval path from given rectangle.
            </summary>
            <param name="ffXmin">The ff xmin.</param>
            <param name="ffYmin">The ff ymin.</param>
            <param name="ffXmax">The ff xmax.</param>
            <param name="ffYmax">The ff ymax.</param>
            <returns></returns>
        </member>
        <member name="M:Mapdigit.Drawing.Core.GraphicsPathFP.CreateRoundRect(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates the round rect.
            </summary>
            <param name="ffXmin">The ff xmin.</param>
            <param name="ffYmin">The ff ymin.</param>
            <param name="ffXmax">The ff xmax.</param>
            <param name="ffYmax">The ff ymax.</param>
            <param name="ffRx">The ff rx.</param>
            <param name="ffRy">The ff ry.</param>
            <returns></returns>
        </member>
        <member name="M:Mapdigit.Drawing.Core.GraphicsPathFP.CreateSmoothCurves(Mapdigit.Drawing.Core.PointFP[],System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Creates the smooth curves.
            </summary>
            <param name="points">The points.</param>
            <param name="offset">The offset.</param>
            <param name="numberOfSegments">The number of segments.</param>
            <param name="ffFactor">The ff factor.</param>
            <param name="closed">if set to <c>true</c> [closed].</param>
            <returns></returns>
        </member>
        <member name="M:Mapdigit.Drawing.Core.GraphicsPathFP.CreatePolyline(Mapdigit.Drawing.Core.PointFP[])">
            <summary>
            Creates the polyline.
            </summary>
            <param name="points">The points.</param>
            <returns></returns>
        </member>
        <member name="M:Mapdigit.Drawing.Core.GraphicsPathFP.CreatePolygon(Mapdigit.Drawing.Core.PointFP[])">
            <summary>
            Creates the polygon.
            </summary>
            <param name="points">The points.</param>
            <returns></returns>
        </member>
        <member name="M:Mapdigit.Drawing.Core.GraphicsPathFP.CreateRect(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates the rect.
            </summary>
            <param name="ffXmin">The ff xmin.</param>
            <param name="ffYmin">The ff ymin.</param>
            <param name="ffXmax">The ff xmax.</param>
            <param name="ffYmax">The ff ymax.</param>
            <returns></returns>
        </member>
        <member name="M:Mapdigit.Drawing.Core.GraphicsPathFP.CreateArc(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Creates the arc.
            </summary>
            <param name="ffXmin">The ff xmin.</param>
            <param name="ffYmin">The ff ymin.</param>
            <param name="ffXmax">The ff xmax.</param>
            <param name="ffYmax">The ff ymax.</param>
            <param name="ffArg1">The ff arg1.</param>
            <param name="ffArg2">The ff arg2.</param>
            <param name="closed">if set to <c>true</c> [closed].</param>
            <returns></returns>
        </member>
        <member name="M:Mapdigit.Drawing.Core.GraphicsPathFP.CreateArc(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Creates the arc.
            </summary>
            <param name="ffXmin">The ff xmin.</param>
            <param name="ffYmin">The ff ymin.</param>
            <param name="ffXmax">The ff xmax.</param>
            <param name="ffYmax">The ff ymax.</param>
            <param name="ffStartangle">The ff startangle.</param>
            <param name="ffSweepangle">The ff sweepangle.</param>
            <param name="closed">if set to <c>true</c> [closed].</param>
            <param name="standalone">if set to <c>true</c> [standalone].</param>
            <returns></returns>
        </member>
        <member name="M:Mapdigit.Drawing.Core.GraphicsPathFP.AddPath(Mapdigit.Drawing.Core.GraphicsPathFP)">
            <summary>
            Adds the path.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Core.GraphicsPathFP.AddMoveTo(Mapdigit.Drawing.Core.PointFP)">
            <summary>
            add move to this path
            </summary>
            <param name="point">The point.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Core.GraphicsPathFP.AddLineTo(Mapdigit.Drawing.Core.PointFP)">
            <summary>
            Adds the line to.
            </summary>
            <param name="point">The point.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Core.GraphicsPathFP.AddQuadTo(Mapdigit.Drawing.Core.PointFP,Mapdigit.Drawing.Core.PointFP)">
            <summary>
            Adds the quad to.
            </summary>
            <param name="control">The control.</param>
            <param name="point">The point.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Core.GraphicsPathFP.AddCurveTo(Mapdigit.Drawing.Core.PointFP,Mapdigit.Drawing.Core.PointFP,Mapdigit.Drawing.Core.PointFP)">
            <summary>
            Adds the curve to.
            </summary>
            <param name="control1">The control1.</param>
            <param name="control2">The control2.</param>
            <param name="point">The point.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Core.GraphicsPathFP.AddClose">
            <summary>
            Adds the close.
            </summary>
        </member>
        <member name="M:Mapdigit.Drawing.Core.GraphicsPathFP.CalcOutline(Mapdigit.Drawing.Core.PenFP)">
            <summary>
            Calculate outline with given pen.
            </summary>
            <param name="lineStyle">The line style.</param>
            <returns></returns>
        </member>
        <member name="M:Mapdigit.Drawing.Core.GraphicsPathFP.ToPath">
            <summary>
            To path object in drawing package.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mapdigit.Drawing.Core.GraphicsPathFP.#cctor">
            <summary>
            Initializes the <see cref="T:Mapdigit.Drawing.Core.GraphicsPathFP"/> class.
            </summary>
        </member>
        <member name="M:Mapdigit.Drawing.Core.GraphicsPathFP.Visit(Mapdigit.Drawing.Core.IGraphicsPathIteratorFP)">
            <summary>
            Visits the specified iterator.
            </summary>
            <param name="iterator">The iterator.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Core.GraphicsPathFP.CalcControlPoint(Mapdigit.Drawing.Core.PointFP,Mapdigit.Drawing.Core.PointFP,Mapdigit.Drawing.Core.PointFP,System.Int32)">
            <summary>
            Calcs the control point.
            </summary>
            <param name="p1">The p1.</param>
            <param name="p2">The p2.</param>
            <param name="p3">The p3.</param>
            <param name="ffFactor">The ff factor.</param>
            <returns></returns>
        </member>
        <member name="M:Mapdigit.Drawing.Core.GraphicsPathFP.ExtendIfNeeded(System.Int32,System.Int32)">
            <summary>
            Extends if needed.
            </summary>
            <param name="cmdsAddNum">The CMDS add num.</param>
            <param name="pntsAddNum">The PNTS add num.</param>
        </member>
        <member name="T:Mapdigit.Drawing.Core.GraphicsPathOutlineFP">
            <summary>
            Create outline for a given path.
            </summary>
        </member>
        <member name="M:Mapdigit.Drawing.Core.GraphicsPathOutlineFP.#ctor(Mapdigit.Drawing.Core.GraphicsPathFP,Mapdigit.Drawing.Core.PenFP)">
            <summary>
            Initializes a new instance of the <see cref="T:Mapdigit.Drawing.Core.GraphicsPathOutlineFP"/> class.
            </summary>
            <param name="outline">The outline.</param>
            <param name="lineStyle">The line style.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Core.GraphicsPathOutlineFP.End">
            <summary>
            Ends the path.
            </summary>
        </member>
        <member name="M:Mapdigit.Drawing.Core.GraphicsPathOutlineFP.MoveTo(Mapdigit.Drawing.Core.PointFP)">
            <summary>
            Moves to given point.
            </summary>
            <param name="point">The point.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Core.GraphicsPathOutlineFP.QuadTo(Mapdigit.Drawing.Core.PointFP,Mapdigit.Drawing.Core.PointFP)">
            <summary>
            Draw quadic curve with given control points.
            </summary>
            <param name="control">The control.</param>
            <param name="point">The point.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Core.GraphicsPathOutlineFP.CurveTo(Mapdigit.Drawing.Core.PointFP,Mapdigit.Drawing.Core.PointFP,Mapdigit.Drawing.Core.PointFP)">
            <summary>
            Draw curve with given control points.
            </summary>
            <param name="control1">The control1.</param>
            <param name="control2">The control2.</param>
            <param name="point">The point.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Core.GraphicsPathOutlineFP.Close">
            <summary>
            Closes the path.
            </summary>
        </member>
        <member name="M:Mapdigit.Drawing.Core.GraphicsPathOutlineFP.LineTo(Mapdigit.Drawing.Core.PointFP)">
            <summary>
            draw a line from current point to given point.
            </summary>
            <param name="point">The point.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Core.GraphicsPathOutlineFP.FinishCurrentSegment">
            <summary>
            Finishes the current segment.
            </summary>
        </member>
        <member name="M:Mapdigit.Drawing.Core.GraphicsPathOutlineFP.AddLineCap(Mapdigit.Drawing.Core.PointFP,Mapdigit.Drawing.Core.PointFP,System.Int32)">
            <summary>
            Adds the line cap.
            </summary>
            <param name="p1">The p1.</param>
            <param name="p2">The p2.</param>
            <param name="lineCap">The line cap.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Core.GraphicsPathOutlineFP.CalcHeadTail(Mapdigit.Drawing.Core.PointFP,Mapdigit.Drawing.Core.PointFP,Mapdigit.Drawing.Core.LineFP,Mapdigit.Drawing.Core.LineFP)">
            <summary>
            Calcs the head tail.
            </summary>
            <param name="p1">The p1.</param>
            <param name="p2">The p2.</param>
            <param name="head">The head.</param>
            <param name="tail">The tail.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Core.GraphicsPathOutlineFP.AddLineJoin(Mapdigit.Drawing.Core.PointFP,Mapdigit.Drawing.Core.PointFP,Mapdigit.Drawing.Core.PointFP)">
            <summary>
            Adds the line join.
            </summary>
            <param name="lastPoint">The last point.</param>
            <param name="currPoint">The curr point.</param>
            <param name="nextPoint">The next point.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Core.GraphicsPathOutlineFP.CurveBegin(Mapdigit.Drawing.Core.PointFP)">
            <summary>
            Curves the begin.
            </summary>
            <param name="control">The control.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Core.GraphicsPathOutlineFP.CurveEnd(Mapdigit.Drawing.Core.PointFP,Mapdigit.Drawing.Core.PointFP,Mapdigit.Drawing.Core.PointFP)">
            <summary>
            Curves the end.
            </summary>
            <param name="control1">The control1.</param>
            <param name="control2">The control2.</param>
            <param name="curveEnd">The curve end.</param>
        </member>
        <member name="T:Mapdigit.Drawing.Core.GraphicsPathRendererFP">
            <summary>
            This class actually renders path in memory.
            </summary>
        </member>
        <member name="F:Mapdigit.Drawing.Core.GraphicsPathRendererFP.ModeXor">
            paint mode XOR
        </member>
        <member name="F:Mapdigit.Drawing.Core.GraphicsPathRendererFP.ModeZero">
            paint mode ZERO.(copy)
        </member>
        <member name="M:Mapdigit.Drawing.Core.GraphicsPathRendererFP.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mapdigit.Drawing.Core.GraphicsPathRendererFP"/> class.
            </summary>
        </member>
        <member name="M:Mapdigit.Drawing.Core.GraphicsPathRendererFP.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Mapdigit.Drawing.Core.GraphicsPathRendererFP"/> class.
            </summary>
            <param name="width">the width for the drawing canvas</param>
            <param name="height">the height for the drawing cavas.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Core.GraphicsPathRendererFP.GetWidth">
            <summary>
            Gets the width of graphics object.
            </summary>
            <returns>the width of graphics object</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Core.GraphicsPathRendererFP.GetHeight">
            <summary>
            Gets the height of graphics object.
            </summary>
            <returns>the height of graphics object.</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Core.GraphicsPathRendererFP.DrawPath(Mapdigit.Drawing.Core.GraphicsPathFP,Mapdigit.Drawing.Core.BrushFP,System.Int32)">
            <summary>
            Draws the path.
            </summary>
            <param name="path">The path.</param>
            <param name="style">The style.</param>
            <param name="mode">The mode.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Core.GraphicsPathRendererFP.DrawPath(Mapdigit.Drawing.Core.GraphicsPathFP,Mapdigit.Drawing.Core.MatrixFP,Mapdigit.Drawing.Core.BrushFP,System.Int32)">
            <summary>
            Draws the path.
            </summary>
            <param name="path">The path.</param>
            <param name="matrix">The matrix.</param>
            <param name="fs">The fs.</param>
            <param name="mode">The mode.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Core.GraphicsPathRendererFP.Reset(System.Int32,System.Int32,System.Int32)">
            <summary>
            Resets the specified width.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="scanline">The scanline.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Core.GraphicsPathRendererFP.Clear(System.Int32)">
            <summary>
            Clears the specified color.
            </summary>
            <param name="color">The color.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Core.GraphicsPathRendererFP.FinalizeBuffer(System.Int32)">
            <summary>
            Finalizes the buffer.
            </summary>
            <param name="color">The color.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Core.GraphicsPathRendererFP.MoveTo(Mapdigit.Drawing.Core.PointFP)">
            <summary>
            Moves to given point.
            </summary>
            <param name="point">The point.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Core.GraphicsPathRendererFP.LineTo(Mapdigit.Drawing.Core.PointFP)">
            <summary>
            draw a line from current point to given point.
            </summary>
            <param name="point">The point.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Core.GraphicsPathRendererFP.ClipContains(System.Int32,System.Int32)">
            <summary>
            Check to see if this rectangle contains given point.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns></returns>
        </member>
        <member name="M:Mapdigit.Drawing.Core.GraphicsPathRendererFP.RadixSort(System.Int32[],System.Int32[],System.Int32)">
            <summary>
            Radixes the sort.
            </summary>
            <param name="dataSrc">The data SRC.</param>
            <param name="dataTmp">The data TMP.</param>
            <param name="num">The num.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Core.GraphicsPathRendererFP.DrawBuffer">
            <summary>
            Draws the buffer.
            </summary>
        </member>
        <member name="M:Mapdigit.Drawing.Core.GraphicsPathRendererFP.Scanline(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Scanlines the specified ff sx.
            </summary>
            <param name="ffSx">The ff sx.</param>
            <param name="ffSy">The ff sy.</param>
            <param name="ffEx">The ff ex.</param>
            <param name="ffEy">The ff ey.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Core.GraphicsPathRendererFP.MergePixels(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Merges the pixels.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="count">The count.</param>
            <param name="opacity">The opacity.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Core.GraphicsPathRendererFP.Merge(System.Int32,System.Int32)">
            <summary>
            Merges the specified color1.
            </summary>
            <param name="color1">The color1.</param>
            <param name="color2">The color2.</param>
            <returns></returns>
        </member>
        <member name="T:Mapdigit.Drawing.Core.LinearGradientBrushFP">
            <summary>
            An class that describes a gradient, composed of gradient stops.
            Classes that inherit from GradientBrush describe different ways of
            interpreting gradient stops.
            </summary>
        </member>
        <member name="M:Mapdigit.Drawing.Core.LinearGradientBrushFP.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Create the gradient brush.
            </summary>
            <param name="ffXmin">the top left coordinate.</param>
            <param name="ffYmin">the top left coordinate.</param>
            <param name="ffXmax">the bottom right coordinate.</param>
            <param name="ffYmax">the bottom right coordinate.</param>
            <param name="ffAngle">the angle for this gradient.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Core.LinearGradientBrushFP.SetGradientColor(System.Int32,System.Int32)">
            <summary>
            Set gradient color at given ratio.
            </summary>
            <param name="ratio">The ratio.</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Core.LinearGradientBrushFP.UpdateGradientTable">
            <summary>
            Updates the gradient table.
            </summary>
        </member>
        <member name="M:Mapdigit.Drawing.Core.LinearGradientBrushFP.IsMonoColor">
            <summary>
            Check if it's a mono color brush.
            </summary>
            <returns>true if it's mono color brush.</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Core.LinearGradientBrushFP.GetColorAt(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Get the color value at given position.
            </summary>
            <param name="x">The x coordinate.</param>
            <param name="y">The y coordinate.</param>
            <param name="singlePoint">single point or not</param>
            <returns>the color value.</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Core.LinearGradientBrushFP.GetNextColor">
            <summary>
            Get the next color for this brush.
            </summary>
            <returns>the next color</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Core.LinearGradientBrushFP.Interpolate(System.Int32,System.Int32,System.Int32)">
            <summary>
            Interpolates the specified a.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <param name="pos">The pos.</param>
            <returns></returns>
        </member>
        <member name="T:Mapdigit.Drawing.Core.LineFP">
            <summary>
            a 2D Line class.
            </summary>
        </member>
        <member name="M:Mapdigit.Drawing.Core.LineFP.GetLength">
            <summary>
            get the lenght of the line.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mapdigit.Drawing.Core.LineFP.GetCenter">
            <summary>
            Get the center of the line.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Mapdigit.Drawing.Core.LineFP.Pt1">
            start point the line.
        </member>
        <member name="F:Mapdigit.Drawing.Core.LineFP.Pt2">
            end point of the line.
        </member>
        <member name="M:Mapdigit.Drawing.Core.LineFP.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mapdigit.Drawing.Core.LineFP"/> class.
            </summary>
        </member>
        <member name="M:Mapdigit.Drawing.Core.LineFP.#ctor(Mapdigit.Drawing.Core.LineFP)">
            <summary>
            Initializes a new instance of the <see cref="T:Mapdigit.Drawing.Core.LineFP"/> class.
            </summary>
            <param name="l">The line to be copied.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Core.LineFP.#ctor(Mapdigit.Drawing.Core.PointFP,Mapdigit.Drawing.Core.PointFP)">
            <summary>
            Initializes a new instance of the <see cref="T:Mapdigit.Drawing.Core.LineFP"/> class.
            </summary>
            <param name="p1">The p1.</param>
            <param name="p2">The p2.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Core.LineFP.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Mapdigit.Drawing.Core.LineFP"/> class.
            </summary>
            <param name="ffX1">The ff x1.</param>
            <param name="ffY1">The ff y1.</param>
            <param name="ffX2">The ff x2.</param>
            <param name="ffY2">The ff y2.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Core.LineFP.Reset(Mapdigit.Drawing.Core.LineFP)">
            <summary>
            Resets the specified line.
            </summary>
            <param name="l">The l.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Core.LineFP.Reset(Mapdigit.Drawing.Core.PointFP,Mapdigit.Drawing.Core.PointFP)">
            <summary>
            Resets the specified line with given point.
            </summary>
            <param name="p1">The p1.</param>
            <param name="p2">The p2.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Core.LineFP.Reset(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Resets the specified line with givne coordinates.
            </summary>
            <param name="ffX1">The ff x1.</param>
            <param name="ffY1">The ff y1.</param>
            <param name="ffX2">The ff x2.</param>
            <param name="ffY2">The ff y2.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Core.LineFP.GetHeadOutline(System.Int32)">
            <summary>
            Gets the head outline.
            </summary>
            <param name="ffRad">The ff RAD.</param>
            <returns></returns>
        </member>
        <member name="M:Mapdigit.Drawing.Core.LineFP.GetTailOutline(System.Int32)">
            <summary>
            Gets the tail outline.
            </summary>
            <param name="ffRad">The ff RAD.</param>
            <returns></returns>
        </member>
        <member name="M:Mapdigit.Drawing.Core.LineFP.IsEqual(System.Int32,System.Int32)">
            <summary>
            Determines whether the specified ff val1 is equal.
            </summary>
            <param name="ffVal1">The ff val1.</param>
            <param name="ffVal2">The ff val2.</param>
            <returns>
            	<c>true</c> if the specified ff val1 is equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Mapdigit.Drawing.Core.LineFP.IsZero(System.Int32)">
            <summary>
            Determines whether the specified ff val is zero.
            </summary>
            <param name="ffVal">The ff val.</param>
            <returns>
            	<c>true</c> if the specified ff val is zero; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Mapdigit.Drawing.Core.LineFP.Intersects(Mapdigit.Drawing.Core.LineFP,Mapdigit.Drawing.Core.LineFP,Mapdigit.Drawing.Core.PointFP)">
            <summary>
            check to see if two line intects and return the the intersction point.
            </summary>
            <param name="l1">The l1.</param>
            <param name="l2">The l2.</param>
            <param name="intersection">The intersection.</param>
            <returns></returns>
        </member>
        <member name="M:Mapdigit.Drawing.Core.LineFP.GetPointAtDistance(System.Int32)">
            <summary>
            Gets the point at distance.
            </summary>
            <param name="distance">The distance.</param>
            <returns></returns>
        </member>
        <member name="T:Mapdigit.Drawing.Core.MathFP">
            <summary>
            Fixed point float math.
            </summary>
        </member>
        <member name="F:Mapdigit.Drawing.Core.MathFP.Pi">
            Pi.
        </member>
        <member name="F:Mapdigit.Drawing.Core.MathFP.E">
            E
        </member>
        <member name="M:Mapdigit.Drawing.Core.MathFP.Min(System.Int32,System.Int32)">
            <summary>
            return the minimun of the two values.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns></returns>
        </member>
        <member name="M:Mapdigit.Drawing.Core.MathFP.Max(System.Int32,System.Int32)">
            <summary>
            return the maximum of the two values.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns></returns>
        </member>
        <member name="M:Mapdigit.Drawing.Core.MathFP.Abs(System.Int32)">
            <summary>
            return the abs of the value.
            </summary>
            <param name="x">The x.</param>
            <returns></returns>
        </member>
        <member name="M:Mapdigit.Drawing.Core.MathFP.Mul(System.Int32,System.Int32)">
            <summary>
            return the product of the two values.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns></returns>
        </member>
        <member name="M:Mapdigit.Drawing.Core.MathFP.Div(System.Int32,System.Int32)">
            <summary>
            return the division of the two values.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns></returns>
        </member>
        <member name="M:Mapdigit.Drawing.Core.MathFP.Sqrt(System.Int32)">
            <summary>
            return the square root of the given value.
            </summary>
            <param name="n">The n.</param>
            <returns></returns>
        </member>
        <member name="M:Mapdigit.Drawing.Core.MathFP.IEEERemainder(System.Int32,System.Int32)">
            <summary>
            calculat the IEEE Reminder.
            </summary>
            <param name="n">The n.</param>
            <param name="m">The m.</param>
            <returns></returns>
        </member>
        <member name="M:Mapdigit.Drawing.Core.MathFP.Floor(System.Int32)">
            <summary>
            calculate the floor of the value.
            </summary>
            <param name="x">The x.</param>
            <returns></returns>
        </member>
        <member name="M:Mapdigit.Drawing.Core.MathFP.Round(System.Int32)">
            <summary>
            Calculate the round the value.
            </summary>
            <param name="x">The x.</param>
            <returns></returns>
        </member>
        <member name="M:Mapdigit.Drawing.Core.MathFP.ToDegrees(System.Int32)">
            <summary>
            to degree.
            </summary>
            <param name="f">The f.</param>
            <returns></returns>
        </member>
        <member name="M:Mapdigit.Drawing.Core.MathFP.ToRadians(System.Int32)">
            <summary>
            to radians.
            </summary>
            <param name="f">The f.</param>
            <returns></returns>
        </member>
        <member name="M:Mapdigit.Drawing.Core.MathFP.Sin(System.Int32)">
            <summary>
            calculate of the sine.
            </summary>
            <param name="f">The f.</param>
            <returns></returns>
        </member>
        <member name="M:Mapdigit.Drawing.Core.MathFP.Cos(System.Int32)">
            <summary>
            calculate the cosine.
            </summary>
            <param name="ffAng">The ff ang.</param>
            <returns></returns>
        </member>
        <member name="M:Mapdigit.Drawing.Core.MathFP.Tan(System.Int32)">
            <summary>
             return the tan.
            </summary>
            <param name="f">The f.</param>
            <returns></returns>
        </member>
        <member name="M:Mapdigit.Drawing.Core.MathFP.Atan(System.Int32)">
            <summary>
            return the atan.
            </summary>
            <param name="ffVal">The ff val.</param>
            <returns></returns>
        </member>
        <member name="M:Mapdigit.Drawing.Core.MathFP.Asin(System.Int32)">
            <summary>
            return the asin.
            </summary>
            <param name="f">The f.</param>
            <returns></returns>
        </member>
        <member name="M:Mapdigit.Drawing.Core.MathFP.Acos(System.Int32)">
            <summary>
            return the acosine.
            </summary>
            <param name="f">The f.</param>
            <returns></returns>
        </member>
        <member name="M:Mapdigit.Drawing.Core.MathFP.Min(System.Int64,System.Int64)">
            <summary>
            return the minimum of the two values.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns></returns>
        </member>
        <member name="M:Mapdigit.Drawing.Core.MathFP.Max(System.Int64,System.Int64)">
            <summary>
            return the maximum of the two values.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns></returns>
        </member>
        <member name="M:Mapdigit.Drawing.Core.MathFP.Abs(System.Int64)">
            <summary>
            return the abs of the value.
            </summary>
            <param name="x">The x.</param>
            <returns></returns>
        </member>
        <member name="T:Mapdigit.Drawing.Core.MatrixFP">
            <summary>
            affine matrix in fixed point format.
            </summary>
        </member>
        <member name="F:Mapdigit.Drawing.Core.MatrixFP.ScaleX">
            Scale X factor.
        </member>
        <member name="F:Mapdigit.Drawing.Core.MatrixFP.ScaleY">
            Scale Y factor.
        </member>
        <member name="F:Mapdigit.Drawing.Core.MatrixFP.RotateX">
            Rotate/Shear X factor.
        </member>
        <member name="F:Mapdigit.Drawing.Core.MatrixFP.RotateY">
            Rotate/Shear Y factor.
        </member>
        <member name="F:Mapdigit.Drawing.Core.MatrixFP.TranslateX">
            Translate X.
        </member>
        <member name="F:Mapdigit.Drawing.Core.MatrixFP.TranslateY">
            Translate Y.
        </member>
        <member name="M:Mapdigit.Drawing.Core.MatrixFP.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mapdigit.Drawing.Core.MatrixFP"/> class.
            </summary>
        </member>
        <member name="M:Mapdigit.Drawing.Core.MatrixFP.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Mapdigit.Drawing.Core.MatrixFP"/> class.
            </summary>
            <param name="ffSx">The ff sx.</param>
            <param name="ffSy">The ff sy.</param>
            <param name="ffRx">The ff rx.</param>
            <param name="ffRy">The ff ry.</param>
            <param name="ffTx">The ff tx.</param>
            <param name="ffTy">The ff ty.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Core.MatrixFP.#ctor(Mapdigit.Drawing.Core.MatrixFP)">
            <summary>
            Initializes a new instance of the <see cref="T:Mapdigit.Drawing.Core.MatrixFP"/> class.
            </summary>
            <param name="m">The matrix to be copied.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Core.MatrixFP.Reset">
            <summary>
            reset to identity matrix.
            </summary>
        </member>
        <member name="F:Mapdigit.Drawing.Core.MatrixFP.Identity">
            <summary>
            Identity matrix
            </summary>
        </member>
        <member name="M:Mapdigit.Drawing.Core.MatrixFP.IsIdentity">
            <summary>
            Determines whether this instance is identity.
            </summary>
            <returns>
            	<c>true</c> if this instance is identity; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Mapdigit.Drawing.Core.MatrixFP.IsInvertible">
            <summary>
            Determines whether this instance is invertible.
            </summary>
            <returns>
            	<c>true</c> if this instance is invertible; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Mapdigit.Drawing.Core.MatrixFP.Reset(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Resets the matrix with given value.
            </summary>
            <param name="ffSx">The ff sx.</param>
            <param name="ffSy">The ff sy.</param>
            <param name="ffRx">The ff rx.</param>
            <param name="ffRy">The ff ry.</param>
            <param name="ffTx">The ff tx.</param>
            <param name="ffTy">The ff ty.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Core.MatrixFP.Rotate(System.Int32)">
            <summary>
            Rotates the specified ang.
            </summary>
            <param name="ffAng">The ff ang.</param>
            <returns></returns>
        </member>
        <member name="M:Mapdigit.Drawing.Core.MatrixFP.RotateSkew(System.Int32,System.Int32)">
            <summary>
            Shear or rotate operation.
            </summary>
            <param name="ffRx">The ff rx.</param>
            <param name="ffRy">The ff ry.</param>
            <returns></returns>
        </member>
        <member name="M:Mapdigit.Drawing.Core.MatrixFP.Translate(System.Int32,System.Int32)">
            <summary>
            translate operation.
            </summary>
            <param name="ffDx">The ff dx.</param>
            <param name="ffDy">The ff dy.</param>
            <returns></returns>
        </member>
        <member name="M:Mapdigit.Drawing.Core.MatrixFP.Scale(System.Int32,System.Int32)">
            <summary>
            Scale operation.
            </summary>
            <param name="ffSx">The ff sx.</param>
            <param name="ffSy">The ff sy.</param>
            <returns></returns>
        </member>
        <member name="M:Mapdigit.Drawing.Core.MatrixFP.Multiply(Mapdigit.Drawing.Core.MatrixFP)">
            <summary>
            multipy with another matrix.
            </summary>
            <param name="m">The m.</param>
            <returns></returns>
        </member>
        <member name="M:Mapdigit.Drawing.Core.MatrixFP.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
            </exception>
        </member>
        <member name="M:Mapdigit.Drawing.Core.MatrixFP.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms 
            and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Mapdigit.Drawing.Core.MatrixFP.Determinant">
            <summary>
            calculat the determinat of the matrix.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mapdigit.Drawing.Core.MatrixFP.Invert">
            <summary>
            Inverts this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mapdigit.Drawing.Core.MatrixFP.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="T:Mapdigit.Drawing.Core.PenFP">
            <summary>
            Defines an object used to draw lines and curves.
            </summary>
        </member>
        <member name="F:Mapdigit.Drawing.Core.PenFP.LinecapButt">
            Specifies a butt line cap.
        </member>
        <member name="F:Mapdigit.Drawing.Core.PenFP.LinecapRound">
            Specifies a round line cap.
        </member>
        <member name="F:Mapdigit.Drawing.Core.PenFP.LinecapSquare">
            Specifies a square line cap.
        </member>
        <member name="F:Mapdigit.Drawing.Core.PenFP.LinejoinMiter">
            Specifies a mitered join. This produces a sharp corner or a clipped
            corner, depending on whether the length of the miter exceeds the miter
            limit.
        </member>
        <member name="F:Mapdigit.Drawing.Core.PenFP.LinejoinRound">
            Specifies a circular join. This produces a smooth, circular arc
            between the lines.
        </member>
        <member name="F:Mapdigit.Drawing.Core.PenFP.LinejoinBevel">
            Specifies a beveled join. This produces a diagonal corner.
        </member>
        <member name="F:Mapdigit.Drawing.Core.PenFP.Width">
            the stroke width of the pen.
        </member>
        <member name="F:Mapdigit.Drawing.Core.PenFP.LineJoin">
            the line join for this pen.
        </member>
        <member name="F:Mapdigit.Drawing.Core.PenFP.Brush">
            the brush
        </member>
        <member name="F:Mapdigit.Drawing.Core.PenFP.StartCap">
            cap style used at the beginning of lines drawn with this Pen.
        </member>
        <member name="F:Mapdigit.Drawing.Core.PenFP.EndCap">
            cap style used at the edning of lines drawn with this Pen.
        </member>
        <member name="F:Mapdigit.Drawing.Core.PenFP.DashArray">
            the dash Array ,and if dash array is not null,
             then startCap = PenFP.LinecapButt;
             endCap = PenFP.LinecapButt;
             and  lineJoin = PenFP.LinejoinBevel;
        </member>
        <member name="M:Mapdigit.Drawing.Core.PenFP.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Mapdigit.Drawing.Core.PenFP"/> class.
            </summary>
            <param name="color">the color of this pen.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Core.PenFP.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Mapdigit.Drawing.Core.PenFP"/> class.
            </summary>
            <param name="color">the color of this pen</param>
            <param name="ffWidth">the width of this pen.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Core.PenFP.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Mapdigit.Drawing.Core.PenFP"/> class.
            </summary>
            <param name="color">the color of the pen</param>
            <param name="ffWidth">the width of the pen</param>
            <param name="linecap">the cap style of this pen</param>
            <param name="linejoin">the join style of this pen</param>
        </member>
        <member name="M:Mapdigit.Drawing.Core.PenFP.#ctor(Mapdigit.Drawing.Core.BrushFP,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Mapdigit.Drawing.Core.PenFP"/> class.
            </summary>
            <param name="brush">the brush.</param>
            <param name="ffWidth">the width of the pen</param>
            <param name="linecap">the cap style of this pen</param>
            <param name="linejoin">the join style of this pen</param>
        </member>
        <member name="M:Mapdigit.Drawing.Core.PenFP.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Mapdigit.Drawing.Core.PenFP"/> class.
            </summary>
            <param name="color">the color of the pen</param>
            <param name="ffWidth">the width of the pen</param>
            <param name="startlinecap">the start cap style of this pen</param>
            <param name="endlinecap">the end cap style of this pen</param>
            <param name="linejoin">the join style of this pen</param>
        </member>
        <member name="M:Mapdigit.Drawing.Core.PenFP.#ctor(Mapdigit.Drawing.Core.BrushFP,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Mapdigit.Drawing.Core.PenFP"/> class.
            </summary>
            <param name="brush">the brush of the pen</param>
            <param name="ffWidth">the width of the pen</param>
            <param name="startlinecap">the start cap style of this pen</param>
            <param name="endlinecap">the end cap style of this pen</param>
            <param name="linejoin">the join style of this pen</param>
        </member>
        <member name="M:Mapdigit.Drawing.Core.PenFP.SetDashArray(System.Int32[],System.Int32)">
            <summary>
            Set the dash array for this pen.
            </summary>
            <param name="dashArrays">The dash arrays.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="T:Mapdigit.Drawing.Core.PointFP">
            <summary>
            a 2D point class.
            </summary>
        </member>
        <member name="F:Mapdigit.Drawing.Core.PointFP.X">
            X coordinate.
        </member>
        <member name="F:Mapdigit.Drawing.Core.PointFP.Y">
            Y coordinate.
        </member>
        <member name="F:Mapdigit.Drawing.Core.PointFP.Origin">
            the (0,0) point.
        </member>
        <member name="F:Mapdigit.Drawing.Core.PointFP.Empty">
            Empty point.
        </member>
        <member name="M:Mapdigit.Drawing.Core.PointFP.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mapdigit.Drawing.Core.PointFP"/> class.
            </summary>
        </member>
        <member name="M:Mapdigit.Drawing.Core.PointFP.#ctor(Mapdigit.Drawing.Core.PointFP)">
            <summary>
            Initializes a new instance of the <see cref="T:Mapdigit.Drawing.Core.PointFP"/> class.
            </summary>
            <param name="p">The p.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Core.PointFP.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Mapdigit.Drawing.Core.PointFP"/> class.
            </summary>
            <param name="ffX">The ff X.</param>
            <param name="ffY">The ff Y.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Core.PointFP.IsEmpty(Mapdigit.Drawing.Core.PointFP)">
            <summary>
            Determines whether the specified point is empty.
            </summary>
            <param name="p">The p.</param>
            <returns>
            	<c>true</c> if the specified p is empty; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Mapdigit.Drawing.Core.PointFP.Reset(Mapdigit.Drawing.Core.PointFP)">
            <summary>
            reset the point to the same location as the given point.
            </summary>
            <param name="p">The p.</param>
            <returns></returns>
        </member>
        <member name="M:Mapdigit.Drawing.Core.PointFP.Reset(System.Int32,System.Int32)">
            <summary>
            reset the point to give location.
            </summary>
            <param name="ffX">The ff X.</param>
            <param name="ffY">The ff Y.</param>
            <returns></returns>
        </member>
        <member name="M:Mapdigit.Drawing.Core.PointFP.Transform(Mapdigit.Drawing.Core.MatrixFP)">
            <summary>
            transform the point with give matrix.
            </summary>
            <param name="m">The m.</param>
            <returns></returns>
        </member>
        <member name="M:Mapdigit.Drawing.Core.PointFP.Distance(Mapdigit.Drawing.Core.PointFP,Mapdigit.Drawing.Core.PointFP)">
            <summary>
            the distance between 2 points.
            </summary>
            <param name="p1">The p1.</param>
            <param name="p2">The p2.</param>
            <returns></returns>
        </member>
        <member name="M:Mapdigit.Drawing.Core.PointFP.Distance(System.Int32,System.Int32)">
            <summary>
            calculate the distance.
            </summary>
            <param name="dx">The dx.</param>
            <param name="dy">The dy.</param>
            <returns></returns>
        </member>
        <member name="M:Mapdigit.Drawing.Core.PointFP.Add(Mapdigit.Drawing.Core.PointFP)">
            <summary>
             Add given point the location to this point.
            </summary>
            <param name="p">The p.</param>
            <returns></returns>
        </member>
        <member name="M:Mapdigit.Drawing.Core.PointFP.Sub(Mapdigit.Drawing.Core.PointFP)">
            <summary>
             substract given distance (x,y) to this point.
            </summary>
            <param name="p">The p.</param>
            <returns></returns>
        </member>
        <member name="M:Mapdigit.Drawing.Core.PointFP.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:System.Object"/> is equal 
            to this instance; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
            </exception>
        </member>
        <member name="M:Mapdigit.Drawing.Core.PointFP.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms 
            and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Mapdigit.Drawing.Core.PointFP.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="T:Mapdigit.Drawing.Core.RadialGradientBrushFP">
            <summary>
            An class that describes a gradient, composed of gradient stops.
            Classes that inherit from GradientBrush describe different ways of
            interpreting gradient stops.
            </summary>
        </member>
        <member name="M:Mapdigit.Drawing.Core.RadialGradientBrushFP.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Mapdigit.Drawing.Core.RadialGradientBrushFP"/> class.
            </summary>
            <param name="ffX">the top left coordinate..</param>
            <param name="ffY">the top left coordinate.</param>
            <param name="ffRadius">radius of the gradident</param>
            <param name="ffAngle">angle.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Core.RadialGradientBrushFP.SetGradientColor(System.Int32,System.Int32)">
            <summary>
            Set gradient color at given ratio.
            </summary>
            <param name="ratio">The ratio.</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Core.RadialGradientBrushFP.UpdateGradientTable">
            <summary>
            Updates the gradient table.
            </summary>
        </member>
        <member name="M:Mapdigit.Drawing.Core.RadialGradientBrushFP.Interpolate(System.Int32,System.Int32,System.Int32)">
            <summary>
            Interpolates the specified a.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <param name="pos">The pos.</param>
            <returns></returns>
        </member>
        <member name="M:Mapdigit.Drawing.Core.RadialGradientBrushFP.IsMonoColor">
            <summary>
            Check if it's a mono color brush.
            </summary>
            <returns>true if it's mono color brush.</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Core.RadialGradientBrushFP.GetColorAt(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Get the color value at given position.
            </summary>
            <param name="x">The x coordinate.</param>
            <param name="y">The y coordinate.</param>
            <param name="singlePoint">single point or not</param>
            <returns>the color value.</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Core.RadialGradientBrushFP.GetNextColor">
            <summary>
            Get the next color for this brush.
            </summary>
            <returns>the next color</returns>
        </member>
        <member name="T:Mapdigit.Drawing.Core.RectangleFP">
            <summary>
            a 2D rectangle class.
            </summary>
        </member>
        <member name="M:Mapdigit.Drawing.Core.RectangleFP.GetBottom">
            <summary>
            Gets the bottom.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mapdigit.Drawing.Core.RectangleFP.GetTop">
            <summary>
            Gets the top.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mapdigit.Drawing.Core.RectangleFP.GetLeft">
            <summary>
            Gets the left.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mapdigit.Drawing.Core.RectangleFP.GetRight">
            <summary>
            Gets the right.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mapdigit.Drawing.Core.RectangleFP.GetWidth">
            <summary>
            Gets the width.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mapdigit.Drawing.Core.RectangleFP.SetWidth(System.Int32)">
            <summary>
            Sets the width.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Core.RectangleFP.GetHeight">
            <summary>
            Gets the height.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mapdigit.Drawing.Core.RectangleFP.SetHeight(System.Int32)">
            <summary>
            Sets the height.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Core.RectangleFP.GetX">
            <summary>
            Gets the X.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mapdigit.Drawing.Core.RectangleFP.SetX(System.Int32)">
            <summary>
            Sets the X.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Core.RectangleFP.GetY">
            <summary>
            Gets the Y.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mapdigit.Drawing.Core.RectangleFP.SetY(System.Int32)">
            <summary>
            Sets the Y.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="F:Mapdigit.Drawing.Core.RectangleFP.Empty">
            The empty rectangle.
        </member>
        <member name="M:Mapdigit.Drawing.Core.RectangleFP.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mapdigit.Drawing.Core.RectangleFP"/> class.
            </summary>
        </member>
        <member name="M:Mapdigit.Drawing.Core.RectangleFP.#ctor(Mapdigit.Drawing.Core.RectangleFP)">
            <summary>
            Initializes a new instance of the <see cref="T:Mapdigit.Drawing.Core.RectangleFP"/> class.
            </summary>
            <param name="r">The rect to be copied from.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Core.RectangleFP.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Mapdigit.Drawing.Core.RectangleFP"/> class.
            </summary>
            <param name="ffXmin">The ff xmin.</param>
            <param name="ffYmin">The ff ymin.</param>
            <param name="ffXmax">The ff xmax.</param>
            <param name="ffYmax">The ff ymax.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Core.RectangleFP.Reset(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Resets the specified rectangle.
            </summary>
            <param name="ffXmin">The ff xmin.</param>
            <param name="ffYmin">The ff ymin.</param>
            <param name="ffXmax">The ff xmax.</param>
            <param name="ffYmax">The ff ymax.</param>
            <returns></returns>
        </member>
        <member name="M:Mapdigit.Drawing.Core.RectangleFP.Reset(Mapdigit.Drawing.Core.RectangleFP)">
            <summary>
            Resets the rectangle.
            </summary>
            <param name="r">The r.</param>
            <returns></returns>
        </member>
        <member name="M:Mapdigit.Drawing.Core.RectangleFP.IsEmpty">
            <summary>
            Determines whether this instance is empty.
            </summary>
            <returns>
            	<c>true</c> if this instance is empty; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Mapdigit.Drawing.Core.RectangleFP.Offset(System.Int32,System.Int32)">
            <summary>
            Translate the rectangle.
            </summary>
            <param name="ffDx">The ff dx.</param>
            <param name="ffDy">The ff dy.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Core.RectangleFP.Union(Mapdigit.Drawing.Core.RectangleFP)">
            <summary>
            Calculate the union of the two rectangle.
            </summary>
            <param name="r">The r.</param>
            <returns></returns>
        </member>
        <member name="M:Mapdigit.Drawing.Core.RectangleFP.Union(Mapdigit.Drawing.Core.PointFP)">
            <summary>
            return the union of the rectangle and the given point.
            </summary>
            <param name="p">The p.</param>
            <returns></returns>
        </member>
        <member name="M:Mapdigit.Drawing.Core.RectangleFP.IntersectsWith(Mapdigit.Drawing.Core.RectangleFP)">
            <summary>
            Check to see this rectange intersect with given rectange.
            </summary>
            <param name="r">The r.</param>
            <returns></returns>
        </member>
        <member name="M:Mapdigit.Drawing.Core.RectangleFP.Contains(Mapdigit.Drawing.Core.PointFP)">
            <summary>
            Check to see if this rectangle contains given point.
            </summary>
            <param name="p">The p.</param>
            <returns>
            	<c>true</c> if [contains] [the specified p]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Mapdigit.Drawing.Core.RectangleFP.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="o">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:System.Object"/> is equal to this 
            instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Mapdigit.Drawing.Core.RectangleFP.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms
             and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Mapdigit.Drawing.Core.RectangleFP.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="T:Mapdigit.Drawing.Core.SingleFP">
            <summary>
            Single is a fix point single class.
            </summary>
        </member>
        <member name="F:Mapdigit.Drawing.Core.SingleFP.PositiveInfinity">
            Positive Infinity.
        </member>
        <member name="F:Mapdigit.Drawing.Core.SingleFP.NegativeInfinity">
            Negative infinity.
        </member>
        <member name="F:Mapdigit.Drawing.Core.SingleFP.MaxValue">
            Max Value.
        </member>
        <member name="F:Mapdigit.Drawing.Core.SingleFP.MinValue">
            Min Value.
        </member>
        <member name="F:Mapdigit.Drawing.Core.SingleFP.NotANumber">
            Not a number.
        </member>
        <member name="F:Mapdigit.Drawing.Core.SingleFP.DecimalBits">
            Fix point length.
        </member>
        <member name="F:Mapdigit.Drawing.Core.SingleFP.One">
            the number 1 in this fix point float.
        </member>
        <member name="F:Mapdigit.Drawing.Core.SingleFP._value">
            int format for this single.
        </member>
        <member name="M:Mapdigit.Drawing.Core.SingleFP.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Mapdigit.Drawing.Core.SingleFP"/> class.
            </summary>
            <param name="v">the integer format for this fixed point number.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Core.SingleFP.#ctor(Mapdigit.Drawing.Core.SingleFP)">
            <summary>
            Initializes a new instance of the <see cref="T:Mapdigit.Drawing.Core.SingleFP"/> class.
            </summary>
            <param name="f">The single to be copied from.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Core.SingleFP.IsNaN(System.Int32)">
            <summary>
            Test if it's NaN.
            </summary>
            <param name="x">The x.</param>
            <returns>
            	true, if it's NaN.
            </returns>
        </member>
        <member name="M:Mapdigit.Drawing.Core.SingleFP.IsInfinity(System.Int32)">
            <summary>
            Determines whether the specified x is infinity.
            </summary>
            <param name="x">The x.</param>
            <returns>
            	<c>true</c> if the specified x is infinity; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Mapdigit.Drawing.Core.SingleFP.IsNegativeInfinity(System.Int32)">
            <summary>
            Test if it's negative infinity.
            </summary>
            <param name="x">The x.</param>
            <returns>
            	 true it's  negitive infinity.
            </returns>
        </member>
        <member name="M:Mapdigit.Drawing.Core.SingleFP.IsPositiveInfinity(System.Int32)">
            <summary>
            Test if it's positive infinity.
            </summary>
            <param name="x">The x.</param>
            <returns>
            	true it's  positive infinity.
            </returns>
        </member>
        <member name="M:Mapdigit.Drawing.Core.SingleFP.FromFloat(System.Single)">
            <summary>
            convert a float to this fixed point float.
            </summary>
            <param name="f">a float number</param>
            <returns></returns>
        </member>
        <member name="M:Mapdigit.Drawing.Core.SingleFP.FromDouble(System.Double)">
            <summary>
            convert a double to this fixed point float.
            </summary>
            <param name="f">The f.</param>
            <returns></returns>
        </member>
        <member name="M:Mapdigit.Drawing.Core.SingleFP.ToFloat(System.Int32)">
            <summary>
            Convert this fixed point float to a float.
            </summary>
            <param name="x">The x.</param>
            <returns></returns>
        </member>
        <member name="M:Mapdigit.Drawing.Core.SingleFP.ToDouble(System.Int32)">
            <summary>
            Convert this fixed point float to a double.
            </summary>
            <param name="x">The x.</param>
            <returns></returns>
        </member>
        <member name="M:Mapdigit.Drawing.Core.SingleFP.FromInt(System.Int32)">
            <summary>
            Convert an integer to the fixed point float.
            </summary>
            <param name="x">The x.</param>
            <returns></returns>
        </member>
        <member name="M:Mapdigit.Drawing.Core.SingleFP.ToInt(System.Int32)">
            <summary>
            Convert the fixed point float back to an integer.
            </summary>
            <param name="ffX">The ff X.</param>
            <returns></returns>
        </member>
        <member name="M:Mapdigit.Drawing.Core.SingleFP.ParseSingle(System.String)">
            <summary>
            Parse an string can convert it to fixed point float.
            </summary>
            <param name="strValue">a string reprents a float</param>
            <returns></returns>
        </member>
        <member name="M:Mapdigit.Drawing.Core.SingleFP.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="T:Mapdigit.Drawing.Core.SolidBrushFP">
            <summary>
            Defines a brush of a single color. Brushes are used to fill graphics shapes,
            such as rectangles, ellipses, pies, polygons, and paths.
            </summary>
        </member>
        <member name="M:Mapdigit.Drawing.Core.SolidBrushFP.IsMonoColor">
            <summary>
            Check if it's a mono color brush.
            </summary>
            <returns>true if it's mono color brush.</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Core.SolidBrushFP.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mapdigit.Drawing.Core.SolidBrushFP"/> class.
            </summary>
        </member>
        <member name="M:Mapdigit.Drawing.Core.SolidBrushFP.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Mapdigit.Drawing.Core.SolidBrushFP"/> class.
            </summary>
            <param name="color">The color.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Core.SolidBrushFP.GetColorAt(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Get the color value at given position.
            </summary>
            <param name="x">The x coordinate.</param>
            <param name="y">The y coordinate.</param>
            <param name="singlePoint">single point or not</param>
            <returns>the color value.</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Core.SolidBrushFP.GetNextColor">
            <summary>
            Get the next color for this brush.
            </summary>
            <returns>the next color</returns>
        </member>
        <member name="F:Mapdigit.Drawing.Core.SolidBrushFP._color">
            The color for this solid brush.
        </member>
        <member name="T:Mapdigit.Drawing.Core.TextureBrushFP">
            <summary>
            Defines a brush of a single color. Brushes are used to fill graphics shapes,
            such as rectangles, ellipses, pies, polygons, and paths.
            </summary>
        </member>
        <member name="M:Mapdigit.Drawing.Core.TextureBrushFP.IsMonoColor">
            <summary>
            Check if it's a mono color brush.
            </summary>
            <returns>true if it's mono color brush.</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Core.TextureBrushFP.#ctor(System.Int32[],System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Mapdigit.Drawing.Core.TextureBrushFP"/> class.
            </summary>
            <param name="image">The image.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Core.TextureBrushFP.GetColorAt(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Get the color value at given position.
            </summary>
            <param name="x">The x coordinate.</param>
            <param name="y">The y coordinate.</param>
            <param name="singlePoint">single point or not</param>
            <returns>the color value.</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Core.TextureBrushFP.GetNextColor">
            <summary>
            Get the next color for this brush.
            </summary>
            <returns>the next color</returns>
        </member>
        <member name="F:Mapdigit.Drawing.Core.TextureBrushFP._width">
            the width of the texture
        </member>
        <member name="F:Mapdigit.Drawing.Core.TextureBrushFP._height">
            the height of the texture brush
        </member>
        <member name="F:Mapdigit.Drawing.Core.TextureBrushFP._textureBuffer">
            the texture buffer
        </member>
        <member name="F:Mapdigit.Drawing.Core.TextureBrushFP._nextPt">
            next point position.
        </member>
        <member name="T:Mapdigit.Drawing.FontEx">
            <summary>
              Vector font class. each font is described by SVG path string internally.
            </summary>
        </member>
        <member name="F:Mapdigit.Drawing.FontEx.TextDirLr">
            <summary>
             Sets the text direction to left-to-right, as is common in most
             Latin-based documents. The current text position is advanced from
             left to right after each glyph is rendered.
            </summary>
        </member>
        <member name="F:Mapdigit.Drawing.FontEx.TextDirRl">
            <summary>
             Sets the text direction to right-to-left, as is common in Arabic
             or Hebrew scripts.
            </summary>
        </member>
        <member name="F:Mapdigit.Drawing.FontEx.TextDirTb">
            <summary>
             Sets the text direction to top-to-bottom, as is common in some Asian
             scripts, such as Chinese and Japanese.
            </summary>
        </member>
        <member name="M:Mapdigit.Drawing.FontEx.#ctor(System.IO.Stream)">
            <summary>
             Constructor
            </summary>
            <param name="inputStream">inputStream input stream which the font is stored</param>
        </member>
        <member name="M:Mapdigit.Drawing.FontEx.GetSystemFont">
            <summary>
             Get the default system font object.
            </summary>
            <returns>the system font.</returns>
        </member>
        <member name="M:Mapdigit.Drawing.FontEx.GetGlyphArray(System.Int32,System.Char[],System.Int32,System.Int32,System.Int32)">
            <summary>
             Return a shape array stored each glyph for characters in the char arrary.
            </summary>
            <param name="fontSize">the size of the font.</param>
            <param name="ac">the array of characters.</param>
            <param name="off">the index of the first character to measure.</param>
            <param name="len">the number of characters to measure</param>
            <param name="tdir">the text direction.</param>
            <returns>a array of font character shapes.The origin of each shape is (0,0)</returns>
        </member>
        <member name="M:Mapdigit.Drawing.FontEx.GetGlyphArray(System.Int32,System.Char[],System.Int32,System.Int32,System.Int32,Mapdigit.Drawing.Geometry.AffineTransform)">
            <summary>
             Return a shape array stored each glyph for characters in the char arrary.
            </summary>
            <param name="fontSize"> the size of the font.</param>
            <param name="ac">the array of characters.</param>
            <param name="off"> the index of the first character to measure.</param>
            <param name="len">the number of characters to measure</param>
            <param name="tdir">the text direction.</param>
            <param name="transform">tranformation</param>
            <returns>array of font character shapes.The origin of each shape is (0,0)</returns>
        </member>
        <member name="M:Mapdigit.Drawing.FontEx.CharWidth(System.Char,System.Int32)">
            <summary>
             calcualte the width of given character
            </summary>
            <param name="ch">character</param>
            <param name="fontSize">the size of the font</param>
            <returns>the widht of the given character</returns>
        </member>
        <member name="M:Mapdigit.Drawing.FontEx.CharsWidth(System.Char[],System.Int32,System.Int32,System.Int32)">
            <summary>
             Return the width of the given characters in this font instance
            </summary>
            <param name="ch"> array of characters</param>
            <param name="offset">characters offsets</param>
            <param name="length">characters length</param>
            <param name="fontSize">the size of the font</param>
            <returns>the width of the given characters in this font instance</returns>
        </member>
        <member name="F:Mapdigit.Drawing.FontEx._reader">
            reader to read the data from the font file.
        </member>
        <member name="P:Mapdigit.Drawing.FontEx.Name">
            <summary>
             Return the font name.
            </summary>
            <value> the name of the font.</value>
        </member>
        <member name="P:Mapdigit.Drawing.FontEx.Height">
            <summary>
             the height of the font.
            </summary>
            <value> the height of the font.</value>
        </member>
        <member name="T:Mapdigit.Drawing.FontHeader">
            <summary>
            Header of font file.
            </summary>
        </member>
        <member name="T:Mapdigit.Drawing.FontIndex">
            <summary>
            Index of font file.
            </summary>
        </member>
        <member name="T:Mapdigit.Drawing.Geometry.AffineTransform">
            <summary>
            The AffineTransform class represents a 2D affine transform
            that performs a linear mapping from 2D coordinates to other 2D
            coordinates that preserves the "straightness" and
            "parallelness" of lines. 
            </summary>
            <remarks>
             Affine transformations can be constructed
            using sequences of translations, scales, flips, rotations, and shears.
            
            Such a coordinate transformation can be represented by a 3 row by
            3 column matrix with an implied last row of [ 0 0 1 ].  This matrix
            transforms source coordinates (x,y) into
            destination coordinates  (x',y') by considering
            them to be a column vector and multiplying the coordinate vector
            by the matrix according to the following process:
            <pre>
            [ x']   [  m00  m01  m02  ] [ x ]   [ m00x + m01y + m02 ]
            [ y'] = [  m10  m11  m12  ] [ y ] = [ m10x + m11y + m12 ]
            [ 1 ]   [   0    0    1   ] [ 1 ]   [         1         ]
            </pre>
            
            <a name="quadrantapproximation"><h4>Handling 90-Degree Rotations</h4></a>
            
            In some variations of the rotate methods in the
            AffineTransform class, a double-precision argument
            specifies the angle of rotation in radians.
            These methods have special handling for rotations of approximately
            90 degrees (including multiples such as 180, 270, and 360 degrees),
            so that the common case of quadrant rotation is handled more
            efficiently.
            This special handling can cause angles very close to multiples of
            90 degrees to be treated as if they were exact multiples of
            90 degrees.
            For small multiples of 90 degrees the range of angles treated
            as a quadrant rotation is approximately 0.00000121 degrees wide.
            This section explains why such special care is needed and how
            it is implemented.
            
            Since 90 degrees is represented as Pi/2 in radians,
            and since Pi is a transcendental (and therefore irrational) number,
            it is not possible to exactly represent a multiple of 90 degrees as
            an exact double precision Value measured in radians.
            As a result it is theoretically impossible to describe quadrant
            rotations (90, 180, 270 or 360 degrees) using these values.
            Double precision floating point values can get very close to
            non-zero multiples of Pi/2 but never close enough
            for the sine or cosine to be exactly 0.0, 1.0 or -1.0.
            The implementations of Math.Sin() and
            Math.Cos() correspondingly never return 0.0
            for any case other than Math.Sin(0.0).
            These same implementations do, however, return exactly 1.0 and
            -1.0 for some range of numbers around each multiple of 90
            degrees since the correct answer is so close to 1.0 or -1.0 that
            the double precision significand cannot represent the difference
            as accurately as it can for numbers that are near 0.0.
            
            The net result of these issues is that if the
            Math.Sin() and Math.Cos() methods
            are used to directly generate the values for the matrix modifications
            during these radian-based rotation operations then the resulting
            transform is never strictly classifiable as a quadrant rotation
            even for a simple case like rotate(Math.Pi/2.0),
            due to minor variations in the matrix caused by the non-0.0 values
            obtained for the sine and cosine.
            If these transforms are not classified as quadrant rotations then
            subsequent c which attempts to optimize further operations based
            upon the type of the transform will be relegated to its most general
            implementation.
            
            Because quadrant rotations are fairly common,
            this class should handle these cases reasonably quickly, both in
            applying the rotations to the transform and in applying the resulting
            transform to the coordinates.
            To facilitate this optimal handling, the methods which take an angle
            of rotation measured in radians attempt to detect angles that are
            intended to be quadrant rotations and treat them as such.
            These methods therefore treat an angle <em>theta</em> as a quadrant
            rotation if either Math.Sin(<em>theta</em>) or
            Math.Cos(<em>theta</em>) returns exactly 1.0 or -1.0.
            As a rule of thumb, this property holds true for a range of
            approximately 0.0000000211 radians (or 0.00000121 degrees) around
            small multiples of Math.Pi/2.0.
            </remarks>
        </member>
        <member name="F:Mapdigit.Drawing.Geometry.AffineTransform.TypeIdentity">
            <summary>
             This constant indicates that the transform defined by this object
             is an identity transform.
             </summary>
             <remarks>
             An identity transform is one in which the output coordinates are
             always the same as the input coordinates.
             If this transform is anything other than the identity transform,
             the type will either be the constant GENERAL_TRANSFORM or a
             combination of the appropriate flag bits for the various coordinate
             conversions that this transform performs.
            </remarks>
        </member>
        <member name="F:Mapdigit.Drawing.Geometry.AffineTransform.TypeTranslation">
            <summary>
             This flag bit indicates that the transform defined by this object
             performs a translation in addition to the conversions indicated
             by other flag bits.
             </summary>
             <remarks>
             A translation moves the coordinates by a constant amount in x
             and y without changing the length or angle of vectors.
            </remarks>
        </member>
        <member name="F:Mapdigit.Drawing.Geometry.AffineTransform.TypeUniformScale">
            <summary>
            This flag bit indicates that the transform defined by this object
            performs a uniform scale in addition to the conversions indicated
            by other flag bits.
            </summary>
            <remarks>
            A uniform scale multiplies the length of vectors by the same amount
            in both the x and y directions without changing the angle between
            vectors.
            This flag bit is mutually exclusive with the TypeGeneralScale flag.
            </remarks>
        </member>
        <member name="F:Mapdigit.Drawing.Geometry.AffineTransform.TypeGeneralScale">
            <summary>
            This flag bit indicates that the transform defined by this object
            performs a general scale in addition to the conversions indicated
            by other flag bits.
            </summary>
            <remarks>
            A general scale multiplies the length of vectors by different
            amounts in the x and y directions without changing the angle
            between perpendicular vectors.
            This flag bit is mutually exclusive with the TypeUniformScale flag.
            </remarks>
        </member>
        <member name="F:Mapdigit.Drawing.Geometry.AffineTransform.TypeMaskScale">
            <summary>
             This constant is a bit mask for any of the scale flag bits.
            </summary>
        </member>
        <member name="F:Mapdigit.Drawing.Geometry.AffineTransform.TypeFlip">
            <summary>
            This flag bit indicates that the transform defined by this object
            performs a mirror image flip about some axis which changes the
            normally right handed coordinate system into a left handed
            system in addition to the conversions indicated by other flag bits.
            </summary>
            <remarks>
            A right handed coordinate system is one where the positive X
            axis rotates counterclockwise to overlay the positive Y axis
            similar to the direction that the fingers on your right hand
            curl when you stare end on at your thumb.
            A left handed coordinate system is one where the positive X
            axis rotates clockwise to overlay the positive Y axis similar
            to the direction that the fingers on your left hand curl.
            There is no mathematical way to determine the angle of the
            original flipping or mirroring transformation since all angles
            of flip are identical given an appropriate adjusting rotation.
            </remarks>
        </member>
        <member name="F:Mapdigit.Drawing.Geometry.AffineTransform.TypeQuadrantRotation">
            <summary>
            This flag bit indicates that the transform defined by this object
            performs a quadrant rotation by some multiple of 90 degrees in
            addition to the conversions indicated by other flag bits.
            </summary>
            <remarks>
            A rotation changes the angles of vectors by the same amount
            regardless of the original direction of the vector and without
            changing the length of the vector.
            This flag bit is mutually exclusive with the TypeGeneralRotation flag.
            </remarks>
        </member>
        <member name="F:Mapdigit.Drawing.Geometry.AffineTransform.TypeGeneralRotation">
            <summary>
            This flag bit indicates that the transform defined by this object
            performs a rotation by an arbitrary angle in addition to the
            conversions indicated by other flag bits.
            </summary>
            <remarks>
            A rotation changes the angles of vectors by the same amount
            regardless of the original direction of the vector and without
            changing the length of the vector.
            This flag bit is mutually exclusive with the
            TypeQuadrantRotation flag.
            </remarks>
        </member>
        <member name="F:Mapdigit.Drawing.Geometry.AffineTransform.TypeMaskRotation">
            <summary>
              This constant is a bit mask for any of the rotation flag bits.
            </summary>
        </member>
        <member name="F:Mapdigit.Drawing.Geometry.AffineTransform.TypeGeneralTransform">
            <summary>
            This constant indicates that the transform defined by this object
            performs an arbitrary conversion of the input coordinates.
            </summary>
            <remarks>
            If this transform can be classified by any of the above constants,
            the type will either be the constant TypeIdentity or a
            combination of the appropriate flag bits for the various coordinate
            conversions that this transform performs.
            </remarks>
        </member>
        <member name="F:Mapdigit.Drawing.Geometry.AffineTransform.ApplyTranslate">
            This constant is used for the internal state variable to indicate
            that the translation components of the matrix (m02 and m12) need
            to be added to complete the transformation equation of this transform.
        </member>
        <member name="F:Mapdigit.Drawing.Geometry.AffineTransform.ApplyScale">
            This constant is used for the internal state variable to indicate
            that the scaling components of the matrix (m00 and m11) need
            to be factored in to complete the transformation equation of
            this transform.  If the ApplyShear bit is also set then it
            indicates that the scaling components are not both 0.0.  If the
            ApplyShear bit is not also set then it indicates that the
            scaling components are not both 1.0.  If neither the ApplyShear
            nor the ApplyScale bits are set then the scaling components
            are both 1.0, which means that the x and y components contribute
            to the transformed coordinate, but they are not multiplied by
            any scaling factor.
        </member>
        <member name="F:Mapdigit.Drawing.Geometry.AffineTransform.ApplyShear">
            This constant is used for the internal state variable to indicate
            that the shearing components of the matrix (m01 and m10) need
            to be factored in to complete the transformation equation of this
            transform.  The presence of this bit in the state variable changes
            the interpretation of the ApplyScale bit as indicated in its
            documentation.
        </member>
        <member name="F:Mapdigit.Drawing.Geometry.AffineTransform.ApplyIdentity">
            This constant is used for the internal state variable to indicate
            that no calculations need to be performed and that the source
            coordinates only need to be copied to their destinations to
            complete the transformation equation of this transform.
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.AffineTransform.FromString(System.String)">
            <summary>
            Parses Transforms from a list of transform definitions,
            which are applied in the order provided.
            </summary>
            <param name="input">input transform string. i.e
            translate(-10,-20) scale(2) rotate(45) translate(5,10)</param>
            <returns>affine transform.</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.AffineTransform.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mapdigit.Drawing.Geometry.AffineTransform"/> class.
            </summary>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.AffineTransform.#ctor(Mapdigit.Drawing.Geometry.AffineTransform)">
            <summary>
            Initializes a new instance of the <see cref="T:Mapdigit.Drawing.Geometry.AffineTransform"/> class.
            </summary>
            <param name="tx">the AffineTransform object to copy</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.AffineTransform.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructs a new AffineTransform from 6 double
            precision values representing the 6 specifiable entries of the 3x3
            transformation matrix.
            </summary>
            <param name="m00">the X coordinate scaling element of the 3x3 matrix</param>
            <param name="m10">the Y coordinate shearing element of the 3x3 matrix</param>
            <param name="m01">the X coordinate shearing element of the 3x3 matrix.</param>
            <param name="m11">the Y coordinate scaling element of the 3x3 matrix.</param>
            <param name="m02">X coordinate translation element of the 3x3 matrix.</param>
            <param name="m12">Y coordinate translation element of the 3x3 matrix.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.AffineTransform.#ctor(System.Double[])">
            <summary>
            Constructs a new AffineTransform from an array of
            double precision values representing either the 4 non-translation
            entries or the 6 specifiable entries of the 3x3 transformation
            matrix. The values are retrieved from the array as
            {m00 m10 m01 m11 [m02 m12]}.
            </summary>
            <param name="flatmatrix">the double array containing the values to be set
            in the new AffineTransform object. The length of the
            array is assumed to be at least 4. If the length of the array is
            less than 6, only the first 4 values are taken. If the length of
            the array is greater than 6, the first 6 values are taken.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.AffineTransform.GetTranslateInstance(System.Double,System.Double)">
            <summary>
            Returns a transform representing a translation transformation.
            </summary>
            <remarks>
            The matrix representing the returned transform is:
            <pre>
            	[   1    0    tx  ]
            	[   0    1    ty  ]
            	[   0    0    1   ]
            </pre>
            </remarks>
            <param name="tx">the distance by which coordinates are translated in the
            X axis direction</param>
            <param name="ty">ty the distance by which coordinates are translated in the
            Y axis direction</param>
            <returns>an AffineTransform object that represents a
            translation transformation, created with the specified vector.</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.AffineTransform.GetRotateInstance(System.Double)">
            <summary>
            Returns a transform representing a rotation transformation.
            </summary>
            <remarks>
            The matrix representing the returned transform is:
            <pre>
            	[   cos(theta)    -sin(theta)    0   ]
            	[   sin(theta)     cos(theta)    0   ]
            	[       0              0         1   ]
            </pre>
            Rotating by a positive angle theta rotates points on the positive
            X axis toward the positive Y axis.
            also the discussion of
            <a href="#quadrantapproximation">Handling 90-Degree Rotations</a>
            above.
            </remarks>
            <param name="theta">the angle of rotation measured in radians.</param>
            <returns>an AffineTransform object that is a rotation
            transformation, created with the specified angle of rotation</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.AffineTransform.GetRotateInstance(System.Double,System.Double,System.Double)">
             <summary>
             Returns a transform that rotates coordinates around an anchor point.
             </summary>
             <remarks>
             This operation is equivalent to translating the coordinates so
             that the anchor point is at the origin (S1), then rotating them
             about the new origin (S2), and finally translating so that the
             intermediate origin is restored to the coordinates of the original
             anchor point (S3).
             
             This operation is equivalent to the following sequence of calls:
             <pre>
                 AffineTransform Tx = new AffineTransform();
                 Tx.translate(anchorx, anchory);    // S3: final translation
                 Tx.rotate(theta);		      // S2: rotate around anchor
                 Tx.translate(-anchorx, -anchory);  // S1: translate anchor to origin
             </pre>
             The matrix representing the returned transform is:
             <pre>
            		[   cos(theta)    -sin(theta)    x-x///cos+y///sin  ]
            		[   sin(theta)     cos(theta)    y-x///sin-y///cos  ]
            		[       0              0               1        ]
             </pre>
             Rotating by a positive angle theta rotates points on the positive
             X axis toward the positive Y axis.
             also the discussion of
             <a href="#quadrantapproximation">Handling 90-Degree Rotations</a>
             above.
            </remarks>
             <param name="theta">the angle of rotation measured in radians</param>
             <param name="anchorx">the X coordinate of the rotation anchor point</param>
             <param name="anchory">the Y coordinate of the rotation anchor point</param>
             <returns>an AffineTransform object that rotates
             coordinates around the specified point by the specified angle of
             rotation.</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.AffineTransform.GetRotateInstance(System.Double,System.Double)">
            <summary>
            Returns a transform that rotates coordinates according to
            a rotation vector.
            </summary>
            <remarks>
            All coordinates rotate about the origin by the same amount.
            The amount of rotation is such that coordinates along the former
            positive X axis will subsequently align with the vector pointing
            from the origin to the specified vector coordinates.
            If both vecx and vecy are 0.0,
            an identity transform is returned.
            This operation is equivalent to calling:
            <pre>
                AffineTransform.getRotateInstance(Math.atan2(vecy, vecx));
            </pre>
            </remarks>
            <param name="vecx">the X coordinate of the rotation vector</param>
            <param name="vecy">the Y coordinate of the rotation vector</param>
            <returns>an AffineTransform object that rotates
            coordinates according to the specified rotation vector.</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.AffineTransform.GetRotateInstance(System.Double,System.Double,System.Double,System.Double)">
             <summary>
             Returns a transform that rotates coordinates around an anchor
             point accordinate to a rotation vector.
             </summary>
             <remarks>
             All coordinates rotate about the specified anchor coordinates
             by the same amount.
             The amount of rotation is such that coordinates along the former
             positive X axis will subsequently align with the vector pointing
             from the origin to the specified vector coordinates.
             If both vecx and vecy are 0.0,
             an identity transform is returned.
             This operation is equivalent to calling:
             <pre>
                 AffineTransform.getRotateInstance(Math.atan2(vecy, vecx),
                                                   anchorx, anchory);
             </pre>
            </remarks>
             <param name="vecx">the X coordinate of the rotation vector.</param>
             <param name="vecy">the Y coordinate of the rotation vector.</param>
             <param name="anchorx">the X coordinate of the rotation anchor point.</param>
             <param name="anchory">the Y coordinate of the rotation anchor point.</param>
             <returns>an AffineTransform object that rotates
             coordinates around the specified point according to the
             specified rotation vector</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.AffineTransform.GetQuadrantRotateInstance(System.Int32)">
            <summary>
            Returns a transform that rotates coordinates by the specified
            number of quadrants.
            </summary>
            <remarks>
            This operation is equivalent to calling:
            <pre>
                AffineTransform.getRotateInstance(numquadrants * Math.Pi / 2.0);
            </pre>
            Rotating by a positive number of quadrants rotates points on
            the positive X axis toward the positive Y axis.
            </remarks>
            <param name="numquadrants">the number of 90 degree arcs to rotate by</param>
            <returns>an AffineTransform object that rotates
            coordinates by the specified number of quadrants.</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.AffineTransform.GetQuadrantRotateInstance(System.Int32,System.Double,System.Double)">
            <summary>
            Returns a transform that rotates coordinates by the specified
            number of quadrants around the specified anchor point.
            </summary>
            <remarks>
            This operation is equivalent to calling:
            <pre>
                AffineTransform.getRotateInstance(numquadrants * Math.Pi / 2.0,
                                                  anchorx, anchory);
            </pre>
            Rotating by a positive number of quadrants rotates points on
            the positive X axis toward the positive Y axis.
            </remarks>
            <param name="numquadrants">the number of 90 degree arcs to rotate by.</param>
            <param name="anchorx">the X coordinate of the rotation anchor point.</param>
            <param name="anchory">the Y coordinate of the rotation anchor point.</param>
            <returns>an AffineTransform object that rotates
            coordinates by the specified number of quadrants around the
            specified anchor point.</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.AffineTransform.GetScaleInstance(System.Double,System.Double)">
            <summary>
            Returns a transform representing a scaling transformation.
            </summary>
            <remarks>
            The matrix representing the returned transform is:
            <pre>
            	[   sx   0    0   ]
            	[   0    sy   0   ]
            	[   0    0    1   ]
            </pre>
            </remarks>
            <param name="sx">the factor by which coordinates are scaled along the
            X axis direction</param>
            <param name="sy">the factor by which coordinates are scaled along the
            Y axis direction.</param>
            <returns>an AffineTransform object that scale
            coordinates by the specified multipliers.</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.AffineTransform.GetShearInstance(System.Double,System.Double)">
            <summary>
            Returns a transform representing a shearing transformation.
            </summary>
            <remarks>
            The matrix representing the returned transform is:
            <pre>
            	[   1   shx   0   ]
            	[  shy   1    0   ]
            	[   0    0    1   ]
            </pre>
            </remarks>
            <param name="shx">the multiplier by which coordinates are shifted in the
            direction of the positive X axis as a factor of their Y coordinate.</param>
            <param name="shy">the multiplier by which coordinates are shifted in the
            direction of the positive Y axis as a factor of their X coordinate.</param>
            <returns>an AffineTransform object that shears
            coordinates by the specified multipliers.</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.AffineTransform.GetMatrix(System.Double[])">
            <summary>
            Retrieves the 6 specifiable values in the 3x3 affine transformation
            matrix and places them into an array of double precisions values.
            </summary>
            <remarks>
            The values are stored in the array as
            {m00 m10 m01 m11 m02 m12 }.
            An array of 4 doubles can also be specified, in which case only the
            first four elements representing the non-transform
            parts of the array are retrieved and the values are stored into
            the array as { m00 m10 m01 m11 }
            </remarks>
            <param name="flatmatrix">the double array used to store the returned
            values.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.AffineTransform.Translate(System.Double,System.Double)">
            <summary>
            Concatenates this transform with a translation transformation.
            </summary>
            <remarks>
            This is equivalent to calling concatenate(T), where T is an
            AffineTransform represented by the following matrix:
            <pre>
            	[   1    0    tx  ]
            	[   0    1    ty  ]
            	[   0    0    1   ]
            </pre>
            </remarks>
            <param name="tx">the distance by which coordinates are translated in the
            X axis direction.</param>
            <param name="ty">the distance by which coordinates are translated in the
            Y axis direction.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.AffineTransform.Rotate(System.Double)">
             <summary>
             Concatenates this transform with a rotation transformation.
             </summary>
             <remarks>
             This is equivalent to calling concatenate(R), where R is an
             AffineTransform represented by the following matrix:
             <pre>
            		[   cos(theta)    -sin(theta)    0   ]
            		[   sin(theta)     cos(theta)    0   ]
            		[       0              0         1   ]
             </pre>
             Rotating by a positive angle theta rotates points on the positive
             X axis toward the positive Y axis.
             also the discussion of
             <a href="#quadrantapproximation">Handling 90-Degree Rotations</a>
             above.
            </remarks>
             <param name="theta">the angle of rotation measured in radians.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.AffineTransform.Rotate(System.Double,System.Double,System.Double)">
            <summary>
            Concatenates this transform with a transform that rotates
            coordinates around an anchor point.
            </summary>
            <remarks>
            This operation is equivalent to translating the coordinates so
            that the anchor point is at the origin (S1), then rotating them
            about the new origin (S2), and finally translating so that the
            intermediate origin is restored to the coordinates of the original
            anchor point (S3).
            
            This operation is equivalent to the following sequence of calls:
            <pre>
                translate(anchorx, anchory);      // S3: final translation
                rotate(theta);                    // S2: rotate around anchor
                translate(-anchorx, -anchory);    // S1: translate anchor to origin
            </pre>
            Rotating by a positive angle theta rotates points on the positive
            X axis toward the positive Y axis.
            Remember also the discussion of
            <a href="#quadrantapproximation">Handling 90-Degree Rotations</a>
            above.
            </remarks>
            <param name="theta">the angle of rotation measured in radians.</param>
            <param name="anchorx">the X coordinate of the rotation anchor point.</param>
            <param name="anchory">the Y coordinate of the rotation anchor point.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.AffineTransform.Rotate(System.Double,System.Double)">
            <summary>
            Concatenates this transform with a transform that rotates
            coordinates according to a rotation vector.
            </summary>
            <remarks>
            All coordinates rotate about the origin by the same amount.
            The amount of rotation is such that coordinates along the former
            positive X axis will subsequently align with the vector pointing
            from the origin to the specified vector coordinates.
            If both vecx and vecy are 0.0,
            no additional rotation is added to this transform.
            This operation is equivalent to calling:
            <pre>
                     rotate(Math.atan2(vecy, vecx));
            </pre>
            </remarks>
            <param name="vecx">the X coordinate of the rotation vector.</param>
            <param name="vecy">the Y coordinate of the rotation vector.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.AffineTransform.Rotate(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Concatenates this transform with a transform that rotates
            coordinates around an anchor point according to a rotation
            vector.
            </summary>
            <remarks>
            All coordinates rotate about the specified anchor coordinates
            by the same amount.
            The amount of rotation is such that coordinates along the former
            positive X axis will subsequently align with the vector pointing
            from the origin to the specified vector coordinates.
            If both vecx and vecy are 0.0,
            the transform is not modified in any way.
            This method is equivalent to calling:
            <pre>
                rotate(Math.atan2(vecy, vecx), anchorx, anchory);
            </pre>
            </remarks>
            <param name="vecx">the X coordinate of the rotation vector.</param>
            <param name="vecy">the Y coordinate of the rotation vector.</param>
            <param name="anchorx">The  X coordinate of the rotation anchor point.</param>
            <param name="anchory">The Y coordinate of the rotation anchor point.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.AffineTransform.QuadrantRotate(System.Int32)">
            <summary>
            Concatenates this transform with a transform that rotates
            coordinates by the specified number of quadrants.
            </summary>
            <remarks>
            This is equivalent to calling:
            <pre>
                rotate(numquadrants * Math.Pi / 2.0);
            </pre>
            Rotating by a positive number of quadrants rotates points on
            the positive X a
            </remarks>
            <param name="numquadrants">the number of 90 degree arcs to rotate by.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.AffineTransform.QuadrantRotate(System.Int32,System.Double,System.Double)">
             <summary>
             Concatenates this transform with a transform that rotates
             coordinates by the specified number of quadrants around
             the specified anchor point.
             </summary>
             <remarks>
             This method is equivalent to calling:
             <pre>
                 rotate(numquadrants * Math.Pi / 2.0, anchorx, anchory);
             </pre>
             Rotating by a positive number of quadrants rotates points on
             the positive X axis toward the positive Y axis.
            </remarks>
             <param name="numquadrants">the number of 90 degree arcs to rotate by.</param>
             <param name="anchorx">the X coordinate of the rotation anchor point.</param>
             <param name="anchory">the Y coordinate of the rotation anchor point.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.AffineTransform.Scale(System.Double,System.Double)">
            <summary>
             Concatenates this transform with a scaling transformation.
            </summary>
            <remarks>
            This is equivalent to calling concatenate(S), where S is an
            AffineTransform represented by the following matrix:
            <pre>
            	[   sx   0    0   ]
            	[   0    sy   0   ]
            	[   0    0    1   ]
            </pre>
            </remarks>
            <param name="sx">the factor by which coordinates are scaled along the
            X axis direction</param>
            <param name="sy">the factor by which coordinates are scaled along the
            Y axis direction.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.AffineTransform.Shear(System.Double,System.Double)">
            <summary>
            Concatenates this transform with a shearing transformation.
            </summary>
            <remarks>
            This is equivalent to calling concatenate(SH), where SH is an
            AffineTransform represented by the following matrix:
            <pre>
            	[   1   shx   0   ]
            	[  shy   1    0   ]
            	[   0    0    1   ]
            </pre>
            </remarks>
            <param name="shx">the multiplier by which coordinates are shifted in the
            direction of the positive X axis as a factor of their Y coordinate.</param>
            <param name="shy">the multiplier by which coordinates are shifted in the
            direction of the positive Y axis as a factor of their X coordinate.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.AffineTransform.SetToIdentity">
            <summary>
            Resets this transform to the Identity transform.
            </summary>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.AffineTransform.SetToTranslation(System.Double,System.Double)">
            <summary>
            Sets this transform to a translation transformation.
            </summary>
            <remarks>
            The matrix representing this transform becomes:
            <pre>
            	[   1    0    tx  ]
            	[   0    1    ty  ]
            	[   0    0    1   ]
            </pre>
            </remarks>
            <param name="tx">the distance by which coordinates are translated in the
            X axis direction.</param>
            <param name="ty">the distance by which coordinates are translated in the
            Y axis direction.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.AffineTransform.SetToRotation(System.Double)">
            <summary>
            Sets this transform to a rotation transformation.
            </summary>
            <remarks>
            The matrix representing this transform becomes:
            <pre>
            	[   cos(theta)    -sin(theta)    0   ]
            	[   sin(theta)     cos(theta)    0   ]
            	[       0              0         1   ]
            </pre>
            Rotating by a positive angle theta rotates points on the positive
            X axis toward the positive Y axis.
            also the discussion of
            <a href="#quadrantapproximation">Handling 90-Degree Rotations</a>
            above.
            </remarks>
            <param name="theta">the angle of rotation measured in radians</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.AffineTransform.SetToRotation(System.Double,System.Double,System.Double)">
            <summary>
            Sets this transform to a translated rotation transformation.
            </summary>
            <remarks>
            This operation is equivalent to translating the coordinates so
            that the anchor point is at the origin (S1), then rotating them
            about the new origin (S2), and finally translating so that the
            intermediate origin is restored to the coordinates of the original
            anchor point (S3).
            
            This operation is equivalent to the following sequence of calls:
            <pre>
                setToTranslation(anchorx, anchory); // S3: final translation
                rotate(theta);                      // S2: rotate around anchor
                translate(-anchorx, -anchory);      // S1: translate anchor to origin
            </pre>
            The matrix representing this transform becomes:
            <pre>
            	[   cos(theta)    -sin(theta)    x-x///cos+y///sin  ]
            	[   sin(theta)     cos(theta)    y-x///sin-y///cos  ]
            	[       0              0               1        ]
            </pre>
            Rotating by a positive angle theta rotates points on the positive
            X axis toward the positive Y axis.
            also the discussion of
            <a href="#quadrantapproximation">Handling 90-Degree Rotations</a>
            above.
            </remarks>
            <param name="theta">the angle of rotation measured in radians.</param>
            <param name="anchorx">the X coordinate of the rotation anchor point.</param>
            <param name="anchory">the Y coordinate of the rotation anchor point.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.AffineTransform.SetToRotation(System.Double,System.Double)">
            <summary>
            Sets this transform to a rotation transformation that rotates
            coordinates according to a rotation vector.
            </summary>
            <remarks>
            All coordinates rotate about the origin by the same amount.
            The amount of rotation is such that coordinates along the former
            positive X axis will subsequently align with the vector pointing
            from the origin to the specified vector coordinates.
            If both vecx and vecy are 0.0,
            the transform is set to an identity transform.
            This operation is equivalent to calling:
            <pre>
                setToRotation(Math.atan2(vecy, vecx));
            </pre>
            </remarks>
            <param name="vecx">the X coordinate of the rotation vector.</param>
            <param name="vecy">the Y coordinate of the rotation vector.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.AffineTransform.SetToRotation(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Sets this transform to a rotation transformation that rotates
            coordinates around an anchor point according to a rotation
            vector.
            </summary>
            <remarks>
            All coordinates rotate about the specified anchor coordinates
            by the same amount.
            The amount of rotation is such that coordinates along the former
            positive X axis will subsequently align with the vector pointing
            from the origin to the specified vector coordinates.
            If both vecx and vecy are 0.0,
            the transform is set to an identity transform.
            This operation is equivalent to calling:
            <pre>
                setToTranslation(Math.atan2(vecy, vecx), anchorx, anchory);
            </pre>
            </remarks>
            <param name="vecx">the X coordinate of the rotation vector</param>
            <param name="vecy">the Y coordinate of the rotation vector.</param>
            <param name="anchorx">the X coordinate of the rotation anchor point.</param>
            <param name="anchory">Tthe Y coordinate of the rotation anchor point.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.AffineTransform.SetToQuadrantRotation(System.Int32)">
            <summary>
            Sets this transform to a rotation transformation that rotates
            coordinates by the specified number of quadrants.
            </summary>
            <remarks>
            This operation is equivalent to calling:
            <pre>
                setToRotation(numquadrants * Math.Pi / 2.0);
            </pre>
            Rotating by a positive number of quadrants rotates points on
            the positive X axis toward the positive Y axis.
            </remarks>
            <param name="numquadrants">the number of 90 degree arcs to rotate by.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.AffineTransform.SetToQuadrantRotation(System.Int32,System.Double,System.Double)">
            <summary>
            Sets this transform to a translated rotation transformation
            that rotates coordinates by the specified number of quadrants
            around the specified anchor point.
            </summary>
            <remarks>
            This operation is equivalent to calling:
            <pre>
                setToRotation(numquadrants * Math.Pi / 2.0, anchorx, anchory);
            </pre>
            Rotating by a positive number of quadrants rotates points on
            the positive X axis toward the positive Y axis.
            </remarks>
            <param name="numquadrants">the number of 90 degree arcs to rotate by.</param>
            <param name="anchorx">the X coordinate of the rotation anchor point.</param>
            <param name="anchory">the Y coordinate of the rotation anchor point.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.AffineTransform.SetToScale(System.Double,System.Double)">
            <summary>
            Sets this transform to a scaling transformation.
            </summary>
            <remarks>
            The matrix representing this transform becomes:
            <pre>
            	[   sx   0    0   ]
            	[   0    sy   0   ]
            	[   0    0    1   ]
            </pre>
            </remarks>
            <param name="sx">the factor by which coordinates are scaled along the
            X axis direction.</param>
            <param name="sy">the factor by which coordinates are scaled along the
            Y axis direction.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.AffineTransform.SetToShear(System.Double,System.Double)">
            <summary>
            Sets this transform to a shearing transformation.
            </summary>
            <remarks>
            The matrix representing this transform becomes:
            <pre>
            	[   1   shx   0   ]
            	[  shy   1    0   ]
            	[   0    0    1   ]
            </pre>
            </remarks>
            <param name="shx">the multiplier by which coordinates are shifted in the
            direction of the positive X axis as a factor of their Y coordinate.</param>
            <param name="shy">the multiplier by which coordinates are shifted in the
            direction of the positive Y axis as a factor of their X coordinate.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.AffineTransform.SetTransform(Mapdigit.Drawing.Geometry.AffineTransform)">
            <summary>
            Sets this transform to a copy of the transform in the specified
            AffineTransform object.
            </summary>
            <param name="tx">the AffineTransform object from which to
            copy the transform.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.AffineTransform.SetTransform(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Sets this transform to the matrix specified by the 6
            double precision values.
            </summary>
            <param name="m00">the X coordinate scaling element of the 3x3 matrix.</param>
            <param name="m10">the Y coordinate shearing element of the 3x3 matrix.</param>
            <param name="m01">the X coordinate shearing element of the 3x3 matrix.</param>
            <param name="m11">the Y coordinate scaling element of the 3x3 matrix.</param>
            <param name="m02">the X coordinate translation element of the 3x3 matrix.</param>
            <param name="m12">the Y coordinate translation element of the 3x3 matrix.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.AffineTransform.Concatenate(Mapdigit.Drawing.Geometry.AffineTransform)">
            <summary>
            Concatenates an AffineTransform Tx to
            this AffineTransform Cx in the most commonly useful
            way to provide a new user space
            that is mapped to the former user space by Tx.
            </summary>
            <remarks>
            Cx is updated to perform the combined transformation.
            Transforming a point p by the updated transform Cx' is
            equivalent to first transforming p by Tx and then
            transforming the result by the original transform Cx like this:
            Cx'(p) = Cx(Tx(p))
            In matrix notation, if this transform Cx is
            represented by the matrix [this] and Tx is represented
            by the matrix [Tx] then this method does the following:
            <pre>
            	[this] = [this] x [Tx]
            </pre>
            </remarks>
            <param name="tx">the AffineTransform object to be
            concatenated with this AffineTransform object..</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.AffineTransform.PreConcatenate(Mapdigit.Drawing.Geometry.AffineTransform)">
            <summary>
            Concatenates an AffineTransform Tx to
            this AffineTransform Cx
            in a less commonly used way such that Tx modifies the
            coordinate transformation relative to the absolute pixel
            space rather than relative to the existing user space.
            </summary>
            <remarks>
            Cx is updated to perform the combined transformation.
            Transforming a point p by the updated transform Cx' is
            equivalent to first transforming p by the original transform
            Cx and then transforming the result by
            Tx like this:
            Cx'(p) = Tx(Cx(p))
            In matrix notation, if this transform Cx
            is represented by the matrix [this] and Tx is
            represented by the matrix [Tx] then this method does the
            following:
            <pre>
            	[this] = [Tx] x [this]
            </pre>
            </remarks>
            <param name="tx">the AffineTransform object to be
            concatenated with this AffineTransform object.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.AffineTransform.CreateInverse">
            <summary>
            Returns an AffineTransform object representing the
            inverse transformation.
            </summary>
            <remarks>
            The inverse transform Tx' of this transform Tx
            maps coordinates transformed by Tx back
            to their original coordinates.
            In other words, Tx'(Tx(p)) = p = Tx(Tx'(p)).
            
            If this transform maps all coordinates onto a point or a line
            then it will not have an inverse, since coordinates that do
            not lie on the destination point or line will not have an inverse
            mapping.
            The getDeterminant method can be used to determine if this
            transform has no inverse, in which case an exception will be
            thrown if the createInverse method is called.
            </remarks>
            <returns>a new AffineTransform object representing the
            inverse transformation.</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.AffineTransform.Invert">
            <summary>
            Sets this transform to the inverse of itself.
            The inverse transform Tx' of this transform Tx
            maps coordinates transformed by Tx back
            to their original coordinates.
            </summary>
            <remarks>
            In other words, Tx'(Tx(p)) = p = Tx(Tx'(p)).
            
            If this transform maps all coordinates onto a point or a line
            then it will not have an inverse, since coordinates that do
            not lie on the destination point or line will not have an inverse
            mapping.
            The getDeterminant method can be used to determine if this
            transform has no inverse, in which case an exception will be
            thrown if the invert method is called.
            </remarks>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.AffineTransform.Transform(Mapdigit.Drawing.Geometry.Point,Mapdigit.Drawing.Geometry.Point)">
            <summary>
            Transforms the specified ptSrc and stores the result in ptDst.
            </summary>
            <remarks>
            If ptDst is null, a new Point
            object is allocated and then the result of the transformation is
            stored in this object.
            In either case, ptDst, which contains the
            transformed point, is returned for convenience.
            If ptSrc and ptDst are the same
            object, the input point is correctly overwritten with
            the transformed point.
            </remarks>
            <param name="ptSrc">the specified Point to be transformed.</param>
            <param name="ptDst">the specified Point that stores the
            result of transforming ptSrc.</param>
            <returns>the ptDst after transforming</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.AffineTransform.Transform(Mapdigit.Drawing.Geometry.Point[],System.Int32,Mapdigit.Drawing.Geometry.Point[],System.Int32,System.Int32)">
            <summary>
            Transforms an array of point objects by this transform.
            </summary>
            <remarks>
            If any element of the ptDst array is null, a new Point object is
            allocated and stored into that element before storing the results of the
            transformation.
            that this method does not take any precautions to
            avoid problems caused by storing results into Point
            objects that will be used as the source for calculations
            further down the source array.
            This method does guarantee that if a specified Point
            object is both the source and destination for the same single point
            transform operation then the results will not be stored until
            the calculations are complete to avoid storing the results on
            top of the operands.
            If, however, the destination Point object for one
            operation is the same object as the source Point
            object for another operation further down the source array then
            the original coordinates in that point are overwritten before
            they can be converted.
            </remarks>
            <param name="ptSrc">the array containing the source point objects.</param>
            <param name="srcOff">the offset to the first point object to be
            transformed in the source array.</param>
            <param name="ptDst">the array into which the transform point objects are
            returned.</param>
            <param name="dstOff">the offset to the location of the first
            transformed point object that is stored in the destination array</param>
            <param name="numPts">the number of point objects to be transformed.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.AffineTransform.Transform(System.Int32[],System.Int32,System.Int32[],System.Int32,System.Int32)">
            <summary>
            Transforms an array of floating point coordinates by this transform.
            </summary>
            <remarks>
            The two coordinate array sections can be exactly the same or
            can be overlapping sections of the same array without affecting the
            validity of the results.
            This method ensures that no source coordinates are overwritten by a
            previous operation before they can be transformed.
            The coordinates are stored in the arrays starting at the specified
            offset in the order [x0, y0, x1, y1, ..., xn, yn].
            </remarks>
            <param name="srcPts">the array containing the source point coordinates.
            Each point is stored as a pair of x, y coordinates..</param>
            <param name="srcOff">the offset to the first point to be transformed
            in the source array.</param>
            <param name="dstPts">the array into which the transformed point coordinates
            are returned.  Each point is stored as a pair of x, y
            coordinates.</param>
            <param name="dstOff">the offset to the location of the first
            transformed point that is stored in the destination array.</param>
            <param name="numPts">the number of points to be transformed.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.AffineTransform.InverseTransform(Mapdigit.Drawing.Geometry.Point,Mapdigit.Drawing.Geometry.Point)">
            <summary>
            Inverse transforms the specified ptSrc and stores the
            result in ptDst.
            </summary>
            <remarks>
            If ptDst is null, a new Point object is allocated and then the result of the
            transform is stored in this object.
            In either case, ptDst, which contains the transformed point, is returned 
            for convenience.
            If ptSrc and ptDst are the same object, the input point is correctly 
            overwritten with the transformed point.
            </remarks>
            <param name="ptSrc">the point to be inverse transformed</param>
            <param name="ptDst">the resulting transformed point.</param>
            <returns>which contains the result of the
            inverse transform.</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.AffineTransform.InverseTransform(System.Int32[],System.Int32,System.Int32[],System.Int32,System.Int32)">
            <summary>
            Inverse transforms an array of double precision coordinates by
            this transform.
            </summary>
            <remarks>
            The two coordinate array sections can be exactly the same or
            can be overlapping sections of the same array without affecting the
            validity of the results.
            This method ensures that no source coordinates are
            overwritten by a previous operation before they can be transformed.
            The coordinates are stored in the arrays starting at the specified
            offset in the order [x0, y0, x1, y1, ..., xn, yn].
            </remarks>
            <param name="srcPts">the array containing the source point coordinates.
            Each point is stored as a pair of x, y coordinates.</param>
            <param name="srcOff">the offset to the first point to be transformed
            in the source array.</param>
            <param name="dstPts">the array into which the transformed point
            coordinates are returned.  Each point is stored as a pair of
            x, y coordinates..</param>
            <param name="dstOff">the offset to the location of the first
            transformed point that is stored in the destination array.</param>
            <param name="numPts">the number of point objects to be transformed.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.AffineTransform.DeltaTransform(Mapdigit.Drawing.Geometry.Point,Mapdigit.Drawing.Geometry.Point)">
            <summary>
            Transforms the relative distance vector specified by
            ptSrc and stores the result in ptDst.
            </summary>
            <remarks>
            A relative distance vector is transformed without applying the
            translation components of the affine transformation matrix
            using the following equations:
            <pre>
            [  x' ]   [  m00  m01 (m02) ] [  x  ]   [ m00x + m01y ]
            [  y' ] = [  m10  m11 (m12) ] [  y  ] = [ m10x + m11y ]
            [ (1) ]   [  (0)  (0) ( 1 ) ] [ (1) ]   [     (1)     ]
            </pre>
            If ptDst is null, a new
            Point object is allocated and then the result of the
            transform is stored in this object.
            In either case, ptDst, which contains the
            transformed point, is returned for convenience.
            If ptSrc and ptDst are the same object,
            the input point is correctly overwritten with the transformed
            point.
            </remarks>
            <param name="ptSrc">the distance vector to be delta transformed.</param>
            <param name="ptDst">the resulting transformed distance vector.</param>
            <returns> ptDst, which contains the result of the
            transformation</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.AffineTransform.DeltaTransform(System.Int32[],System.Int32,System.Int32[],System.Int32,System.Int32)">
            <summary>
            Transforms an array of relative distance vectors by this transform.
            </summary>
            <remarks>
            A relative distance vector is transformed without applying the
            translation components of the affine transformation matrix
            using the following equations:
            <pre>
            [  x' ]   [  m00  m01 (m02) ] [  x  ]   [ m00x + m01y ]
            [  y' ] = [  m10  m11 (m12) ] [  y  ] = [ m10x + m11y ]
            [ (1) ]   [  (0)  (0) ( 1 ) ] [ (1) ]   [     (1)     ]
            </pre>
            The two coordinate array sections can be exactly the same or
            can be overlapping sections of the same array without affecting the
            validity of the results.
            This method ensures that no source coordinates are
            overwritten by a previous operation before they can be transformed.
            The coordinates are stored in the arrays starting at the indicated
            offset in the order [x0, y0, x1, y1, ..., xn, yn].
            </remarks>
            <param name="srcPts">the array containing the source distance vectors.
            Each vector is stored as a pair of relative x,y coordinates.</param>
            <param name="srcOff">the offset to the first vector to be transformed
            in the source array.</param>
            <param name="dstPts">the array into which the transformed distance vectors
            are returned.  Each vector is stored as a pair of relative.</param>
            <param name="dstOff">the offset to the location of the first
            transformed vector that is stored in the destination array</param>
            <param name="numPts">the number of vector coordinate pairs to be
            transformed.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.AffineTransform.CreateTransformedShape(Mapdigit.Drawing.Geometry.IShape)">
            <summary>
            Returns a new  IShape object defined by the geometry of the
            specified IShape after it has been transformed by
            this transform.
            </summary>
            <param name="pSrc">the specified IShape object to be
            transformed by this transform..</param>
            <returns>a new IShape object that defines the geometry
            of the transformed IShape, or null if pSrc is null.</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.AffineTransform.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.AffineTransform.IsIdentity">
            <summary>
            Returns true if this AffineTransform is an identity transform.
            </summary>
            <returns>
            	true if this instance is identity; otherwise, false.
            </returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.AffineTransform.GetHashCode">
            <summary>
            Returns a hash c for this instance.
            </summary>
            <returns>
            A hash c for this instance, suitable for use in hashing algorithms 
            and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.AffineTransform.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            	true if the specified <see cref="T:System.Object"/> is equal 
            to this instance; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
            </exception>
        </member>
        <member name="F:Mapdigit.Drawing.Geometry.AffineTransform._m00">
             The X coordinate scaling element of the 3x3
             affine transformation matrix.
            
             @serial
        </member>
        <member name="F:Mapdigit.Drawing.Geometry.AffineTransform._m10">
            The Y coordinate shearing element of the 3x3
            affine transformation matrix.
        </member>
        <member name="F:Mapdigit.Drawing.Geometry.AffineTransform._m01">
            The X coordinate shearing element of the 3x3
            affine transformation matrix.
        </member>
        <member name="F:Mapdigit.Drawing.Geometry.AffineTransform._m11">
            The Y coordinate scaling element of the 3x3
            affine transformation matrix.
        </member>
        <member name="F:Mapdigit.Drawing.Geometry.AffineTransform._m02">
            The X coordinate of the translation element of the
            3x3 affine transformation matrix.
        </member>
        <member name="F:Mapdigit.Drawing.Geometry.AffineTransform._m12">
            The Y coordinate of the translation element of the
            3x3 affine transformation matrix.
        </member>
        <member name="F:Mapdigit.Drawing.Geometry.AffineTransform._state">
            This field keeps track of which components of the matrix need to
            be applied when performing a transformation.
        </member>
        <member name="F:Mapdigit.Drawing.Geometry.AffineTransform._type">
            This field caches the current transformation type of the matrix.
        </member>
        <member name="F:Mapdigit.Drawing.Geometry.AffineTransform.TransformListParser">
            tranform parser
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.AffineTransform.Matround(System.Double)">
            <summary>
            Round values to sane precision for printing
            remember that Math.sin(Math.Pi) has an error of about 10^-16
            </summary>
            <param name="matval">The matval.</param>
            <returns></returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.AffineTransform.Round(System.Double)">
            <summary>
            Rounds the specified a.
            </summary>
            <param name="a">A.</param>
            <returns></returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.AffineTransform.Rint(System.Double)">
            <summary>
            Rints the specified a.
            </summary>
            <param name="a">A.</param>
            <returns></returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.AffineTransform.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Mapdigit.Drawing.Geometry.AffineTransform"/> class.
            </summary>
            <param name="m00">The M00.</param>
            <param name="m10">The M10.</param>
            <param name="m01">The M01.</param>
            <param name="m11">The M11.</param>
            <param name="m02">The M02.</param>
            <param name="m12">The M12.</param>
            <param name="state">The state.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.AffineTransform.CalculateType">
            <summary>
            This is the utility function to calculate the flag bits when
            they have not been cached.
            </summary>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.AffineTransform.UpdateState">
             <summary>
             Manually recalculates the state of the transform when the matrix
             changes too much to predict the effects on the state.
             The following table specifies what the various settings of the
             state field say about the values of the corresponding matrix
             element fields.
             Remember that the rules governing the SCALE fields are slightly
             different depending on whether the SHEAR flag is also set.
             <pre>
                                 SCALE            SHEAR          TRANSLATE
                                m00/m11          m01/m10          m02/m12
            
             IDENTITY             1.0              0.0              0.0
             TRANSLATE (TR)       1.0              0.0          not both 0.0
             SCALE (SC)       not both 1.0         0.0              0.0
             TR | SC          not both 1.0         0.0          not both 0.0
             SHEAR (SH)           0.0          not both 0.0         0.0
             TR | SH              0.0          not both 0.0     not both 0.0
             SC | SH          not both 0.0     not both 0.0         0.0
             TR | SC | SH     not both 0.0     not both 0.0     not both 0.0
             </pre>
             </summary>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.AffineTransform.StateError">
            <summary>
            Convenience method used internally to throw exceptions when
            a case was forgotten in a switch statement.
            </summary>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.AffineTransform.Rotate90">
            <summary>
            Rotate 90s this instance.
            </summary>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.AffineTransform.Rotate180">
            <summary>
            Rotate 180s this instance.
            </summary>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.AffineTransform.Rotate270">
            <summary>
            Rotate 270s this instance.
            </summary>
        </member>
        <member name="P:Mapdigit.Drawing.Geometry.AffineTransform.TransformType">
            <summary>
            Retrieves the flag bits describing the conversion properties of
            this transform.
            </summary>
            <remarks>
            The return value is either one of the constants TypeIdentity
            or TypeGeneralTransform, or a combination of the appriopriate flag bits.
            A valid combination of flag bits is an exclusive OR operation
            that can combine the TypeTranslation flag bit in addition to either of the
            TypeUniformScale or TypeGeneralScale flag bits as well as either of the
            TypeQuadrantRotation or TypeGeneralRotation flag bits.
            </remarks>
        </member>
        <member name="P:Mapdigit.Drawing.Geometry.AffineTransform.Determinant">
            <summary>
            Returns the determinant of the matrix representation of the transform.
            </summary>
            <remarks>
            The determinant is useful both to determine if the transform can
            be inverted and to get a single value representing the
            combined X and Y scaling of the transform.
            
            If the determinant is non-zero, then this transform is
            invertible and the various methods that depend on the inverse
            transform do not need to throw a
             NoninvertibleTransformException.
            If the determinant is zero then this transform can not be
            inverted since the transform maps all input coordinates onto
            a line or a point.
            If the determinant is near enough to zero then inverse transform
            operations might not carry enough precision to produce meaningful
            results.
            
            If this transform represents a uniform scale, as indicated by
            the getType method then the determinant also
            represents the square of the uniform scale factor by which all of
            the points are expanded from or contracted towards the origin.
            If this transform represents a non-uniform scale or more general
            transform then the determinant is not likely to represent a
            value useful for any purpose other than determining if inverse
            transforms are possible.
            
            Mathematically, the determinant is calculated using the formula:
            <pre>
            	|  m00  m01  m02  |
            	|  m10  m11  m12  |  =  m00 /// m11 - m01 /// m10
            	|   0    0    1   |
            </pre>
            </remarks>
        </member>
        <member name="P:Mapdigit.Drawing.Geometry.AffineTransform.ScaleX">
             <summary>
            Returns the X coordinate scaling element (m00) of the 3x3
             affine transformation matrix.
             </summary>
        </member>
        <member name="P:Mapdigit.Drawing.Geometry.AffineTransform.ScaleY">
            <summary>
            Returns the Y coordinate scaling element (m11) of the 3x3
            affine transformation matrix.
            </summary>
        </member>
        <member name="P:Mapdigit.Drawing.Geometry.AffineTransform.ShearX">
            <summary>
             Returns the X coordinate shearing element (m01) of the 3x3
            affine transformation matrix.
            </summary>
        </member>
        <member name="P:Mapdigit.Drawing.Geometry.AffineTransform.ShearY">
            <summary>
            Returns the Y coordinate shearing element (m10) of the 3x3
            affine transformation matrix.
            </summary>
        </member>
        <member name="P:Mapdigit.Drawing.Geometry.AffineTransform.TranslateX">
            <summary>
            Returns the X coordinate of the translation element (m02) of the
            3x3 affine transformation matrix.
            </summary>
        </member>
        <member name="P:Mapdigit.Drawing.Geometry.AffineTransform.TranslateY">
            <summary>
            Returns the Y coordinate of the translation element (m12) of the
            3x3 affine transformation matrix.
            </summary>
        </member>
        <member name="T:Mapdigit.Drawing.Geometry.Arc">
            <summary>
            This class defines an arc .
            </summary>
        </member>
        <member name="T:Mapdigit.Drawing.Geometry.RectangularShape">
            <summary>
            	RectangularShape is the base class for a number of
            IShape objects whose geometry is defined by a rectangular frame.
            </summary>
            <remarks>
            This class does not directly specify any specific geometry by
            itself, but merely provides manipulation methods inherited by
            a whole category of IShape objects.
            The manipulation methods provided by this class can be used to
            query and modify the rectangular frame, which provides a reference
            for the subclasses to define their geometry.
            </remarks>
        </member>
        <member name="T:Mapdigit.Drawing.Geometry.IShape">
            <summary>
            The IShape interface provides definitions for objects
            that represent some form of geometric shape. 
            </summary>
            <remarks>
             The IShape is described by a IPathIterator object, which can 
            express the outline of the IShape as well as a rule for determining
            how the outline divides the 2D plane into interior and exterior
            points.  Each IShape object provides callbacks to get the
            bounding box of the geometry, determine whether points or
            rectangles lie partly or entirely within the interior
            of the IShape, and retrieve a IPathIterator
            object that describes the trajectory path of the IShape
            outline.
            
            <b>Definition of insideness:</b>
            A point is considered to lie inside a
            IShape if and only if:
            <ul>
            <li> it lies completely
            </li>
            inside theIShape boundary <i>or</i>
            <li>
            it lies exactly on the IShape boundary <i>and</i> the
            space immediately adjacent to the
            point in the increasing X direction is
            entirely inside the boundary <i>or</i>
            </li>
            <li>
            it lies exactly on a horizontal boundary segment <b>and</b> the
            space immediately adjacent to the point in the
            increasing Y direction is inside the boundary.
            </li>
            </ul>
            The contains and intersects methods
            consider the interior of a IShape to be the area it
            encloses as if it were filled.  This means that these methods
            consider
            unclosed shapes to be implicitly closed for the purpose of
            determining if a shape contains or intersects a rectangle or if a
            shape contains a point.
            </remarks>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.IShape.Contains(System.Int32,System.Int32)">
            <summary>
            Tests if the specified coordinates are inside the boundary of the
            IShape.
            </summary>
            <param name="x">the specified X coordinate to be tested</param>
            <param name="y">the specified Y coordinate to be tested.</param>
            <returns>
            	true if the specified coordinates are inside
                the IShape boundary; false
              otherwise.
            </returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.IShape.Contains(Mapdigit.Drawing.Geometry.Point)">
            <summary>
             Tests if a specified Point is inside the boundary
            of the IShape.
            </summary>
            <param name="p">the specified Point to be tested</param>
            <returns>
            	true if the specified Point is
                     inside the boundary of the IShape;
               false otherwise.
            </returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.IShape.Contains(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Tests if the interior of the IShape entirely contains
            the specified rectangular area.  
            </summary>
            <remarks>
            All coordinates that lie inside
            the rectangular area must lie within the IShape for the
            entire rectanglar area to be considered contained within the
            IShape.
            The IShape.contains() method allows a IShape
            implementation to conservatively return false when:
            <ul>
            <li>
            the intersect method returns true and
            </li>
            the calculations to determine whether or not the
            IShape entirely contains the rectangular area are
            prohibitively expensive.
            </ul>
            This means that for some Shapes this method might
            return false even though the IShape contains
            the rectangular area.
            The Area class performs
            more accurate geometric computations than most
            IShape objects and therefore can be used if a more precise
            answer is required.
            </remarks>
            <param name="x">X coordinate of the upper-left corner
                   of the specified rectangular area</param>
            <param name="y">the Y coordinate of the upper-left corner
                     of the specified rectangular area</param>
            <param name="w">Tthe width of the specified rectangular area.</param>
            <param name="h">the height of the specified rectangular area.</param>
            <returns>
            	 true if the interior of the IShape
             		entirely contains the specified rectangular area;
             		false otherwise or, if the IShape
            		contains the rectangular area and the
            		intersects method returns true
             		and the containment calculations would be too expensive to
             		perform.
            </returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.IShape.Contains(Mapdigit.Drawing.Geometry.Rectangle)">
            <summary>
            Tests if the interior of the IShape entirely contains the
            specified Rectangle.
            </summary>
            <remarks>
            The IShape.contains() method allows a IShape
            implementation to conservatively return false when:
            <ul>
            <li>
            the intersect method returns true and
            </li>
            the calculations to determine whether or not the
            IShape entirely contains the Rectangle
            are prohibitively expensive.
            </ul>
            This means that for some Shapes this method might
            return false even though the IShape contains
            the Rectangle.
            The Area class performs
            more accurate geometric computations than most
            IShape objects and therefore can be used if a more precise
            answer is required.
            </remarks>
            <param name="r"> The specified Rectangle</param>
            <returns>
            	 true if the interior of the IShape
                     entirely contains the Rectangle;
                     false otherwise or, if the IShape
                     contains the Rectangle and the
                     intersects method returns true
                     and the containment calculations would be too expensive to
                     perform.
            </returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.IShape.Intersects(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Tests if the interior of the IShape intersects the
            interior of a specified rectangular area.
            </summary>
            <remarks>
            The rectangular area is considered to intersect the IShape
            if any point is contained in both the interior of the
            IShape and the specified rectangular area.
            The IShape.intersects() method allows a IShape
            implementation to conservatively return true when:
            <ul>
            <li>
            there is a high probability that the rectangular area and the
            IShape intersect, but
            </li>
            the calculations to accurately determine this intersection
            are prohibitively expensive.
            </ul>
            This means that for some Shapes this method might
            return true even though the rectangular area does not
            intersect the IShape.
            The Area class performs
            more accurate computations of geometric intersection than most
            IShape objects and therefore can be used if a more precise
            answer is required.
            </remarks>
            <param name="x">the X coordinate of the upper-left corner
                      of the specified rectangular area</param>
            <param name="y">the Y coordinate of the upper-left corner
                      of the specified rectangular area</param>
            <param name="w">Tthe width of the specified rectangular area</param>
            <param name="h">the height of the specified rectangular area</param>
            <returns>
            true if the interior of the IShape and
            		the interior of the rectangular area intersect, or are
            		both highly likely to intersect and intersection calculations
            		would be too expensive to perform; false
            </returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.IShape.Intersects(Mapdigit.Drawing.Geometry.Rectangle)">
            <summary>
            Tests if the interior of the IShape intersects the
            interior of a specified Rectangle.
            </summary>
            <remarks>
            The IShape.intersects() method allows a IShape
            implementation to conservatively return true when:
            <ul>
            <li>
            there is a high probability that the Rectangle and the
            IShape intersect, but
            </li>
            the calculations to accurately determine this intersection
            are prohibitively expensive.
            </ul>
            This means that for some Shapes this method might
            return true even though the Rectangle does not
            intersect the IShape.
            The Area class performs
            more accurate computations of geometric intersection than most
            IShape objects and therefore can be used if a more precise
            answer is required.
            </remarks>
            <param name="r">r the specified Rectangle.</param>
            <returns>
            true if the interior of the IShape and
            		the interior of the specified Rectangle
            	intersect, or are both highly likely to intersect and intersection
            	calculations would be too expensive to perform; false
            		otherwise.
            </returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.IShape.GetPathIterator(Mapdigit.Drawing.Geometry.AffineTransform)">
            <summary>
            Returns an iterator object that iterates along the
            IShape boundary and provides access to the geometry of the
            IShape outline.  
            </summary>
            <remarks>
            If an optional AffineTransform
            is specified, the coordinates returned in the iteration are
            transformed accordingly.
            Each call to this method returns a fresh IPathIterator
            object that traverses the geometry of the IShape object
            independently from any other IPathIterator objects in use
            at the same time.
            It is recommended, but not guaranteed, that objects
            implementing the IShape interface isolate iterations
            that are in process from any changes that might occur to the original
            object's geometry during such iterations.
            </remarks>
            <param name="at">an optional AffineTransform to be applied to the
             		coordinates as they are returned in the iteration, or
            		null if untransformed coordinates are desired</param>
            <returns>a new IPathIterator object, which independently
            		traverses the geometry of the IShape.</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.IShape.GetPathIterator(Mapdigit.Drawing.Geometry.AffineTransform,System.Int32)">
            <summary>
            Returns an iterator object that iterates along the IShape
            boundary and provides access to a flattened view of the
            IShape outline geometry.
            </summary>
            <remarks>
            Only SegMoveto, SegLineto, and SegClose point types are
            returned by the iterator.
            If an optional AffineTransform is specified,
            the coordinates returned in the iteration are transformed
            accordingly.
            <p />
            The amount of subdivision of the curved segments is controlled
            by the flatness parameter, which specifies the
            maximum distance that any point on the unflattened transformed
            curve can deviate from the returned flattened path segments.
            remember that a limit on the accuracy of the flattened path might be
            silently imposed, causing very small flattening parameters to be
            treated as larger values.  This limit, if there is one, is
            defined by the particular implementation that is used.
            Each call to this method returns a fresh IPathIterator
            object that traverses the IShape object geometry
            independently from any other IPathIterator objects in use at
            the same time.
            It is recommended, but not guaranteed, that objects
            implementing the IShape interface isolate iterations
            that are in process from any changes that might occur to the original
            object's geometry during such iterations.
            </remarks>
            <param name="at">an optional AffineTransform to be applied to the
             		coordinates as they are returned in the iteration, or
            		null if untransformed coordinates are desired</param>
            <param name="flatness">the maximum distance that the line segments used to
                      approximate the curved segments are allowed to deviate
                      from any point on the original curve</param>
            <returns>a new IPathIterator that independently traverses
            a flattened view of the geometry of the  IShape.</returns>
        </member>
        <member name="P:Mapdigit.Drawing.Geometry.IShape.Bounds">
            <summary>
            Returns an integer Rectangle that completely encloses the
            IShape. 
            </summary>
            <remarks>
            remember that there is no guarantee that the
            returned Rectangle is the smallest bounding box that
            encloses the IShape, only that the IShape
            lies entirely within the indicated  Rectangle.  The
            returned Rectangle might also fail to completely
            enclose the IShape if the IShape overflows
            the limited range of the integer data type.  The
            getBounds method generally returns a
            tighter bounding box due to its greater flexibility in
            representation.
            </remarks>
            <returns>an integer Rectangle that completely encloses
            the IShape.</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.RectangularShape.IsEmpty">
            <summary>
             Determines whether the RectangularShape is empty.
            When the RectangularShape is empty, it encloses no
            area.
            </summary>
            <returns>
            	<c>true</c> if this instance is empty; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.RectangularShape.SetFrame(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the location and size of the framing rectangle of this
            IShape to the specified rectangular values.
            </summary>
            <param name="x">the X coordinate of the upper-left corner of the
             	        specified rectangular shape</param>
            <param name="y">the Y coordinate of the upper-left corner of the
             	        specified rectangular shape</param>
            <param name="w">the width of the specified rectangular shape</param>
            <param name="h">the height of the specified rectangular shape</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.RectangularShape.SetFrame(Mapdigit.Drawing.Geometry.Point,Mapdigit.Drawing.Geometry.Dimension)">
            <summary>
            Sets the location and size of the framing rectangle of this 
            IShape to the specified Point and Dimension, respectively.  
            </summary>
            <remarks>
            The framing rectangle is used
            by the subclasses of RectangularShape to define 
            their geometry.
            </remarks>
            <param name="loc"> the specified Point</param>
            <param name="size">the specified Dimension</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.RectangularShape.SetFrame(Mapdigit.Drawing.Geometry.Rectangle)">
            <summary>
            Sets the framing rectangle of this IShape to 
            be the specified Rectangle.  
            </summary>
            <remarks>
            The framing rectangle is
            used by the subclasses of RectangularShape to define
            their geometry.
            </remarks>
            <param name="r">the specified Rectangle</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.RectangularShape.SetFrameFromDiagonal(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
             Sets the diagonal of the framing rectangle of this IShape
            based on the two specified coordinates. 
            </summary>
            <remarks>
             The framing rectangle is
            used by the subclasses of RectangularShape to define
            their geometry.
            </remarks>
            <param name="x1">the X coordinate of the start point of the specified diagonal.</param>
            <param name="y1">the Y coordinate of the start point of the specified diagonal.</param>
            <param name="x2">the X coordinate of the end point of the specified diagonal.</param>
            <param name="y2">Tthe Y coordinate of the end point of the specified diagonal</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.RectangularShape.SetFrameFromDiagonal(Mapdigit.Drawing.Geometry.Point,Mapdigit.Drawing.Geometry.Point)">
            <summary>
            Sets the diagonal of the framing rectangle of this IShape 
            based on two specified Point objects.
            </summary>
            <remarks>
            The framing rectangle is used by the subclasses of RectangularShape 
            to define their geometry.
            </remarks>
            <param name="p1">the start Point of the specified diagonal</param>
            <param name="p2">the end Point of the specified diagonal.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.RectangularShape.SetFrameFromCenter(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the framing rectangle of this IShape
            based on the specified center point coordinates and corner point
            coordinates. 
            </summary>
            <remarks>
             The framing rectangle is used by the subclasses of 
            RectangularShape to define their geometry.
            </remarks>
            <param name="centerX">the X coordinate of the specified center point</param>
            <param name="centerY">the Y coordinate of the specified center point.</param>
            <param name="cornerX">the X coordinate of the specified corner point.</param>
            <param name="cornerY">the Y coordinate of the specified corner point</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.RectangularShape.SetFrameFromCenter(Mapdigit.Drawing.Geometry.Point,Mapdigit.Drawing.Geometry.Point)">
            <summary>
            Sets the framing rectangle of this IShape based on a 
            specified center Point and corner Point.  
            </summary>
            <remarks>
            The framing rectangle is used by the subclasses
            of RectangularShape to define their geometry.
            </remarks>
            <param name="center">the specified center Point</param>
            <param name="corner">the specified corner Point</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.RectangularShape.Contains(System.Int32,System.Int32)">
            <summary>
            Tests if the specified coordinates are inside the boundary of the
            IShape.
            </summary>
            <param name="x">the specified X coordinate to be tested</param>
            <param name="y">the specified Y coordinate to be tested.</param>
            <returns>
            	true if the specified coordinates are inside
            the IShape boundary; false
            otherwise.
            </returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.RectangularShape.Contains(Mapdigit.Drawing.Geometry.Point)">
            <summary>
            Tests if a specified Point is inside the boundary
            of the IShape.
            </summary>
            <param name="p">the specified Point to be tested</param>
            <returns>
            	true if the specified Point is
            inside the boundary of the IShape;
            false otherwise.
            </returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.RectangularShape.Contains(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Tests if the interior of the IShape entirely contains
            the specified rectangular area.  
            </summary>
            <remarks>
            All coordinates that lie inside
            the rectangular area must lie within the IShape for the
            entire rectanglar area to be considered contained within the
            IShape.
            The IShape.contains()method allows a IShape
            implementation to conservatively return false when:
            <ul>
            		<li>
            the intersect method returns true and
            </li>
            the calculations to determine whether or not the
            IShape entirely contains the rectangular area are
            prohibitively expensive.
            </ul>
            This means that for some Shapes this method might
            return false even though the IShape contains
            the rectangular area.
            The com.mapdigit.drawing.geometry.Area class performs
            more accurate geometric computations than most
            IShape objects and therefore can be used if a more precise
            answer is required.
            </remarks>
            <param name="x">X coordinate of the upper-left corner
            of the specified rectangular area</param>
            <param name="y">the Y coordinate of the upper-left corner
            of the specified rectangular area</param>
            <param name="w">Tthe width of the specified rectangular area.</param>
            <param name="h">the height of the specified rectangular area.</param>
            <returns>
            	true if the interior of the IShape
            entirely contains the specified rectangular area;
            false otherwise or, if the IShape
            contains the rectangular area and the
            intersects method returns true
            and the containment calculations would be too expensive to
            perform.
            </returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.RectangularShape.Intersects(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Tests if the interior of the IShape intersects the
            interior of a specified rectangular area.
            </summary>
            <remarks>
            The rectangular area is considered to intersect the IShape
            if any point is contained in both the interior of the
            IShape and the specified rectangular area.
            The IShape.intersects()method allows a IShape
            implementation to conservatively return true when:
            <ul>
            		<li>
            there is a high probability that the rectangular area and the
            IShape intersect, but
            </li>
            the calculations to accurately determine this intersection
            are prohibitively expensive.
            </ul>
            This means that for some Shapes this method might
            return true even though the rectangular area does not
            intersect the IShape.
            The com.mapdigit.drawing.geometry.Area class performs
            more accurate computations of geometric intersection than most
            IShape objects and therefore can be used if a more precise
            answer is required.
            </remarks>
            <param name="x">the X coordinate of the upper-left corner
            of the specified rectangular area</param>
            <param name="y">the Y coordinate of the upper-left corner
            of the specified rectangular area</param>
            <param name="w">Tthe width of the specified rectangular area</param>
            <param name="h">the height of the specified rectangular area</param>
            <returns>
            	true if the interior of the IShape and
            the interior of the rectangular area intersect, or are
            both highly likely to intersect and intersection calculations
            would be too expensive to perform; false
            </returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.RectangularShape.Intersects(Mapdigit.Drawing.Geometry.Rectangle)">
            <summary>
            Tests if the interior of the IShape intersects the
            interior of a specified Rectangle.
            </summary>
            <remarks>
            The IShape.intersects()method allows a IShape
            implementation to conservatively return true when:
            <ul>
            		<li>
            there is a high probability that the Rectangle and the
            IShape intersect, but
            </li>
            the calculations to accurately determine this intersection
            are prohibitively expensive.
            </ul>
            This means that for some Shapes this method might
            return true even though the Rectangle does not
            intersect the IShape.
            The com.mapdigit.drawing.geometry.Area class performs
            more accurate computations of geometric intersection than most
            IShape objects and therefore can be used if a more precise
            answer is required.
            </remarks>
            <param name="r">r the specified Rectangle.</param>
            <returns>
            	true if the interior of the IShape and
            the interior of the specified Rectangle
            intersect, or are both highly likely to intersect and intersection
            calculations would be too expensive to perform; false
            otherwise.
            </returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.RectangularShape.GetPathIterator(Mapdigit.Drawing.Geometry.AffineTransform)">
            <summary>
            Returns an iterator object that iterates along the
            IShape boundary and provides access to the geometry of the
            IShape outline. 
            </summary>
            <remarks>
             If an optional AffineTransform
            is specified, the coordinates returned in the iteration are
            transformed accordingly.
            Each call to this method returns a fresh IPathIterator
            object that traverses the geometry of the IShape object
            independently from any other IPathIterator objects in use
            at the same time.
            It is recommended, but not guaranteed, that objects
            implementing the IShape interface isolate iterations
            that are in process from any changes that might occur to the original
            object's geometry during such iterations.
            </remarks>
            <param name="at">an optional AffineTransform to be applied to the
            coordinates as they are returned in the iteration, or
            null if untransformed coordinates are desired</param>
            <returns>
            a new IPathIterator object, which independently
            traverses the geometry of the IShape.
            </returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.RectangularShape.Contains(Mapdigit.Drawing.Geometry.Rectangle)">
            <summary>
            Tests if the interior of the IShape entirely contains the
            specified Rectangle.
            </summary>
            <remarks>
            The IShape.contains()method allows a IShape
            implementation to conservatively return false when:
            <ul>
            		<li>
            the intersect method returns true and
            </li>
            the calculations to determine whether or not the
            IShape entirely contains the Rectangle
            are prohibitively expensive.
            </ul>
            This means that for some Shapes this method might
            return false even though the IShape contains
            the Rectangle.
            The com.mapdigit.drawing.geometry.Area class performs
            more accurate geometric computations than most
            IShape objects and therefore can be used if a more precise
            answer is required.
            </remarks>
            <param name="r">The specified Rectangle</param>
            <returns>
            	true if the interior of the IShape
            entirely contains the Rectangle;
            false otherwise or, if the IShape
            contains the Rectangle and the
            intersects method returns true
            and the containment calculations would be too expensive to
            perform.
            </returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.RectangularShape.GetPathIterator(Mapdigit.Drawing.Geometry.AffineTransform,System.Int32)">
            <summary>
            Returns an iterator object that iterates along the IShape
            boundary and provides access to a flattened view of the
            IShape outline geometry.
            </summary>
            <remarks>
            Only SegMoveto, SegLineto, and SegClose point types are
            returned by the iterator.
            If an optional AffineTransform is specified,
            the coordinates returned in the iteration are transformed
            accordingly.
            <p/>
            The amount of subdivision of the curved segments is controlled
            by the flatness parameter, which specifies the
            maximum distance that any point on the unflattened transformed
            curve can deviate from the returned flattened path segments.
            remember that a limit on the accuracy of the flattened path might be
            silently imposed, causing very small flattening parameters to be
            treated as larger values.  This limit, if there is one, is
            defined by the particular implementation that is used.
            Each call to this method returns a fresh IPathIterator
            object that traverses the IShape object geometry
            independently from any other IPathIterator objects in use at
            the same time.
            It is recommended, but not guaranteed, that objects
            implementing the IShape interface isolate iterations
            that are in process from any changes that might occur to the original
            object's geometry during such iterations.
            </remarks>
            <param name="at">an optional AffineTransform to be applied to the
            coordinates as they are returned in the iteration, or
            null if untransformed coordinates are desired</param>
            <param name="flatness">the maximum distance that the line segments used to
            approximate the curved segments are allowed to deviate
            from any point on the original curve</param>
            <returns>
            a new IPathIterator that independently traverses
            a flattened view of the geometry of the  IShape.
            </returns>
        </member>
        <member name="P:Mapdigit.Drawing.Geometry.RectangularShape.IntX">
            <summary>
            Returns the X coordinate of the upper-left corner of 
            the framing rectangle.
            </summary>
        </member>
        <member name="P:Mapdigit.Drawing.Geometry.RectangularShape.IntY">
            <summary>
            Returns the Y coordinate of the upper-left corner of 
            the framing rectangle .
            </summary>
        </member>
        <member name="P:Mapdigit.Drawing.Geometry.RectangularShape.IntWidth">
            <summary>
            Returns the width of the framing rectangle.
            </summary>
        </member>
        <member name="P:Mapdigit.Drawing.Geometry.RectangularShape.IntHeight">
            <summary>
            Returns the height of the framing rectangle.
            </summary>
        </member>
        <member name="P:Mapdigit.Drawing.Geometry.RectangularShape.IntMinX">
             <summary>
            Returns the smallest X coordinate of the framing
             rectangle of the IShape 
             </summary>
        </member>
        <member name="P:Mapdigit.Drawing.Geometry.RectangularShape.IntMinY">
             <summary>
            Returns the smallest Y coordinate of the framing
             rectangle of the IShape 
             </summary>
        </member>
        <member name="P:Mapdigit.Drawing.Geometry.RectangularShape.IntMaxX">
             <summary>
            Returns the largest X coordinate of the framing
             rectangle of the IShape 
             </summary>
        </member>
        <member name="P:Mapdigit.Drawing.Geometry.RectangularShape.IntMaxY">
             <summary>
            Returns the largest Y coordinate of the framing
             rectangle of the IShape 
             </summary>
        </member>
        <member name="P:Mapdigit.Drawing.Geometry.RectangularShape.IntCenterX">
            <summary>
            Returns the X coordinate of the center of the framing
            rectangle of the IShape
            </summary>
        </member>
        <member name="P:Mapdigit.Drawing.Geometry.RectangularShape.IntCenterY">
            <summary>
            Returns the Y coordinate of the center of the framing 
            rectangle of the IShape 
            </summary>
        </member>
        <member name="P:Mapdigit.Drawing.Geometry.RectangularShape.Frame">
            <summary>
            Returns the framing Rectangle
            that defines the overall shape of this object.
            </summary>
        </member>
        <member name="P:Mapdigit.Drawing.Geometry.RectangularShape.Bounds">
            <summary>
            Returns an integer Rectangle that completely encloses the IShape.  
            </summary>
            <remarks>
            remmeber that there is no guarantee that the
            returned Rectangle is the smallest bounding box that
            encloses the IShape, only that the IShape
            lies entirely within the indicated  Rectangle.  The
            returned Rectangle might also fail to completely
            enclose the IShape if the IShape overflows
            the limited range of the integer data type.  The
            getBounds method generally returns a
            tighter bounding box due to its greater flexibility in
            representation.
            </remarks>
            <returns>
            an integer Rectangle that completely encloses
            the IShape.
            </returns>
        </member>
        <member name="F:Mapdigit.Drawing.Geometry.Arc.Open">
            <summary>
             The closure type for an open arc with no path segments
             connecting the two ends of the arc segment.
            </summary>
        </member>
        <member name="F:Mapdigit.Drawing.Geometry.Arc.Chord">
            <summary>
             The closure type for an arc closed by drawing a straight
            line segment from the start of the arc segment to the end of the
            arc segment.
            </summary>
        </member>
        <member name="F:Mapdigit.Drawing.Geometry.Arc.Pie">
            <summary>
            The closure type for an arc closed by drawing straight line
            segments from the start of the arc segment to the center
            of the full ellipse and from that point to the end of the arc segment.
            </summary>
        </member>
        <member name="F:Mapdigit.Drawing.Geometry.Arc.X">
            <summary>
             The X coordinate of the upper-left corner of the framing
            rectangle of the arc.
            </summary>
        </member>
        <member name="F:Mapdigit.Drawing.Geometry.Arc.Y">
            <summary>
            The Y coordinate of the upper-left corner of the framing
            rectangle of the arc.
            </summary>
        </member>
        <member name="F:Mapdigit.Drawing.Geometry.Arc.Width">
            <summary>
             The overall width of the full ellipse of which this arc is
            a partial section (not considering the angular extents).
            </summary>
        </member>
        <member name="F:Mapdigit.Drawing.Geometry.Arc.Height">
            <summary>
            The overall height of the full ellipse of which this arc is
            a partial section (not considering the angular extents).
            </summary>
        </member>
        <member name="F:Mapdigit.Drawing.Geometry.Arc.Start">
            <summary>
             The starting angle of the arc in degrees.
            </summary>
        </member>
        <member name="F:Mapdigit.Drawing.Geometry.Arc.Extent">
            <summary>
             The angular extent of the arc in degrees.
            </summary>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Arc.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mapdigit.Drawing.Geometry.Arc"/> class.
            </summary>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Arc.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Mapdigit.Drawing.Geometry.Arc"/> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Arc.#ctor(Mapdigit.Drawing.Geometry.RectangularShape,System.Double,System.Double,System.Int32)">
            <summary>
            Constructs a new arc, initialized to the specified location,
            size, angular extents, and closure type.
            </summary>
            <param name="ellipseBounds">The framing rectangle that defines the
            outer boundary of the full ellipse of which this arc is a
            partial section..</param>
            <param name="start">The starting angle of the arc in degrees.</param>
            <param name="extent">The angular extent of the arc in degrees.</param>
            <param name="type">The closure type for the arc.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Arc.IsEmpty">
            <summary>
            Determines whether the RectangularShape is empty.
            When the RectangularShape is empty, it encloses no
            area.
            </summary>
            <returns>
            	true if this instance is empty; otherwise, false.
            </returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Arc.SetArc(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Sets the location, size, angular extents, and closure type of
            this arc to the specified double values.
            </summary>
            <param name="x">The X coordinate of the upper-left corner of the arc</param>
            <param name="y">The Y coordinate of the upper-left corner of the arc.</param>
            <param name="w">The overall width of the full ellipse of which
                      this arc is a partial section.</param>
            <param name="h">The overall height of the full ellipse of which
                      this arc is a partial section.</param>
            <param name="angSt">The starting angle of the arc in degrees.</param>
            <param name="angExt">The angular extent of the arc in degrees.</param>
            <param name="closure">The closure type for the arc:
             Open, Chord, or Pie.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Arc.MakeBounds(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructs a Rectangle of the appropriate precision
            to hold the parameters calculated to be the framing rectangle
            of this arc.
            </summary>
            <param name="x">The X coordinate of the upper-left corner of the
             framing rectangle</param>
            <param name="y">The Y coordinate of the upper-left corner of the
             framing rectangle.</param>
            <param name="w">The width of the framing rectangle.</param>
            <param name="h">The height of the framing rectangle.</param>
            <returns></returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Arc.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32)">
            <summary>
             Constructs a new arc, initialized to the specified location,
             size, angular extents, and closure type.
            </summary>
            <param name="x">The X coordinate of the upper-left corner
                      of the arc's framing rectangle</param>
            <param name="y">The Y coordinate of the upper-left corner
                      of the arc's framing rectangle..</param>
            <param name="w">The overall width of the full ellipse of which this
                      arc is a partial section.</param>
            <param name="h">The overall height of the full ellipse of which this
                      arc is a partial section.</param>
            <param name="start">The starting angle of the arc in degrees.</param>
            <param name="extent">The angular extent of the arc in degree.</param>
            <param name="type">The closure type for the arc:
            Open, Chord, or Pie.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Arc.SetArc(Mapdigit.Drawing.Geometry.Point,Mapdigit.Drawing.Geometry.Dimension,System.Double,System.Double,System.Int32)">
            <summary>
            Sets the location, size, angular extents, and closure type of
            this arc to the specified values.
            </summary>
            <param name="loc">The <CODE>Point</CODE> representing the coordinates of
            the upper-left corner of the arc.</param>
            <param name="size"> The <CODE>Dimension</CODE> representing the width
            and height of the full ellipse of which this arc is
            a partial section.</param>
            <param name="angSt">The starting angle of the arc in degrees.</param>
            <param name="angExt">The angular extent of the arc in degrees.</param>
            <param name="closure">The closure type for the arc:
            Open, Chord, or Pie.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Arc.SetArc(Mapdigit.Drawing.Geometry.Rectangle,System.Double,System.Double,System.Int32)">
            <summary>
            Sets the location, size, angular extents, and closure type of
            this arc to the specified values.
            </summary>
            <param name="rect">rect The framing rectangle that defines the
            outer boundary of the full ellipse of which this arc is a
            partial section.</param>
            <param name="angSt">The starting angle of the arc in degrees.</param>
            <param name="angExt">The angular extent of the arc in degrees.</param>
            <param name="closure">The closure type for the arc:
            Open, Chord, or Pie.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Arc.SetArc(Mapdigit.Drawing.Geometry.Arc)">
            <summary>
            Sets this arc to be the same as the specified arc.
            </summary>
            <param name="a">a The <CODE>Arc</CODE> to use to set the arc's values</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Arc.SetArcByCenter(System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Sets the position, bounds, angular extents, and closure type of
            this arc to the specified values. 
            </summary>
            <remarks>
            The arc is defined by a center point and a radius rather than a framing
             rectangle for the full ellipse.
            </remarks>
            <param name="x">The X coordinate of the center of the arc</param>
            <param name="y">The Y coordinate of the center of the arc..</param>
            <param name="radius"> The radius of the arc</param>
            <param name="angSt">The starting angle of the arc in degrees</param>
            <param name="angExt"> The angular extent of the arc in degrees.</param>
            <param name="closure">The closure type for the arc:
             Open, Chord, or Pie.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Arc.SetArcByTangent(Mapdigit.Drawing.Geometry.Point,Mapdigit.Drawing.Geometry.Point,Mapdigit.Drawing.Geometry.Point,System.Double)">
            <summary>
            Sets the position, bounds, and angular extents of this arc to the
            specified value. 
            </summary>
            <remarks>
            The starting angle of the arc is tangent to the
            line specified by points (p1, p2), the ending angle is tangent to
            the line specified by points (p2, p3), and the arc has the
            specified radius.
            </remarks>
            <param name="p1">The first point that defines the arc. The starting
            angle of the arc is tangent to the line specified by points (p1, p2).</param>
            <param name="p2">he second point that defines the arc. The starting
            angle of the arc is tangent to the line specified by points (p1, p2).
            The ending angle of the arc is tangent to the line specified by
            points (p2, p3).</param>
            <param name="p3"> The third point that defines the arc. The ending angle
            of the arc is tangent to the line specified by points (p2, p3).</param>
            <param name="radius">The radius of the arc.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Arc.SetAngleStart(Mapdigit.Drawing.Geometry.Point)">
            <summary>
            Sets the starting angle of this arc to the angle that the
            specified point defines relative to the center of this arc.
            The angular extent of the arc will remain the same.
            </summary>
            <param name="p">The <CODE>Point</CODE> that defines the starting angle.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Arc.SetAngles(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Sets the starting angle and angular extent of this arc using two
            sets of coordinates.
            </summary>
            <remarks>
             The first set of coordinates is used to determine the angle of the 
            starting point relative to the arc's center. The second set of coordinates
             is used to determine the angle of the end point relative to the arc's center.
            The arc will always be non-empty and extend counterclockwise
            from the first point around to the second point.
            </remarks>
            <param name="x1">The X coordinate of the arc's starting point</param>
            <param name="y1">The Y coordinate of the arc's starting point.</param>
            <param name="x2">The X coordinate of the arc's ending point.</param>
            <param name="y2">The Y coordinate of the arc's ending point.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Arc.SetAngles(Mapdigit.Drawing.Geometry.Point,Mapdigit.Drawing.Geometry.Point)">
            <summary>
            Sets the starting angle and angular extent of this arc using
            two points. The first point is used to determine the angle of
            the starting point relative to the arc's center.
            </summary>
            <remarks>
            The second point is used to determine the angle of the end point
            relative to the arc's center.
            The arc will always be non-empty and extend counterclockwise
            from the first point around to the second point.
            </remarks>
            <param name="p1">The <CODE>Point</CODE> that defines the arc's
            starting point.</param>
            <param name="p2">The <CODE>Point</CODE> that defines the arc's
            ending point.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Arc.SetFrame(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the location and size of the framing rectangle of this
            IShape to the specified rectangular values.
            </summary>
            <param name="x">the X coordinate of the upper-left corner of the
            specified rectangular shape</param>
            <param name="y">the Y coordinate of the upper-left corner of the
            specified rectangular shape</param>
            <param name="w">the width of the specified rectangular shape</param>
            <param name="h">the height of the specified rectangular shape</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Arc.ContainsAngle(System.Double)">
            <summary>
            Determines whether or not the specified angle is within the
            angular extents of the arc.
            </summary>
            <param name="angle">The angle.</param>
            <returns>
            	true, if the arc contains the angle,
             false,if the arc doesn't contain the angle
            </returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Arc.Contains(System.Int32,System.Int32)">
            <summary>
            Tests if the specified coordinates are inside the boundary of the
            IShape.
            </summary>
            <param name="x">the specified X coordinate to be tested</param>
            <param name="y">the specified Y coordinate to be tested.</param>
            <returns>
            	true if the specified coordinates are inside
            the IShape boundary; false
            otherwise.
            </returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Arc.Intersects(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Tests if the interior of the IShape intersects the
            interior of a specified rectangular area.
            </summary>
            <remarks>
            The rectangular area is considered to intersect the IShape
            if any point is contained in both the interior of the
            IShape and the specified rectangular area.
            The IShape.intersects() method allows a IShape
            implementation to conservatively return true when:
            there is a high probability that the rectangular area and the
            IShape intersect, but
            the calculations to accurately determine this intersection
            are prohibitively expensive.
            This means that for some Shapes this method might
            return true even though the rectangular area does not
            intersect the IShape.
            The com.mapdigit.drawing.geometry.Area Area class performs
            more accurate computations of geometric intersection than most
            IShape objects and therefore can be used if a more precise
            answer is required.
            </remarks>
            <param name="x">the X coordinate of the upper-left corner
            of the specified rectangular area</param>
            <param name="y">the Y coordinate of the upper-left corner
            of the specified rectangular area</param>
            <param name="w">Tthe width of the specified rectangular area</param>
            <param name="h">the height of the specified rectangular area</param>
            <returns>
            	true if the interior of the IShape and
            the interior of the rectangular area intersect, or are
            both highly likely to intersect and intersection calculations
            would be too expensive to perform; false
            </returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Arc.Contains(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Tests if the interior of the IShape entirely contains
            the specified rectangular area.  
            </summary>
            <remarks>
            All coordinates that lie inside
            the rectangular area must lie within the IShape for the
            entire rectanglar area to be considered contained within the
            IShape.
            The IShape.contains()method allows a IShape}
            implementation to conservatively return false when:
            the intersect method returns true and
            the calculations to determine whether or not the
            IShape entirely contains the rectangular area are
            prohibitively expensive.
            This means that for some Shapes this method might
            return false even though the IShape} contains
            the rectangular area.
            The com.mapdigit.drawing.geometry.Area Area class performs
            more accurate geometric computations than most
            IShape} objects and therefore can be used if a more precise
            answer is required.
            </remarks>
            <param name="x">X coordinate of the upper-left corner
            of the specified rectangular area</param>
            <param name="y">the Y coordinate of the upper-left corner
            of the specified rectangular area</param>
            <param name="w">Tthe width of the specified rectangular area.</param>
            <param name="h">the height of the specified rectangular area.</param>
            <returns>
            	true if the interior of the IShape
            entirely contains the specified rectangular area;
            false otherwise or, if the IShape
            contains the rectangular area and the
            intersects method returns true
            and the containment calculations would be too expensive to
            perform.
            </returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Arc.Contains(Mapdigit.Drawing.Geometry.Rectangle)">
            <summary>
            Tests if the interior of the IShape entirely contains the
            specified Rectangle.
            </summary>
            <remarks>
            The IShape.contains() method allows a IShape}
            implementation to conservatively return false when:
            the intersect method returns true and
            the calculations to determine whether or not the
            IShape entirely contains the Rectangle
            are prohibitively expensive.
            This means that for some Shapes this method might
            return false even though the IShape} contains
            the Rectangle.
            The com.mapdigit.drawing.geometry.Area Area class performs
            more accurate geometric computations than most
            IShape} objects and therefore can be used if a more precise
            answer is required.
            </remarks>
            <param name="r">The specified Rectangle</param>
            <returns>
            	true if the interior of the IShape
            entirely contains the Rectangle;
            false otherwise or, if the IShape
            contains the Rectangle and the
            intersects method returns true
            and the containment calculations would be too expensive to
            perform.
            </returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Arc.GetPathIterator(Mapdigit.Drawing.Geometry.AffineTransform)">
            <summary>
            Returns an iterator object that iterates along the
            IShape boundary and provides access to the geometry of the
            IShape outline. 
            </summary>
            <remarks>
             If an optional AffineTransform
            is specified, the coordinates returned in the iteration are
            transformed accordingly.
            Each call to this method returns a fresh IPathIterator
            object that traverses the geometry of the IShape object
            independently from any other IPathIterator objects in use
            at the same time.
            It is recommended, but not guaranteed, that objects
            implementing the IShape interface isolate iterations
            that are in process from any changes that might occur to the original
            object's geometry during such iterations.
            </remarks>
            <param name="at">an optional AffineTransform to be applied to the
            coordinates as they are returned in the iteration, or
            null if untransformed coordinates are desired</param>
            <returns>
            a new IPathIterator object, which independently
            traverses the geometry of the IShape.
            </returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Arc.GetHashCode">
            <summary>
            Returns a hash c for this instance.
            </summary>
            <returns>
            A hash c for this instance, suitable for use in hashing algorithms 
            and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Arc.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            	true if the specified <see cref="T:System.Object"/> is equal to
             this instance; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
            </exception>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Arc.NormalizeDegrees(System.Double)">
            <summary>
            Normalizes the specified angle into the range -180 to 180.
            </summary>
            <param name="angle">The angle.</param>
            <returns></returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Arc.Contains(System.Int32,System.Int32,System.Int32,System.Int32,Mapdigit.Drawing.Geometry.Rectangle)">
            <summary>
            Determines whether [contains] [the specified x].
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="w">The w.</param>
            <param name="h">The h.</param>
            <param name="origrect">The origrect.</param>
            <returns>
            	true if [contains] [the specified x]; otherwise, false.
            </returns>
        </member>
        <member name="P:Mapdigit.Drawing.Geometry.Arc.IntX">
            <summary>
            Returns the X coordinate of the upper-left corner of
            the framing rectangle.
            </summary>
            <returns>
            the X coordinate of the upper-left corner of
            the framing rectangle.
            </returns>
        </member>
        <member name="P:Mapdigit.Drawing.Geometry.Arc.IntY">
            <summary>
            Returns the Y coordinate of the upper-left corner of
            the framing rectangle .
            </summary>
            <returns>
            the Y coordinate of the upper-left corner of
            the framing rectangle
            </returns>
        </member>
        <member name="P:Mapdigit.Drawing.Geometry.Arc.IntWidth">
            <summary>
            Returns the width of the framing rectangle.
            </summary>
            <returns>the width of the framing rectangle</returns>
        </member>
        <member name="P:Mapdigit.Drawing.Geometry.Arc.IntHeight">
            <summary>
            Returns the height of the framing rectangle.
            </summary>
            <returns>the height of the framing rectangle</returns>
        </member>
        <member name="P:Mapdigit.Drawing.Geometry.Arc.AngleStart">
            <summary>
            the start angle.
            </summary>
        </member>
        <member name="P:Mapdigit.Drawing.Geometry.Arc.AngleExtent">
            <summary>
            the extent angle.
            </summary>
        </member>
        <member name="P:Mapdigit.Drawing.Geometry.Arc.ArcType">
            <summary>
            the arc closure type of the arc: Open,Chord,Pie
            </summary>
        </member>
        <member name="P:Mapdigit.Drawing.Geometry.Arc.StartPoint">
            <summary>
            Returns the starting point of the arc. 
            </summary>
            <remarks>
            This point is the  intersection of the ray from the center defined by the
            starting angle and the elliptical boundary of the arc.
            </remarks>
        </member>
        <member name="P:Mapdigit.Drawing.Geometry.Arc.EndPoint">
            <summary>
            Returns the ending point of the arc.  
            </summary>
            <remarks>
            This point is the intersection of the ray from the center defined by the
            starting angle plus the angular extent of the arc and the
            elliptical boundary of the arc.
            </remarks>
        </member>
        <member name="P:Mapdigit.Drawing.Geometry.Arc.Bounds">
            <summary>
            Returns an integer Rectangle that completely encloses the
            IShape.  
            </summary>
            <remarks>
            remmeber that there is no guarantee that the
            returned Rectangle is the smallest bounding box that
            encloses the IShape, only that the IShape
            lies entirely within the indicated  Rectangle.  The
            returned Rectangle might also fail to completely
            enclose the IShape if the IShape overflows
            the limited range of the integer data type.  The
            getBounds method generally returns a
            tighter bounding box due to its greater flexibility in
            representation.
            </remarks>
            <returns>
            an integer Rectangle that completely encloses
            the IShape.
            </returns>
        </member>
        <member name="T:Mapdigit.Drawing.Geometry.ArcIterator">
            <summary>
             A utility class to iterate over the path segments of an arc
            through the IPathIterator interface.
            </summary>
        </member>
        <member name="T:Mapdigit.Drawing.Geometry.PathIterator">
             <summary>
             The PathIterator interface provides the mechanism  for objects that 
             implement the  IShape interface to return the geometry of their boundary 
             by allowing a caller to retrieve the path of that boundary a segment at a
             time. 
             </summary>
             <remarks>
              This interface allows these objects to retrieve the path of
             their boundary a segment at a time by using 1st through 3rd order
             Bezier curves, which are lines and quadratic or cubic
             Bezier splines.
             Multiple subpaths can be expressed by using a "MOVETO" segment to
             create a discontinuity in the geometry to move from the end of
             one subpath to the beginning of the next.
             Each subpath can be closed manually by ending the last segment in
             the subpath on the same coordinate as the beginning "MOVETO" segment
             for that subpath or by using a "CLOSE" segment to append a line
             segment from the last point back to the first.
             Be aware that manually closing an outline as opposed to using a
             "CLOSE" segment to close the path might result in different line
             style decorations being used at the end points of the subpath.
            </remarks>
        </member>
        <member name="F:Mapdigit.Drawing.Geometry.PathIterator.WindEvenOdd">
            <summary>
            The winding rule constant for specifying an even-odd rule
            for determining the interior of a path.
            </summary>
            <remarks>
            The even-odd rule specifies that a point lies inside the
            path if a ray drawn in any direction from that point to
            infinity is crossed by path segments an odd number of times.
            </remarks>
        </member>
        <member name="F:Mapdigit.Drawing.Geometry.PathIterator.WindNonZero">
            <summary>
            The winding rule constant for specifying a non-zero rule
            for determining the interior of a path.
            </summary>
            <remarks>
            The non-zero rule specifies that a point lies inside the
            path if a ray drawn in any direction from that point to
            infinity is crossed by path segments a different number
            of times in the counter-clockwise direction than the
            clockwise direction.
            </remarks>
        </member>
        <member name="F:Mapdigit.Drawing.Geometry.PathIterator.SegMoveto">
            <summary>
            The segment type constant for a point that specifies the
            starting location for a new subpath.
            </summary>
        </member>
        <member name="F:Mapdigit.Drawing.Geometry.PathIterator.SegLineto">
            <summary>
            The segment type constant for a point that specifies the
            end point of a line to be drawn from the most recently
            specified point.
            </summary>
        </member>
        <member name="F:Mapdigit.Drawing.Geometry.PathIterator.SegQuadto">
             <summary>
             The segment type constant for the pair of points that specify
             a quadratic parametric curve to be drawn from the most recently
             specified point.
             </summary>
             <remarks>
             The curve is interpolated by solving the parametric control
             equation in the range (t=[0..1]) using
             the most recently specified (current) point (CP),
             the first control point (P1),
             and the final interpolated control point (P2).
             The parametric control equation for this curve is:
             <pre>
                      P(t) = B(2,0)*CP + B(2,1)*P1 + B(2,2)*P2
                      0 &lt;= t &lt;= 1
            
                    B(n,m) = mth coefficient of nth degree Bernstein polynomial
                           = C(n,m) * t^(m) * (1 - t)^(n-m)
                    C(n,m) = Combinations of n things, taken m at a time
                           = n! / (m! * (n-m)!)
             </pre>
             </remarks>
        </member>
        <member name="F:Mapdigit.Drawing.Geometry.PathIterator.SegCubicto">
             <summary>
             The segment type constant for the set of 3 points that specify
             a cubic parametric curve to be drawn from the most recently
             specified point.
             </summary>
             <remarks>
             The curve is interpolated by solving the parametric control
             equation in the range (t=[0..1]) using
             the most recently specified (current) point (CP),
             the first control point (P1),
             the second control point (P2),
             and the final interpolated control point (P3).
             The parametric control equation for this curve is:
             <pre>
                      P(t) = B(3,0)*CP + B(3,1)*P1 + B(3,2)*P2 + B(3,3)*P3
                      0 &lt;= t &lt;= 1
            
                    B(n,m) = mth coefficient of nth degree Bernstein polynomial
                           = C(n,m) * t^(m) * (1 - t)^(n-m)
                    C(n,m) = Combinations of n things, taken m at a time
                           = n! / (m! * (n-m)!)
             </pre>
             This form of curve is commonly known as a Bezier curve.
             </remarks>
        </member>
        <member name="F:Mapdigit.Drawing.Geometry.PathIterator.SegClose">
            <summary>
            The segment type constant that specifies that
            the preceding subpath should be closed by appending a line segment
            back to the point corresponding to the most recent SegMoveto.
            </summary>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.PathIterator.IsDone">
            <summary>
            Tests if the iteration is complete.
            </summary>
            <returns>
            	true if all the segments have 
             been read; false otherwise.
            </returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.PathIterator.Next">
            <summary>
            Moves the iterator to the next segment of the path forwards
            along the primary direction of traversal as long as there are
            more points in that direction.
            </summary>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.PathIterator.CurrentSegment(System.Int32[])">
            <summary>
            Returns the coordinates and type of the current path segment in
            the iteration.
            </summary>
            <remarks>
            The return value is the path-segment type:
            SegMoveto, SegLineto, SegQuadto, SegCubicto, or SegClose.
            A long array of length 6 must be passed in and can be used to
            store the coordinates of the point(s).
            Each point is stored as a pair of long x,y coordinates.
            SegMoveto and SegLineto types returns one point,
            SegQuadto returns two points,
            SegCubicto returns 3 points
            and SegClose does not return any points.
            </remarks>
            <param name="coords">an array that holds the data returned from
            this method</param>
            <returns> the path-segment type of the current path segment</returns>
        </member>
        <member name="P:Mapdigit.Drawing.Geometry.PathIterator.WindingRule">
            <summary>
            Returns the winding rule for determining the interior of the path.
            </summary>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.ArcIterator.#ctor(Mapdigit.Drawing.Geometry.Arc,Mapdigit.Drawing.Geometry.AffineTransform)">
            <summary>
            Initializes a new instance of the <see cref="T:Mapdigit.Drawing.Geometry.ArcIterator"/> class.
            </summary>
            <param name="a">A.</param>
            <param name="at">At.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.ArcIterator.IsDone">
            <summary>
            Tests if the iteration is complete.
            </summary>
            <returns>
            	true if all the segments have
            been read; false otherwise.
            </returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.ArcIterator.Next">
            <summary>
            Moves the iterator to the next segment of the path forwards
            along the primary direction of traversal as long as there are
            more points in that direction.
            </summary>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.ArcIterator.CurrentSegment(System.Int32[])">
            <summary>
            Returns the coordinates and type of the current path segment in
            the iteration.
            The return value is the path-segment type:
            SegMoveto, SegLineto, SegQuadto, SegCubicto, or SegClose.
            A long array of length 6 must be passed in and can be used to
            store the coordinates of the point(s).
            Each point is stored as a pair of long x,y coordinates.
            SegMoveto and SegLineto types returns one point,
            SegQuadto returns two points,
            SegCubicto returns 3 points
            and SegClose does not return any points.
            </summary>
            <param name="coords">an array that holds the data returned from
            this method</param>
            <returns>
            the path-segment type of the current path segment
            </returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.ArcIterator.Btan(System.Double)">
             <summary>
             btan computes the length (k) of the control segments at
             the beginning and end of a cubic bezier that approximates
             a segment of an arc with extent less than or equal to
             90 degrees.  This length (k) will be used to generate the
             2 bezier control points for such a segment.
            
               Assumptions:
                 a) arc is centered on 0,0 with radius of 1.0
                 b) arc extent is less than 90 degrees
                 c) control points should preserve tangent
                 d) control segments should have equal length
            
               Initial data:
                 start angle: ang1
                 end angle:   ang2 = ang1 + extent
                 start point: P1 = (x1, y1) = (cos(ang1), sin(ang1))
                 end point:   P4 = (x4, y4) = (cos(ang2), sin(ang2))
            
               Control points:
                 P2 = (x2, y2)
                 | x2 = x1 - k * sin(ang1) = cos(ang1) - k * sin(ang1)
                 | y2 = y1 + k * cos(ang1) = sin(ang1) + k * cos(ang1)
            
                 P3 = (x3, y3)
                 | x3 = x4 + k * sin(ang2) = cos(ang2) + k * sin(ang2)
                 | y3 = y4 - k * cos(ang2) = sin(ang2) - k * cos(ang2)
            
             The formula for this length (k) can be found using the
             following derivations:
            
               Midpoints:
                 a) bezier (t = 1/2)
                    bPm = P1 * (1-t)^3 +
                          3 * P2 * t * (1-t)^2 +
                          3 * P3 * t^2 * (1-t) +
                          P4 * t^3 =
                        = (P1 + 3P2 + 3P3 + P4)/8
            
                 b) arc
                    aPm = (cos((ang1 + ang2)/2), sin((ang1 + ang2)/2))
            
               Let angb = (ang2 - ang1)/2; angb is half of the angle
               between ang1 and ang2.
            
               Solve the equation bPm == aPm
            
                 a) For xm coord:
                    x1 + 3*x2 + 3*x3 + x4 = 8*cos((ang1 + ang2)/2)
            
                    cos(ang1) + 3*cos(ang1) - 3*k*sin(ang1) +
                    3*cos(ang2) + 3*k*sin(ang2) + cos(ang2) =
                    = 8*cos((ang1 + ang2)/2)
            
                    4*cos(ang1) + 4*cos(ang2) + 3*k*(sin(ang2) - sin(ang1)) =
                    = 8*cos((ang1 + ang2)/2)
            
                    8*cos((ang1 + ang2)/2)*cos((ang2 - ang1)/2) +
                    6*k*sin((ang2 - ang1)/2)*cos((ang1 + ang2)/2) =
                    = 8*cos((ang1 + ang2)/2)
            
                    4*cos(angb) + 3*k*sin(angb) = 4
            
                    k = 4 / 3 * (1 - cos(angb)) / sin(angb)
            
                 b) For ym coord we derive the same formula.
            
             Since this formula can generate "NaN" values for small
             angles, we will derive a safer form that does not involve
             dividing by very small values:
                 (1 - cos(angb)) / sin(angb) =
                 = (1 - cos(angb))*(1 + cos(angb)) / sin(angb)*(1 + cos(angb)) =
                 = (1 - cos(angb)^2) / sin(angb)*(1 + cos(angb)) =
                 = sin(angb)^2 / sin(angb)*(1 + cos(angb)) =
                 = sin(angb) / (1 + cos(angb))
             </summary>
             <param name="increment">The increment.</param>
             <returns></returns>
        </member>
        <member name="P:Mapdigit.Drawing.Geometry.ArcIterator.WindingRule">
            <summary>
            Returns the winding rule for determining the interior of the path.
            </summary>
            <returns>the winding rule</returns>
        </member>
        <member name="T:Mapdigit.Drawing.Geometry.Area">
            <summary>
            An Area object stores and manipulates a
            resolution-independent description of an enclosed area of
            2-dimensional space.
            </summary>
            <remarks>
            Area objects can be transformed and can perform
            various Constructive Area Geometry (CAG) operations when combined
            with other Area objects.
            The CAG operations include area
            add addition, subtract subtraction,
            intersect intersection, and exclusiveOr exclusive or.
            See the linked method documentation for examples of the various
            operations.
            
            The Area class implements the IShape
            interface and provides full support for all of its hit-testing
            and path iteration facilities, but an Area is more
            specific than a generalized path in a number of ways:
            <ul>
            <li>Only closed paths and sub-paths are stored.
                Area objects constructed from unclosed paths
                are implicitly closed during construction as if those paths
                had been filled by the Graphics2D.fill method.
            </li>
            <li>The interiors of the individual stored sub-paths are all
                non-empty and non-overlapping.  Paths are decomposed during
                construction into separate component non-overlapping parts,
                empty pieces of the path are discarded, and then these
                non-empty and non-overlapping properties are maintained
                through all subsequent CAG operations.  Outlines of different
                component sub-paths may touch each other, as long as they
                do not cross so that their enclosed areas overlap.
            </li>
            <li>The geometry of the path describing the outline of the
                Area resembles the path from which it was
                constructed only in that it describes the same enclosed
                2-dimensional area, but may use entirely different types
                and ordering of the path segments to do so.
            </li>
            </ul>
            Interesting issues which are not always obvious when using
            the Area include:
            <ul>
            <li>Creating an Area from an unclosed (open)
                IShape results in a closed outline in the
                Area object.
            </li>
            <li>Creating an Area from a IShape
                which encloses no area (even when "closed") produces an
                empty Area.  A common example of this issue
                is that producing an Area from a line will
                be empty since the line encloses no area.  An empty
                Area will iterate no geometry in its
                IPathIterator objects.
            </li>
            <li>A self-intersecting IShape may be split into
                two (or more) sub-paths each enclosing one of the
                non-intersecting portions of the original path.
            </li>
            <li>An Area may take more path segments to
                describe the same geometry even when the original
                outline is simple and obvious.  The analysis that the
                Area class must perform on the path may
                not reflect the same concepts of "simple and obvious"
                as a human being perceives.
            </li>
            </ul>
            </remarks>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Area.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mapdigit.Drawing.Geometry.Area"/> class.
            </summary>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Area.#ctor(Mapdigit.Drawing.Geometry.IShape)">
            <summary>
            The Area class creates an area geometry from the specified IShapeobject. 
            </summary>
            <remarks>
             The geometry is explicitly
            closed, if the IShape is not already closed.  The
            fill rule (even-odd or winding) specified by the geometry of the
            IShape is used to determine the resulting enclosed area.
            </remarks>
            <param name="s">the IShape from which the area is constructed</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Area.Add(Mapdigit.Drawing.Geometry.Area)">
             <summary>
             Adds the shape of the specified Area to the shape of this Area.
             </summary>
             <remarks>
             The resulting shape of this Area will include
             the union of both shapes, or all areas that were contained
             in either this or the specified Area.
             <pre>
                 // Example:
                 Area a1 = new Area([triangle 0,0 =&gt; 8,0 =&gt; 0,8]);
                 Area a2 = new Area([triangle 0,0 =&gt; 8,0 =&gt; 8,8]);
                 a1.add(a2);
            
                    a1(before)     +         a2         =     a1(after)
            
                 ################     ################     ################
                 ##############         ##############     ################
                 ############             ############     ################
                 ##########                 ##########     ################
                 ########                     ########     ################
                 ######                         ######     ######    ######
                 ####                             ####     ####        ####
                 ##                                 ##     ##            ##
             </pre>
             </remarks>
             <param name="rhs">the Area to be added to the
                      current shape</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Area.Subtract(Mapdigit.Drawing.Geometry.Area)">
             <summary>
             Subtracts the shape of the specified Area from the shape of this Area.
             </summary>
             <remarks>
             The resulting shape of this Area will include
             areas that were contained only in this Area
             and not in the specified Area.
             <pre>
                 // Example:
                 Area a1 = new Area([triangle 0,0 =&gt; 8,0 =&gt; 0,8]);
                 Area a2 = new Area([triangle 0,0 =&gt; 8,0 =&gt; 8,8]);
                 a1.subtract(a2);
            
                    a1(before)     -         a2         =     a1(after)
            
                 ################     ################
                 ##############         ##############     ##
                 ############             ############     ####
                 ##########                 ##########     ######
                 ########                     ########     ########
                 ######                         ######     ######
                 ####                             ####     ####
                 ##                                 ##     ##
             </pre>
             </remarks>
             <param name="rhs">the Area to be subtracted from the
             		current shape</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Area.Intersect(Mapdigit.Drawing.Geometry.Area)">
             <summary>
             Sets the shape of this Area to the intersection of
             its current shape and the shape of the specified Area.
             </summary>
             <remarks>
             The resulting shape of this Area will include
             only areas that were contained in both this Area
             and also in the specified Area.
             <pre>
                 // Example:
                 Area a1 = new Area([triangle 0,0 =&gt; 8,0 =&gt; 0,8]);
                 Area a2 = new Area([triangle 0,0 =&gt; 8,0 =&gt; 8,8]);
                 a1.intersect(a2);
            
                  a1(before)   intersect     a2         =     a1(after)
            
                 ################     ################     ################
                 ##############         ##############       ############
                 ############             ############         ########
                 ##########                 ##########           ####
                 ########                     ########
                 ######                         ######
                 ####                             ####
                 ##                                 ##
             </pre>
             </remarks>
             <param name="rhs">the Area to be intersected with this
             	Area</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Area.ExclusiveOr(Mapdigit.Drawing.Geometry.Area)">
             <summary>
             Sets the shape of this Area to be the combined area
             of its current shape and the shape of the specified Area,
             minus their intersection.
             </summary>
             <remarks>
             The resulting shape of this Area will include
             only areas that were contained in either this Area
             or in the specified Area, but not in both.
             <pre>
                 // Example:
                 Area a1 = new Area([triangle 0,0 =&gt; 8,0 =&gt; 0,8]);
                 Area a2 = new Area([triangle 0,0 =&gt; 8,0 =&gt; 8,8]);
                 a1.exclusiveOr(a2);
            
                    a1(before)    xor        a2         =     a1(after)
            
                 ################     ################
                 ##############         ##############     ##            ##
                 ############             ############     ####        ####
                 ##########                 ##########     ######    ######
                 ########                     ########     ################
                 ######                         ######     ######    ######
                 ####                             ####     ####        ####
                 ##                                 ##     ##            ##
             </pre>
             </remarks>
             <param name="rhs">the Area to be exclusive ORed with this
             		Area.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Area.Reset">
            <summary>
            Removes all of the geometry from this Area and
            restores it to an empty area.
            </summary>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Area.IsEmpty">
            <summary>
            Tests whether this Area object encloses any area.
            </summary>
            <returns>
            	true if this Area object
             represents an empty area; false otherwise.
            </returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Area.IsPolygonal">
            <summary>
            Tests whether this Area consists entirely of
             straight edged polygonal geometry.
            </summary>
            <returns>
            	 true if the geometry of this
             Area consists entirely of line segments;
             false otherwise.
            </returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Area.IsRectangular">
            <summary>
            Tests whether this Area is rectangular in shape.
            </summary>
            <returns>
            	true if the geometry of this
             Area is rectangular in shape; false
             otherwise.
            </returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Area.IsSingular">
            <summary>
            Tests whether this Area is comprised of a single
            closed subpath.  This method returns true if the
            path contains 0 or 1 subpaths, or false if the path
            contains more than 1 subpath.  The subpaths are counted by the
            number of SegMoveto segments
            that appear in the path.
            </summary>
            <returns>
            	 true if the Area is comprised
             of a single basic geometry; false otherwise.
            </returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Area.Equals(Mapdigit.Drawing.Geometry.Area)">
            <summary>
            Tests whether the geometries of the two Area objects are equal.
            This method will return false if the argument is null.
            </summary>
            <param name="other">the Area to be compared to this
            		Area</param>
            <returns>true if the two geometries are equal;
            		false otherwise.</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Area.Transform(Mapdigit.Drawing.Geometry.AffineTransform)">
            <summary>
             Transforms the geometry of this Area using the specified
            AffineTransform.  The geometry is transformed in place, which
            permanently changes the enclosed area defined by this object.
            </summary>
            <param name="t">the transformation used to transform the area</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Area.CreateTransformedArea(Mapdigit.Drawing.Geometry.AffineTransform)">
            <summary>
            Creates a new Area object that contains the same
            geometry as this Area transformed by the specified
            AffineTransform.  This Area object
            is unchanged.
            </summary>
            <param name="t">the specified AffineTransform used to transform
                       the new Area</param>
            <returns>a new Area object representing the transformed
                       geometry.</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Area.Contains(System.Int32,System.Int32)">
            <summary>
            Tests if the specified coordinates are inside the boundary of the
            IShape.
            </summary>
            <param name="x">the specified X coordinate to be tested</param>
            <param name="y">the specified Y coordinate to be tested.</param>
            <returns>
            	true if the specified coordinates are inside
            the IShape boundary; false
            otherwise.
            </returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Area.Contains(Mapdigit.Drawing.Geometry.Point)">
            <summary>
            Tests if a specified Point is inside the boundary
            of the IShape.
            </summary>
            <param name="p">the specified Point to be tested</param>
            <returns>
            	true if the specified Point is
            inside the boundary of the IShape;
            false otherwise.
            </returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Area.Contains(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Tests if the interior of the IShape entirely contains
            the specified rectangular area. 
            </summary>
            <remarks>
             All coordinates that lie inside
            the rectangular area must lie within the IShape for the
            entire rectanglar area to be considered contained within the
            IShape.
            The  IShape.contains() method allows a IShape
            implementation to conservatively return false when:
            <ul>
            		<li>
            the intersect method returns true and
            </li>
            the calculations to determine whether or not the
            IShape entirely contains the rectangular area are
            prohibitively expensive.
            </ul>
            This means that for some Shapes this method might
            return false even though the IShape contains
            the rectangular area.
            The com.mapdigit.drawing.geometry.Area class performs
            more accurate geometric computations than most
            IShape objects and therefore can be used if a more precise
            answer is required.
            </remarks>
            <param name="x">X coordinate of the upper-left corner
            of the specified rectangular area</param>
            <param name="y">the Y coordinate of the upper-left corner
            of the specified rectangular area</param>
            <param name="w">Tthe width of the specified rectangular area.</param>
            <param name="h">the height of the specified rectangular area.</param>
            <returns>
            	true if the interior of the IShape
            entirely contains the specified rectangular area;
            false otherwise or, if the IShape
            contains the rectangular area and the
            intersects method returns true
            and the containment calculations would be too expensive to
            perform.
            </returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Area.Contains(Mapdigit.Drawing.Geometry.Rectangle)">
            <summary>
            Tests if the interior of the IShape entirely contains the
            specified Rectangle.
            </summary>
            <remarks>
            The  IShape.contains() method allows a IShape
            implementation to conservatively return false when:
            <ul>
            		<li>
            the intersect method returns true and
            </li>
            the calculations to determine whether or not the
            IShape entirely contains the Rectangle
            are prohibitively expensive.
            </ul>
            This means that for some Shapes this method might
            return false even though the IShape contains
            the Rectangle.
            The com.mapdigit.drawing.geometry.Area class performs
            more accurate geometric computations than most
            IShape objects and therefore can be used if a more precise
            answer is required.
            </remarks>
            <param name="r">The specified Rectangle</param>
            <returns>
            	true if the interior of the IShape
            entirely contains the Rectangle;
            false otherwise or, if the IShape
            contains the Rectangle and the
            intersects method returns true
            and the containment calculations would be too expensive to
            perform.
            </returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Area.Intersects(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Tests if the interior of the IShape intersects the
            interior of a specified rectangular area.
            </summary>
            <remarks>
            The rectangular area is considered to intersect the IShape
            if any point is contained in both the interior of the
            IShape and the specified rectangular area.
            The IShape.intersects() method allows a IShape
            implementation to conservatively return true when:
            <ul>
            		<li>
            there is a high probability that the rectangular area and the
            IShape intersect, but
            </li>
            the calculations to accurately determine this intersection
            are prohibitively expensive.
            </ul>
            This means that for some Shapes this method might
            return true even though the rectangular area does not
            intersect the IShape.
            The com.mapdigit.drawing.geometry.Area class performs
            more accurate computations of geometric intersection than most
            IShape objects and therefore can be used if a more precise
            answer is required.
            </remarks>
            <param name="x">the X coordinate of the upper-left corner
            of the specified rectangular area</param>
            <param name="y">the Y coordinate of the upper-left corner
            of the specified rectangular area</param>
            <param name="w">Tthe width of the specified rectangular area</param>
            <param name="h">the height of the specified rectangular area</param>
            <returns>
            	true if the interior of the IShape and
            the interior of the rectangular area intersect, or are
            both highly likely to intersect and intersection calculations
            would be too expensive to perform; false
            </returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Area.Intersects(Mapdigit.Drawing.Geometry.Rectangle)">
            <summary>
            Tests if the interior of the IShape intersects the
            interior of a specified Rectangle.
            </summary>
            <remarks>
            The IShape.intersects() method allows a IShape
            implementation to conservatively return true when:
            <ul>
            		<li>
            there is a high probability that the Rectangle and the
            IShape intersect, but
            </li>
            the calculations to accurately determine this intersection
            are prohibitively expensive.
            </ul>
            This means that for some Shapes this method might
            return true even though the Rectangle does not
            intersect the IShape.
            The com.mapdigit.drawing.geometry.Area class performs
            more accurate computations of geometric intersection than most
            IShape objects and therefore can be used if a more precise
            answer is required.
            </remarks>
            <param name="r">r the specified Rectangle.</param>
            <returns>
            	true if the interior of the IShape and
            the interior of the specified Rectangle
            intersect, or are both highly likely to intersect and intersection
            calculations would be too expensive to perform; false
            otherwise.
            </returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Area.GetPathIterator(Mapdigit.Drawing.Geometry.AffineTransform)">
            <summary>
            Returns an iterator object that iterates along the
            IShape boundary and provides access to the geometry of the
            IShape outline. 
            </summary>
            <remarks>
             If an optional AffineTransform
            is specified, the coordinates returned in the iteration are
            transformed accordingly.
            Each call to this method returns a fresh IPathIterator
            object that traverses the geometry of the IShape object
            independently from any other IPathIterator objects in use
            at the same time.
            It is recommended, but not guaranteed, that objects
            implementing the IShape interface isolate iterations
            that are in process from any changes that might occur to the original
            object's geometry during such iterations.
            </remarks>
            <param name="at">an optional AffineTransform to be applied to the
            coordinates as they are returned in the iteration, or
            null if untransformed coordinates are desired</param>
            <returns>
            a new IPathIterator object, which independently
            traverses the geometry of the IShape.
            </returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Area.GetPathIterator(Mapdigit.Drawing.Geometry.AffineTransform,System.Int32)">
            <summary>
            Returns an iterator object that iterates along the IShape
            boundary and provides access to a flattened view of the
            IShape outline geometry.
            </summary>
            <remarks>
            Only SegMoveto, SegLineto, and SegClose point types are
            returned by the iterator.
            If an optional AffineTransform is specified,
            the coordinates returned in the iteration are transformed
            accordingly.
            The amount of subdivision of the curved segments is controlled
            by the flatness parameter, which specifies the
            maximum distance that any point on the unflattened transformed
            curve can deviate from the returned flattened path segments.
            remember that a limit on the accuracy of the flattened path might be
            silently imposed, causing very small flattening parameters to be
            treated as larger values.  This limit, if there is one, is
            defined by the particular implementation that is used.
            Each call to this method returns a fresh IPathIterator
            object that traverses the IShape object geometry
            independently from any other IPathIterator objects in use at
            the same time.
            It is recommended, but not guaranteed, that objects
            implementing the IShape interface isolate iterations
            that are in process from any changes that might occur to the original
            object's geometry during such iterations.
            </remarks>
            <param name="at">an optional AffineTransform to be applied to the
            coordinates as they are returned in the iteration, or
            null if untransformed coordinates are desired</param>
            <param name="flatness">the maximum distance that the line segments used to
            approximate the curved segments are allowed to deviate
            from any point on the original curve</param>
            <returns>
            a new IPathIterator that independently traverses
            a flattened view of the geometry of the  IShape.
            </returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Area.PathToCurves(Mapdigit.Drawing.Geometry.PathIterator)">
            <summary>
            Pathes to curves.
            </summary>
            <param name="pi">The pi.</param>
            <returns></returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Area.InvalidateBounds">
            <summary>
            Invalidates the bounds.
            </summary>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Area.GetCachedBounds">
            <summary>
            Gets the cached bounds.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Mapdigit.Drawing.Geometry.Area.Bounds">
            <summary>
            Returns an integer Rectangle that completely encloses the IShape.  
            </summary>
            <remarks>
            remmeber that there is no guarantee that the
            returned Rectangle is the smallest bounding box that
            encloses the IShape, only that the IShape
            lies entirely within the indicated  Rectangle.  The
            returned Rectangle might also fail to completely
            enclose the IShape if the IShape overflows
            the limited range of the integer data type.  The
            getBounds method generally returns a
            tighter bounding box due to its greater flexibility in
            representation.
            </remarks>
            <returns>
            an integer Rectangle that completely encloses
            the IShape.
            </returns>
        </member>
        <member name="T:Mapdigit.Drawing.Geometry.AreaIterator">
            <summary>
            Area interator.
            </summary>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.AreaIterator.#ctor(System.Collections.ArrayList,Mapdigit.Drawing.Geometry.AffineTransform)">
            <summary>
            Initializes a new instance of the <see cref="T:Mapdigit.Drawing.Geometry.AreaIterator"/> class.
            </summary>
            <param name="curves">The curves.</param>
            <param name="at">At.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.AreaIterator.IsDone">
            <summary>
            Tests if the iteration is complete.
            </summary>
            <returns>
            	true if all the segments have
            been read; false otherwise.
            </returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.AreaIterator.Next">
            <summary>
            Moves the iterator to the next segment of the path forwards
            along the primary direction of traversal as long as there are
            more points in that direction.
            </summary>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.AreaIterator.CurrentSegment(System.Int32[])">
            <summary>
            Returns the coordinates and type of the current path segment in
            the iteration.
            The return value is the path-segment type:
            SegMoveto, SegLineto, SegQuadto, SegCubicto, or SegClose.
            A long array of length 6 must be passed in and can be used to
            store the coordinates of the point(s).
            Each point is stored as a pair of long x,y coordinates.
            SegMoveto and SegLineto types returns one point,
            SegQuadto returns two points,
            SegCubicto returns 3 points
            and SegClose does not return any points.
            </summary>
            <param name="coords">an array that holds the data returned from
            this method</param>
            <returns>
            the path-segment type of the current path segment
            </returns>
        </member>
        <member name="P:Mapdigit.Drawing.Geometry.AreaIterator.WindingRule">
            <summary>
            Returns the winding rule for determining the interior of the path.
            </summary>
            <returns>the winding rule</returns>
        </member>
        <member name="T:Mapdigit.Drawing.Geometry.AreaOp">
            <summary>
            Area operation 
            </summary>
        </member>
        <member name="T:Mapdigit.Drawing.Geometry.CubicCurve">
            <summary>
            A cubic parametric curve segment.
            </summary>
        </member>
        <member name="F:Mapdigit.Drawing.Geometry.CubicCurve.X1">
            <summary>
            The X coordinate of the start point
            of the cubic curve segment.
            </summary>
        </member>
        <member name="F:Mapdigit.Drawing.Geometry.CubicCurve.Y1">
            <summary>
            The Y coordinate of the start point
            of the cubic curve segment.
            </summary>
        </member>
        <member name="F:Mapdigit.Drawing.Geometry.CubicCurve.Ctrlx1">
            <summary>
            The X coordinate of the first control point
            of the cubic curve segment.
            </summary>
        </member>
        <member name="F:Mapdigit.Drawing.Geometry.CubicCurve.Ctrly1">
            <summary>
            
            The Y coordinate of the first control point
            of the cubic curve segment.
            </summary>
        </member>
        <member name="F:Mapdigit.Drawing.Geometry.CubicCurve.Ctrlx2">
            <summary>
            The X coordinate of the second control point
            of the cubic curve segment.
            </summary>
        </member>
        <member name="F:Mapdigit.Drawing.Geometry.CubicCurve.Ctrly2">
            <summary>
            The Y coordinate of the second control point
            of the cubic curve segment.
            </summary>
        </member>
        <member name="F:Mapdigit.Drawing.Geometry.CubicCurve.X2">
            <summary>
            The X coordinate of the end point
            of the cubic curve segment.
            </summary>
        </member>
        <member name="F:Mapdigit.Drawing.Geometry.CubicCurve.Y2">
            <summary>
            The Y coordinate of the end point
            of the cubic curve segment.
            </summary>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.CubicCurve.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mapdigit.Drawing.Geometry.CubicCurve"/> class.
            </summary>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.CubicCurve.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructs and initializes a CubicCurve from the specified double coordinates.
            </summary>
            <param name="x1">the X coordinate for the start point
                       of the resulting CubicCurve</param>
            <param name="y1">the Y coordinate for the start point
                       of the resulting CubicCurve</param>
            <param name="ctrlx1">the X coordinate for the first control point
                           of the resulting CubicCurve</param>
            <param name="ctrly1">the Y coordinate for the first control point
                           of the resulting CubicCurve</param>
            <param name="ctrlx2">the X coordinate for the second control point
                           of the resulting CubicCurve</param>
            <param name="ctrly2">the Y coordinate for the second control point
                           of the resulting CubicCurve</param>
            <param name="x2">the X coordinate for the end point
                       of the resulting CubicCurve</param>
            <param name="y2">the Y coordinate for the end point
                       of the resulting CubicCurve</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.CubicCurve.GetX1">
            <summary>
            Returns the X coordinate of the start point
            </summary>
            <returns>the X coordinate of the start point of the
                     CubicCurve.</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.CubicCurve.GetY1">
            <summary>
            Returns the Y coordinate of the start point.
            </summary>
            <returns>the Y coordinate of the start point of the
            the CubicCurve.</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.CubicCurve.GetP1">
            <summary>
            Returns the start point.
            </summary>
            <returns>a Point that is the start point of
                     the CubicCurve.</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.CubicCurve.GetCtrlX1">
            <summary>
            Returns the X coordinate of the first control point.
            </summary>
            <returns>the X coordinate of the first control point of the
                     CubicCurve.</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.CubicCurve.GetCtrlY1">
            <summary>
            Returns the Y coordinate of the first control point.
            </summary>
            <returns>the Y coordinate of the first control point of the
                     CubicCurve</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.CubicCurve.GetCtrlP1">
            <summary>
            Returns the first control point.
            </summary>
            <returns> a Point that is the first control point of
                    the CubicCurve.</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.CubicCurve.GetCtrlX2">
            <summary>
            Returns the X coordinate of the second control point.
            </summary>
            <returns>the X coordinate of the second control point of the
                     CubicCurve.</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.CubicCurve.GetCtrlY2">
            <summary>
            Returns the Y coordinate of the second control point.
            </summary>
            <returns>the Y coordinate of the second control point of the
                    CubicCurve.</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.CubicCurve.GetCtrlP2">
            <summary>
            Returns the second control point.
            </summary>
            <returns>a Point that is the second control point of
                    the CubicCurve.</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.CubicCurve.GetX2">
            <summary>
            Returns the X coordinate of the end point.
            </summary>
            <returns>the X coordinate of the end point of the
                    CubicCurve.</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.CubicCurve.GetY2">
            <summary>
            Returns the Y coordinate of the end point.
            </summary>
            <returns>the Y coordinate of the end point of the
                    CubicCurve.</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.CubicCurve.GetP2">
             <summary>
            Returns the end point.
             </summary>
             <returns> a Point that is the end point of
                     the CubicCurve.</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.CubicCurve.SetCurve(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Sets the location of the end points and control points of this curve
            to the specified double coordinates.
            </summary>
            <param name="x1">the X coordinate used to set the start point
                      of this CubicCurve</param>
            <param name="y1">the Y coordinate used to set the start point
                       of this CubicCurve</param>
            <param name="ctrlx1">the X coordinate used to set the first control point
                           of this CubicCurve</param>
            <param name="ctrly1">the Y coordinate used to set the first control point
                           of this CubicCurve</param>
            <param name="ctrlx2">the X coordinate used to set the second control point
                           of this CubicCurve</param>
            <param name="ctrly2">the Y coordinate used to set the second control point
                           of this CubicCurve</param>
            <param name="x2">the X coordinate used to set the end point
                       of this CubicCurve</param>
            <param name="y2">the Y coordinate used to set the end point
                       of this CubicCurve</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.CubicCurve.SetCurve(System.Double[],System.Int32)">
            <summary>
            Sets the location of the end points and control points of this curve
            to the double coordinates at the specified offset in the specified array.
            </summary>
            <param name="coords">a double array containing coordinates.</param>
            <param name="offset"> the index of coords from which to begin
                     setting the end points and control points of this curve
            	to the coordinates contained in coords</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.CubicCurve.SetCurve(Mapdigit.Drawing.Geometry.Point,Mapdigit.Drawing.Geometry.Point,Mapdigit.Drawing.Geometry.Point,Mapdigit.Drawing.Geometry.Point)">
            <summary>
             Sets the location of the end points and control points of this curve
             to the specified Point coordinates.
            </summary>
            <param name="p1">the first specified Point used to set the
            		start point of this curve.</param>
            <param name="cp1">the second specified Point used to set the
            		first control point of this curve</param>
            <param name="cp2">the third specified Point used to set the
            		second control point of this curve.</param>
            <param name="p2">the fourth specified Point used to set the
            		end point of this curve</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.CubicCurve.SetCurve(Mapdigit.Drawing.Geometry.Point[],System.Int32)">
            <summary>
            Sets the location of the end points and control points of this curve
            to the coordinates of the Point objects at the specified
            offset in the specified array.
            </summary>
            <param name="pts">an array of Point objects</param>
            <param name="offset">the index of pts from which to begin setting
                      the end points and control points of this curve to the
            	points contained in pts</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.CubicCurve.SetCurve(Mapdigit.Drawing.Geometry.CubicCurve)">
            <summary>
            Sets the location of the end points and control points of this curve
            to the same as those in the specified CubicCurve.
            </summary>
            <param name="c">the specified CubicCurve</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.CubicCurve.GetFlatnessSq(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the square of the flatness of the cubic curve specified
             by the indicated control points. 
            </summary>
            <remarks>
            The flatness is the maximum distance
            of a control point from the line connecting the end points.
            </remarks>
            <param name="x1">the X coordinate that specifies the start point
                       of a CubicCurve</param>
            <param name="y1">the Y coordinate that specifies the start point
                       of a CubicCurve</param>
            <param name="ctrlx1">the X coordinate that specifies the first control point
                           of a CubicCurve</param>
            <param name="ctrly1">the Y coordinate that specifies the first control point
                           of a CubicCurve.</param>
            <param name="ctrlx2"> the X coordinate that specifies the second control point
                           of a CubicCurve.</param>
            <param name="ctrly2">the Y coordinate that specifies the second control point
                           of a CubicCurve.</param>
            <param name="x2">the X coordinate that specifies the end point
                       of a CubicCurve.</param>
            <param name="y2">the Y coordinate that specifies the end point
                       of a CubicCurve</param>
            <returns>the square of the flatness of the CubicCurve
            		represented by the specified coordinates.</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.CubicCurve.GetFlatness(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the flatness of the cubic curve specified
            by the indicated control points. 
            </summary>
            <remarks>
            The flatness is the maximum distance
            of a control point from the line connecting the end points.
            </remarks>
            <param name="x1">the X coordinate that specifies the start point
                       of a CubicCurve</param>
            <param name="y1">the Y coordinate that specifies the start point
                       of a CubicCurve</param>
            <param name="ctrlx1">the X coordinate that specifies the first control point
                           of a CubicCurve</param>
            <param name="ctrly1">the Y coordinate that specifies the first control point
                           of a CubicCurve.</param>
            <param name="ctrlx2"> the X coordinate that specifies the second control point
                           of a CubicCurve.</param>
            <param name="ctrly2">the Y coordinate that specifies the second control point
                           of a CubicCurve.</param>
            <param name="x2">the X coordinate that specifies the end point
                       of a CubicCurve.</param>
            <param name="y2">the Y coordinate that specifies the end point
                       of a CubicCurve</param>
            <returns>the flatness of the CubicCurve
             represented by the specified coordinates.</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.CubicCurve.GetFlatnessSq(System.Int32[],System.Int32)">
            <summary>
            Returns the square of the flatness of the cubic curve specified
            by the control points stored in the indicated array at the
            indicated index. 
            </summary>
            <remarks>
            The flatness is the maximum distance
            of a control point from the line connecting the end points.
            </remarks>
            <param name="coords">an array containing coordinates.</param>
            <param name="offset">the index of coords from which to begin
                     getting the end points and control points of the curve.</param>
            <returns></returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.CubicCurve.GetFlatness(System.Int32[],System.Int32)">
            <summary>
            Returns the flatness of the cubic curve specified
            by the control points stored in the indicated array at the
            indicated index.  
            </summary>
            <remarks>
            The flatness is the maximum distance
            of a control point from the line connecting the end points.
            </remarks>
            <param name="coords">an array containing coordinates.</param>
            <param name="offset">the index of coords from which to begin
                      getting the end points and control points of the curve</param>
            <returns>the flatness of the CubicCurve
            	specified by the coordinates in coords at
            	the specified offset.</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.CubicCurve.GetFlatnessSq">
            <summary>
            Returns the square of the flatness of this curve.  The flatness is the
            maximum distance of a control point from the line connecting the
            end points.
            </summary>
            <returns>the square of the flatness of this curve.</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.CubicCurve.GetFlatness">
            <summary>
            Returns the flatness of this curve.  The flatness is the
            maximum distance of a control point from the line connecting the
            end points.
            </summary>
            <returns>the flatness of this curve</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.CubicCurve.Subdivide(Mapdigit.Drawing.Geometry.CubicCurve,Mapdigit.Drawing.Geometry.CubicCurve)">
            <summary>
            Subdivides this cubic curve and stores the resulting two
            subdivided curves into the left and right curve parameters.
            </summary>
            <remarks>
            Either or both of the left and right objects may be the same
            as this object or null.
            </remarks>
            <param name="left">left the cubic curve object for storing for the left or
            first half of the subdivided curve</param>
            <param name="right">right the cubic curve object for storing for the right or
            second half of the subdivided curve</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.CubicCurve.Subdivide(Mapdigit.Drawing.Geometry.CubicCurve,Mapdigit.Drawing.Geometry.CubicCurve,Mapdigit.Drawing.Geometry.CubicCurve)">
            <summary>
            Subdivides the cubic curve specified by the src parameter
            and stores the resulting two subdivided curves into the
            left and right curve parameters.
            </summary>
            <remarks>
            Either or both of the left and right objects
            may be the same as the src object or null.
            </remarks>
            <param name="src">the cubic curve to be subdivided.</param>
            <param name="left">the cubic curve object for storing the left or
            first half of the subdivided curve</param>
            <param name="right"> the cubic curve object for storing the right or
            second half of the subdivided curve.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.CubicCurve.Subdivide(System.Double[],System.Int32,System.Double[],System.Int32,System.Double[],System.Int32)">
            <summary>
            Subdivides the cubic curve specified by the coordinates
            stored in the src array at indices srcoff
            through (srcoff+7) and stores the
            resulting two subdivided curves into the two result arrays at the
            corresponding indices.
            </summary>
            <remarks>
            Either or both of the left and right
            arrays may be null or a reference to the same array
            as the src array.
            remember that the last point in the first subdivided curve is the
            same as the first point in the second subdivided curve. Thus,
            it is possible to pass the same array for left
            and right and to use offsets, such as rightoff
            equals (leftoff + 6), in order
            to avoid allocating extra storage for this common point.
            </remarks>
            <param name="src">the array holding the coordinates for the source curve.</param>
            <param name="srcoff">the offset into the array of the beginning of the
            the 6 source coordinates</param>
            <param name="left">the array for storing the coordinates for the first
            half of the subdivided curve.</param>
            <param name="leftoff"> the offset into the array of the beginning of the
            the 6 left coordinates.</param>
            <param name="right">the array for storing the coordinates for the second
             half of the subdivided curve.</param>
            <param name="rightoff">the offset into the array of the beginning of the
            the 6 right coordinates.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.CubicCurve.SolveCubic(System.Double[])">
            <summary>
            Solves the cubic whose coefficients are in the eqn
            array and places the non-complex roots back into the same array,
            returning the number of roots.  
            </summary>
            <remarks>
            The solved cubic is represented
            by the equation:
            <pre>
                eqn = {c, b, a, d}
                dx^3 + ax^2 + bx + c = 0
            </pre>
            A return value of -1 is used to distinguish a constant equation
            that might be always 0 or never 0 from an equation that has no
            zeroes.
            </remarks>
            <param name="eqn">an array containing coefficients for a cubic</param>
            <returns>the number of roots, or -1 if the equation is a constant.</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.CubicCurve.SolveCubic(System.Double[],System.Double[])">
            <summary>
            Solve the cubic whose coefficients are in the eqn
            array and place the non-complex roots into the res
            array, returning the number of roots.
            </summary>
            <remarks>
            The cubic solved is represented by the equation:
                eqn = {c, b, a, d}
                dx^3 + ax^2 + bx + c = 0
            A return value of -1 is used to distinguish a constant equation,
            which may be always 0 or never 0, from an equation which has no
            zeroes.
            </remarks>
            <param name="eqn">the specified array of coefficients to use to solve
                    the cubic equation</param>
            <param name="res">Tthe array that contains the non-complex roots
                   resulting from the solution of the cubic equation</param>
            <returns>the number of roots, or -1 if the equation is a constant</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.CubicCurve.Contains(System.Int32,System.Int32)">
            <summary>
            Tests if the specified coordinates are inside the boundary of the
            IShape.
            </summary>
            <param name="x">the specified X coordinate to be tested</param>
            <param name="y">the specified Y coordinate to be tested.</param>
            <returns>
            	true if the specified coordinates are inside
            the IShape boundary; false
            otherwise.
            </returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.CubicCurve.Contains(Mapdigit.Drawing.Geometry.Point)">
            <summary>
            Tests if a specified Point is inside the boundary
            of the IShape.
            </summary>
            <param name="p">the specified Point to be tested</param>
            <returns>
            	true if the specified Point is
            inside the boundary of the IShape;
            false otherwise.
            </returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.CubicCurve.Intersects(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Tests if the interior of the IShape intersects the
            interior of a specified rectangular area.
            </summary>
            <remarks>
            The rectangular area is considered to intersect the IShape
            if any point is contained in both the interior of the
            IShape and the specified rectangular area.
            The IShape.intersects() method allows a IShape
            implementation to conservatively return true when:
            <ul>
            		<li>
            there is a high probability that the rectangular area and the
            IShape intersect, but
            </li>
            the calculations to accurately determine this intersection
            are prohibitively expensive.
            </ul>
            This means that for some Shapes this method might
            return true even though the rectangular area does not
            intersect the IShape.
            The com.mapdigit.drawing.geometry.Area class performs
            more accurate computations of geometric intersection than most
            IShape objects and therefore can be used if a more precise
            answer is required.
            </remarks>
            <param name="x">the X coordinate of the upper-left corner
            of the specified rectangular area</param>
            <param name="y">the Y coordinate of the upper-left corner
            of the specified rectangular area</param>
            <param name="w">Tthe width of the specified rectangular area</param>
            <param name="h">the height of the specified rectangular area</param>
            <returns>
            	true if the interior of the IShape and
            the interior of the rectangular area intersect, or are
            both highly likely to intersect and intersection calculations
            would be too expensive to perform; false
            </returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.CubicCurve.Intersects(Mapdigit.Drawing.Geometry.Rectangle)">
            <summary>
            Tests if the interior of the IShape intersects the
            interior of a specified Rectangle.
            </summary>
            <remarks>
            The IShape.intersects() method allows a IShape
            implementation to conservatively return true when:
            <ul>
            		<li>
            there is a high probability that the Rectangle and the
            IShape intersect, but
            </li>
            the calculations to accurately determine this intersection
            are prohibitively expensive.
            </ul>
            This means that for some Shapes this method might
            return true even though the Rectangle does not
            intersect the IShape.
            The com.mapdigit.drawing.geometry.Area class performs
            more accurate computations of geometric intersection than most
            IShape objects and therefore can be used if a more precise
            answer is required.
            </remarks>
            <param name="r">r the specified Rectangle.</param>
            <returns>
            	true if the interior of the IShape and
            the interior of the specified Rectangle
            intersect, or are both highly likely to intersect and intersection
            calculations would be too expensive to perform; false
            otherwise.
            </returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.CubicCurve.Contains(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Tests if the interior of the IShape entirely contains
            the specified rectangular area. 
            </summary>
            <remarks>
             All coordinates that lie inside
            the rectangular area must lie within the IShape for the
            entire rectanglar area to be considered contained within the
            IShape.
            The IShape.contains() method allows a IShape
            implementation to conservatively return false when:
            <ul>
            		<li>
            the intersect method returns true and
            </li>
            the calculations to determine whether or not the
            IShape entirely contains the rectangular area are
            prohibitively expensive.
            </ul>
            This means that for some Shapes this method might
            return false even though the IShape contains
            the rectangular area.
            The com.mapdigit.drawing.geometry.Area class performs
            more accurate geometric computations than most
            IShape objects and therefore can be used if a more precise
            answer is required.
            </remarks>
            <param name="x">X coordinate of the upper-left corner
            of the specified rectangular area</param>
            <param name="y">the Y coordinate of the upper-left corner
            of the specified rectangular area</param>
            <param name="w">Tthe width of the specified rectangular area.</param>
            <param name="h">the height of the specified rectangular area.</param>
            <returns>
            	true if the interior of the IShape
            entirely contains the specified rectangular area;
            false otherwise or, if the IShape
            contains the rectangular area and the
            intersects method returns true
            and the containment calculations would be too expensive to
            perform.
            </returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.CubicCurve.Contains(Mapdigit.Drawing.Geometry.Rectangle)">
            <summary>
            Tests if the interior of the IShape entirely contains the
            specified Rectangle.
            </summary>
            <remarks>
            The IShape.contains() method allows a IShape
            implementation to conservatively return false when:
            <ul>
            		<li>
            the intersect method returns true and
            </li>
            the calculations to determine whether or not the
            IShape entirely contains the Rectangle
            are prohibitively expensive.
            </ul>
            This means that for some Shapes this method might
            return false even though the IShape contains
            the Rectangle.
            The com.mapdigit.drawing.geometry.Area class performs
            more accurate geometric computations than most
            IShape objects and therefore can be used if a more precise
            answer is required.
            </remarks>
            <param name="r">The specified Rectangle</param>
            <returns>
            	true if the interior of the IShape
            entirely contains the Rectangle;
            false otherwise or, if the IShape
            contains the Rectangle and the
            intersects method returns true
            and the containment calculations would be too expensive to
            perform.
            </returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.CubicCurve.GetPathIterator(Mapdigit.Drawing.Geometry.AffineTransform)">
            <summary>
            Returns an iterator object that iterates along the
            IShape boundary and provides access to the geometry of the
            IShape outline.  
            </summary>
            <remarks>
            If an optional AffineTransform
            is specified, the coordinates returned in the iteration are
            transformed accordingly.
            Each call to this method returns a fresh IPathIterator
            object that traverses the geometry of the IShape object
            independently from any other IPathIterator objects in use
            at the same time.
            It is recommended, but not guaranteed, that objects
            implementing the IShape interface isolate iterations
            that are in process from any changes that might occur to the original
            object's geometry during such iterations.
            </remarks>
            <param name="at">an optional AffineTransform to be applied to the
            coordinates as they are returned in the iteration, or
            null if untransformed coordinates are desired</param>
            <returns>
            a new IPathIterator object, which independently
            traverses the geometry of the IShape.
            </returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.CubicCurve.GetPathIterator(Mapdigit.Drawing.Geometry.AffineTransform,System.Int32)">
            <summary>
            Returns an iterator object that iterates along the IShape
            boundary and provides access to a flattened view of the
            IShape outline geometry.
            </summary>
            <remarks>
            Only SegMoveto, SegLineto, and SegClose point types are
            returned by the iterator.
            If an optional AffineTransform is specified,
            the coordinates returned in the iteration are transformed
            accordingly.
            The amount of subdivision of the curved segments is controlled
            by the flatness parameter, which specifies the
            maximum distance that any point on the unflattened transformed
            curve can deviate from the returned flattened path segments.
            remember that a limit on the accuracy of the flattened path might be
            silently imposed, causing very small flattening parameters to be
            treated as larger values.  This limit, if there is one, is
            defined by the particular implementation that is used.
            Each call to this method returns a fresh IPathIterator
            object that traverses the IShape object geometry
            independently from any other IPathIterator objects in use at
            the same time.
            It is recommended, but not guaranteed, that objects
            implementing the IShape interface isolate iterations
            that are in process from any changes that might occur to the original
            object's geometry during such iterations.
            </remarks>
            <param name="at">an optional AffineTransform to be applied to the
            coordinates as they are returned in the iteration, or
            null if untransformed coordinates are desired</param>
            <param name="flatness">the maximum distance that the line segments used to
            approximate the curved segments are allowed to deviate
            from any point on the original curve</param>
            <returns>
            a new IPathIterator that independently traverses
            a flattened view of the geometry of the  IShape.
            </returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.CubicCurve.FixRoots(System.Double[],System.Double[])">
             <summary>
             This pruning step is necessary since solveCubic uses the
             cosine function to calculate the roots when there are 3
             of them.  Since the cosine method can have an error of
             +/- 1E-14 we need to make sure that we don't make any
             bad decisions due to an error.
            
             If the root is not near one of the endpoints, then we will
             only have a slight inaccuracy in calculating the x intercept
             which will only cause a slightly wrong answer for some
             points very close to the curve.  While the results in that
             case are not as accurate as they could be, they are not
             disastrously inaccurate either.
            
             On the other hand, if the error happens near one end of
             the curve, then our processing to reject values outside
             of the t=[0,1] range will fail and the results of that
             failure will be disastrous since for an entire horizontal
             range of test points, we will either overcount or undercount
             the crossings and get a wrong answer for all of them, even
             when they are clearly and obviously inside or outside the
             curve.
            
             To work around this problem, we try a couple of Newton-Raphson
             iterations to see if the true root is closer to the endpoint
             or further away.  If it is further away, then we can stop
             since we know we are on the right side of the endpoint.  If
             we change direction, then either we are now being dragged away
             from the endpoint in which case the first condition will cause
             us to stop, or we have passed the endpoint and are headed back.
             In the second case, we simply evaluate the slope at the
             endpoint itself and place ourselves on the appropriate side
             of it or on it depending on that result.
             </summary>
             <param name="res">The res.</param>
             <param name="eqn">The eqn.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.CubicCurve.FillEqn(System.Double[],System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Fill an array with the coefficients of the parametric equation
            in t, ready for solving against val with solveCubic.
            We currently have:
            <pre>
              val = P(t) = C1(1-t)^3 + 3CP1 t(1-t)^2 + 3CP2 t^2(1-t) + C2 t^3
                         = C1 - 3C1t + 3C1t^2 - C1t^3 +
                           3CP1t - 6CP1t^2 + 3CP1t^3 +
                           3CP2t^2 - 3CP2t^3 +
                           C2t^3
                       0 = (C1 - val) +
                           (3CP1 - 3C1) t +
                           (3C1 - 6CP1 + 3CP2) t^2 +
                           (C2 - 3CP2 + 3CP1 - C1) t^3
                       0 = C + Bt + At^2 + Dt^3
                C = C1 - val
                B = 3///CP1 - 3///C1
                A = 3///CP2 - 6///CP1 + 3///C1
                D = C2 - 3///CP2 + 3///CP1 - C1
            </pre>
            </summary>
            <param name="eqn">The eqn.</param>
            <param name="val">The val.</param>
            <param name="c1">The c1.</param>
            <param name="cp1">The CP1.</param>
            <param name="cp2">The CP2.</param>
            <param name="c2">The c2.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.CubicCurve.EvalCubic(System.Double[],System.Int32,System.Boolean,System.Boolean,System.Double[],System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Evaluate the t values in the first num slots of the vals[] array
            and place the evaluated values back into the same array.  Only
            evaluate t values that are within the range [0, 1], including
            the 0 and 1 ends of the range iff the include0 or include1
            booleans are true.  If an "inflection" equation is handed in,
            then any points which represent a point of inflection for that
            cubic equation are also ignored.
            </summary>
            <param name="vals">The vals.</param>
            <param name="num">The num.</param>
            <param name="include0">if set to true [include0].</param>
            <param name="include1">if set to true [include1].</param>
            <param name="inflect">The inflect.</param>
            <param name="c1">The c1.</param>
            <param name="cp1">The CP1.</param>
            <param name="cp2">The CP2.</param>
            <param name="c2">The c2.</param>
            <returns></returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.CubicCurve.GetTag(System.Double,System.Double,System.Double)">
            <summary>
            Determine where coord lies with respect to the range from
            low to high.  It is assumed that low is less than high.  The return
            value is one of the 5 values BELOW, LOWEDGE, INSIDE, HIGHEDGE,
            or ABOVE.
            </summary>
            <param name="coord">The coord.</param>
            <param name="low">The low.</param>
            <param name="high">The high.</param>
            <returns></returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.CubicCurve.Inwards(System.Int32,System.Int32,System.Int32)">
            <summary>
            Determine if the pttag represents a coordinate that is already
            in its test range, or is on the border with either of the two
            opttags representing another coordinate that is "towards the
            inside" of that test range.  In other words, are either of the
            two "opt" points "drawing the pt inward"?
            </summary>
            <param name="pttag">The pttag.</param>
            <param name="opt1Tag">The opt1 tag.</param>
            <param name="opt2Tag">The opt2 tag.</param>
            <returns></returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.CubicCurve.SolveEqn(System.Double[],System.Int32,System.Double)">
            <summary>
            Solves the eqn.
            </summary>
            <param name="eqn">The eqn.</param>
            <param name="order">The order.</param>
            <param name="t">The t.</param>
            <returns></returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.CubicCurve.FindZero(System.Double,System.Double,System.Double[])">
            <summary>
            Finds the zero.
            </summary>
            <param name="t">The t.</param>
            <param name="target">The target.</param>
            <param name="eqn">The eqn.</param>
            <returns></returns>
        </member>
        <member name="P:Mapdigit.Drawing.Geometry.CubicCurve.Bounds">
            <summary>
            Returns an integer Rectangle that completely encloses the
            IShape.  
            </summary>
            <remarks>
            remmeber that there is no guarantee that the
            returned Rectangle is the smallest bounding box that
            encloses the IShape, only that the IShape
            lies entirely within the indicated  Rectangle.  The
            returned Rectangle might also fail to completely
            enclose the IShape if the IShape overflows
            the limited range of the integer data type.  The
            getBounds method generally returns a
            tighter bounding box due to its greater flexibility in
            representation.
            </remarks>
            <returns>
            an integer Rectangle that completely encloses
            the IShape.
            </returns>
        </member>
        <member name="T:Mapdigit.Drawing.Geometry.CubicIterator">
            <summary>
            A utility class to iterate over the path segments of a cubic curve
            segment through the IPathIterator interface.
            </summary>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.CubicIterator.#ctor(Mapdigit.Drawing.Geometry.CubicCurve,Mapdigit.Drawing.Geometry.AffineTransform)">
            <summary>
            Initializes a new instance of the <see cref="T:Mapdigit.Drawing.Geometry.CubicIterator"/> class.
            </summary>
            <param name="q">The q.</param>
            <param name="at">At.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.CubicIterator.IsDone">
            <summary>
            Tests if the iteration is complete.
            </summary>
            <returns>
            	true if all the segments have
            been read; false otherwise.
            </returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.CubicIterator.Next">
            <summary>
            Moves the iterator to the next segment of the path forwards
            along the primary direction of traversal as long as there are
            more points in that direction.
            </summary>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.CubicIterator.CurrentSegment(System.Int32[])">
            <summary>
            Returns the coordinates and type of the current path segment in
            the iteration.
            The return value is the path-segment type:
            SegMoveto, SegLineto, SegQuadto, SegCubicto, or SegClose.
            A long array of length 6 must be passed in and can be used to
            store the coordinates of the point(s).
            Each point is stored as a pair of long x,y coordinates.
            SegMoveto and SegLineto types returns one point,
            SegQuadto returns two points,
            SegCubicto returns 3 points
            and SegClose does not return any points.
            </summary>
            <param name="coords">an array that holds the data returned from
            this method</param>
            <returns>
            the path-segment type of the current path segment
            </returns>
        </member>
        <member name="P:Mapdigit.Drawing.Geometry.CubicIterator.WindingRule">
            <summary>
            Returns the winding rule for determining the interior of the path.
            </summary>
            <returns>the winding rule</returns>
        </member>
        <member name="T:Mapdigit.Drawing.Geometry.Curve">
            <summary>
            base curve class.
            </summary>
        </member>
        <member name="F:Mapdigit.Drawing.Geometry.Curve.RectIntersects">
             The rectangle intersection test counts the number of times
             that the path crosses through the shadow that the rectangle
             projects to the right towards (x => +Infinity).
            
             During processing of the path it actually counts every time
             the path crosses either or both of the top and bottom edges
             of that shadow.  If the path enters from the top, the count
             is incremented.  If it then exits back through the top, the
             same way it came in, the count is decremented and there is
             no impact on the winding count.  If, instead, the path exits
             out the bottom, then the count is incremented again and a
             full pass through the shadow is indicated by the winding count
             having been incremented by 2.
            
             Thus, the winding count that it accumulates is actually double
             the real winding count.  Since the path is continuous, the
             final answer should be a multiple of 2, otherwise there is a
             logic error somewhere.
            
             If the path ever has a direct hit on the rectangle, then a
             special Value is returned.  This special Value terminates
             all ongoing accumulation on up through the call chain and
             ends up getting returned to the calling function which can
             then produce an answer directly.  For intersection tests,
             the answer is always "true" if the path intersects the
             rectangle.  For containment tests, the answer is always
             "false" if the path intersects the rectangle.  Thus, no
             further processing is ever needed if an intersection occurs.
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Curve.InsertMove(System.Collections.ArrayList,System.Double,System.Double)">
            <summary>
            Inserts the move.
            </summary>
            <param name="curves">The curves.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Curve.InsertLine(System.Collections.ArrayList,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Inserts the line.
            </summary>
            <param name="curves">The curves.</param>
            <param name="x0">The x0.</param>
            <param name="y0">The y0.</param>
            <param name="x1">The x1.</param>
            <param name="y1">The y1.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Curve.InsertQuad(System.Collections.ArrayList,System.Double,System.Double,System.Double[])">
            <summary>
            Inserts the quad.
            </summary>
            <param name="curves">The curves.</param>
            <param name="x0">The x0.</param>
            <param name="y0">The y0.</param>
            <param name="coords">The coords.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Curve.InsertCubic(System.Collections.ArrayList,System.Double,System.Double,System.Double[])">
            <summary>
            Inserts the cubic.
            </summary>
            <param name="curves">The curves.</param>
            <param name="x0">The x0.</param>
            <param name="y0">The y0.</param>
            <param name="coords">The coords.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Curve.PointCrossingsForPath(Mapdigit.Drawing.Geometry.PathIterator,System.Double,System.Double)">
            <summary>
            Calculates the number of times the given path
            crosses the ray extending to the right from (px,py).
            If the point lies on a part of the path,
            then no crossings are counted for that intersection.
            +1 is added for each crossing where the Y coordinate is increasing
            -1 is added for each crossing where the Y coordinate is decreasing
            The return value is the sum of all crossings for every segment in
            the path.
            The path must start with a SegMoveto, otherwise an exception is
            thrown.
            The caller must check p[xy] for NaN values.
            The caller may also reject infinite p[xy] values as well.
            </summary>
            <param name="pi">The pi.</param>
            <param name="px">The px.</param>
            <param name="py">The py.</param>
            <returns></returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Curve.PointCrossingsForLine(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculates the number of times the line from (x0,y0) to (x1,y1)
            crosses the ray extending to the right from (px,py).
            If the point lies on the line, then no crossings are recorded.
            +1 is returned for a crossing where the Y coordinate is increasing
            -1 is returned for a crossing where the Y coordinate is decreasing
            </summary>
            <param name="px">The px.</param>
            <param name="py">The py.</param>
            <param name="x0">The x0.</param>
            <param name="y0">The y0.</param>
            <param name="x1">The x1.</param>
            <param name="y1">The y1.</param>
            <returns></returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Curve.PointCrossingsForQuad(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Calculates the number of times the quad from (x0,y0) to (x1,y1)
            crosses the ray extending to the right from (px,py).
            If the point lies on a part of the curve,
            then no crossings are counted for that intersection.
            the level parameter should be 0 at the top-level call and will count
            up for each recursion level to prevent infinite recursion
            +1 is added for each crossing where the Y coordinate is increasing
            -1 is added for each crossing where the Y coordinate is decreasing
            </summary>
            <param name="px">The px.</param>
            <param name="py">The py.</param>
            <param name="x0">The x0.</param>
            <param name="y0">The y0.</param>
            <param name="xc">The xc.</param>
            <param name="yc">The yc.</param>
            <param name="x1">The x1.</param>
            <param name="y1">The y1.</param>
            <param name="level">The level.</param>
            <returns></returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Curve.PointCrossingsForCubic(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Calculates the number of times the cubic from (x0,y0) to (x1,y1)
            crosses the ray extending to the right from (px,py).
            If the point lies on a part of the curve,
            then no crossings are counted for that intersection.
            the level parameter should be 0 at the top-level call and will count
            up for each recursion level to prevent infinite recursion
            +1 is added for each crossing where the Y coordinate is increasing
            -1 is added for each crossing where the Y coordinate is decreasing
            </summary>
            <param name="px">The px.</param>
            <param name="py">The py.</param>
            <param name="x0">The x0.</param>
            <param name="y0">The y0.</param>
            <param name="xc0">The XC0.</param>
            <param name="yc0">The yc0.</param>
            <param name="xc1">The XC1.</param>
            <param name="yc1">The yc1.</param>
            <param name="x1">The x1.</param>
            <param name="y1">The y1.</param>
            <param name="level">The level.</param>
            <returns></returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Curve.RectCrossingsForPath(Mapdigit.Drawing.Geometry.PathIterator,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Accumulate the number of times the path crosses the shadow
            extending to the right of the rectangle.  See the comment
            for the RECT_INTERSECTS constant for more complete details.
            The return value is the sum of all crossings for both the
            top and bottom of the shadow for every segment in the path,
            or the special value RECT_INTERSECTS if the path ever enters
            the interior of the rectangle.
            The path must start with a SegMoveto, otherwise an exception is
            thrown.
            The caller must check r[xy]{min,max} for NaN values.
            </summary>
            <param name="pi">The pi.</param>
            <param name="rxmin">The rxmin.</param>
            <param name="rymin">The rymin.</param>
            <param name="rxmax">The rxmax.</param>
            <param name="rymax">The rymax.</param>
            <returns></returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Curve.RectCrossingsForLine(System.Int32,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Accumulate the number of times the line crosses the shadow
            extending to the right of the rectangle.  See the comment
            for the RECT_INTERSECTS constant for more complete details.
            </summary>
            <param name="crossings">The crossings.</param>
            <param name="rxmin">The rxmin.</param>
            <param name="rymin">The rymin.</param>
            <param name="rxmax">The rxmax.</param>
            <param name="rymax">The rymax.</param>
            <param name="x0">The x0.</param>
            <param name="y0">The y0.</param>
            <param name="x1">The x1.</param>
            <param name="y1">The y1.</param>
            <returns></returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Curve.RectCrossingsForQuad(System.Int32,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Accumulate the number of times the quad crosses the shadow
            extending to the right of the rectangle.  See the comment
            for the RECT_INTERSECTS constant for more complete details.
            </summary>
            <param name="crossings">The crossings.</param>
            <param name="rxmin">The rxmin.</param>
            <param name="rymin">The rymin.</param>
            <param name="rxmax">The rxmax.</param>
            <param name="rymax">The rymax.</param>
            <param name="x0">The x0.</param>
            <param name="y0">The y0.</param>
            <param name="xc">The xc.</param>
            <param name="yc">The yc.</param>
            <param name="x1">The x1.</param>
            <param name="y1">The y1.</param>
            <param name="level">The level.</param>
            <returns></returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Curve.RectCrossingsForCubic(System.Int32,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Accumulate the number of times the cubic crosses the shadow
            extending to the right of the rectangle.  See the comment
            for the RECT_INTERSECTS constant for more complete details.
            </summary>
            <param name="crossings">The crossings.</param>
            <param name="rxmin">The rxmin.</param>
            <param name="rymin">The rymin.</param>
            <param name="rxmax">The rxmax.</param>
            <param name="rymax">The rymax.</param>
            <param name="x0">The x0.</param>
            <param name="y0">The y0.</param>
            <param name="xc0">The XC0.</param>
            <param name="yc0">The yc0.</param>
            <param name="xc1">The XC1.</param>
            <param name="yc1">The yc1.</param>
            <param name="x1">The x1.</param>
            <param name="y1">The y1.</param>
            <param name="level">The level.</param>
            <returns></returns>
        </member>
        <member name="T:Mapdigit.Drawing.Geometry.Dimension">
            <summary>
            The Dimension class encapsulates the width and
            height of a component (in integer) in a single object.
            </summary>
            <remarks>
            The class is
            associated with certain properties of components. Several methods
            defined by the Component class and the
            LayoutManager interface return a
            Dimension object.
            
            Normally the values of width
            and height are non-negative integers.
            The constructors that allow you to create a dimension do
            not prevent you from setting a negative value for these properties.
            If the value of width or height is
            negative, the behavior of some methods defined by other objects is
            undefined.
            </remarks>
        </member>
        <member name="F:Mapdigit.Drawing.Geometry.Dimension.Width">
            <summary>
            The width dimension; negative values can be used.
            </summary>
        </member>
        <member name="F:Mapdigit.Drawing.Geometry.Dimension.Height">
            <summary>
            The height dimension; negative values can be used.
            </summary>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Dimension.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mapdigit.Drawing.Geometry.Dimension"/> class.
            </summary>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Dimension.#ctor(Mapdigit.Drawing.Geometry.Dimension)">
            <summary>
            Creates an instance of Dimension whose width
            and height are the same as for the specified dimension.
            </summary>
            <param name="d">d   the specified dimension for the
                           width and
                           height values.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Dimension.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructs a Dimension and initializes
            it to the specified width and specified height.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Dimension.SetSize(System.Int32,System.Int32)">
            <summary>
            Sets the size of this Dimension object to
            the specified width and height in int precision.
            rem that if width or height
            are larger than Integer.MAX_VALUE, they will
            be reset to Integer.MAX_VALUE.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Dimension.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            	true if the specified <see cref="T:System.Object"/> is equal
             to this instance; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
            </exception>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Dimension.GetHashCode">
            <summary>
            Returns a hash c for this instance.
            </summary>
            <returns>
            A hash c for this instance, suitable for use in hashing algorithms
             and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Dimension.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Mapdigit.Drawing.Geometry.Dimension.Size">
            <summary>
            the size of this Dimension object.
            This method is included for completeness, to parallel the
            getSize method defined by Component.
            </summary>
        </member>
        <member name="T:Mapdigit.Drawing.Geometry.Ellipse">
            <summary>
             The Ellipse class defines an ellipse.
            </summary>
        </member>
        <member name="F:Mapdigit.Drawing.Geometry.Ellipse.X">
            <summary>
            The X coordinate of the upper-left corner of the
            framing rectangle of this Ellipse.
            </summary>
        </member>
        <member name="F:Mapdigit.Drawing.Geometry.Ellipse.Y">
            <summary>
            The Y coordinate of the upper-left corner of the
            framing rectangle of this Ellipse.
            </summary>
        </member>
        <member name="F:Mapdigit.Drawing.Geometry.Ellipse.Width">
            <summary>
            The overall width of this Ellipse.
            </summary>
        </member>
        <member name="F:Mapdigit.Drawing.Geometry.Ellipse.Height">
            <summary>
            The overall height of the Ellipse.
            </summary>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Ellipse.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mapdigit.Drawing.Geometry.Ellipse"/> class.
            </summary>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Ellipse.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructs and initializes an Ellipse from the
            specified coordinates.
            </summary>
            <param name="x">the X coordinate of the upper-left corner
                    of the framing rectangle.</param>
            <param name="y">the Y coordinate of the upper-left corner
                    of the framing rectangle</param>
            <param name="w">the width of the framing rectangle.</param>
            <param name="h">the height of the framing rectangle.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Ellipse.IsEmpty">
            <summary>
            Determines whether the RectangularShape is empty.
            When the RectangularShape is empty, it encloses no
            area.
            </summary>
            <returns>
            	true if this instance is empty; otherwise, false.
            </returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Ellipse.SetFrame(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the location and size of the framing rectangle of this
            IShape to the specified rectangular values.
            </summary>
            <param name="x">the X coordinate of the upper-left corner of the
            specified rectangular shape</param>
            <param name="y">the Y coordinate of the upper-left corner of the
            specified rectangular shape</param>
            <param name="w">the width of the specified rectangular shape</param>
            <param name="h">the height of the specified rectangular shape</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Ellipse.Contains(System.Int32,System.Int32)">
            <summary>
            Tests if the specified coordinates are inside the boundary of the
            IShape.
            </summary>
            <param name="x">the specified X coordinate to be tested</param>
            <param name="y">the specified Y coordinate to be tested.</param>
            <returns>
            	true if the specified coordinates are inside
            the IShape boundary; false
            otherwise.
            </returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Ellipse.Intersects(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Tests if the interior of the IShape intersects the
            interior of a specified rectangular area.
            </summary>
            <remarks>
            The rectangular area is considered to intersect the IShape
            if any point is contained in both the interior of the
            IShape and the specified rectangular area.
            The IShape.intersects() method allows a IShape
            implementation to conservatively return true when:
            <ul>
            		<li>
            there is a high probability that the rectangular area and the
            IShape intersect, but
            </li>
            the calculations to accurately determine this intersection
            are prohibitively expensive.
            </ul>
            This means that for some Shapes this method might
            return true even though the rectangular area does not
            intersect the IShape.
            The com.mapdigit.drawing.geometry.Area class performs
            more accurate computations of geometric intersection than most
            IShape objects and therefore can be used if a more precise
            answer is required.
            </remarks>
            <param name="x">the X coordinate of the upper-left corner
            of the specified rectangular area</param>
            <param name="y">the Y coordinate of the upper-left corner
            of the specified rectangular area</param>
            <param name="w">Tthe width of the specified rectangular area</param>
            <param name="h">the height of the specified rectangular area</param>
            <returns>
            	true if the interior of the IShape and
            the interior of the rectangular area intersect, or are
            both highly likely to intersect and intersection calculations
            would be too expensive to perform; false
            </returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Ellipse.Contains(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Tests if the interior of the IShape entirely contains
            the specified rectangular area.  
            </summary>
            <remarks>
            All coordinates that lie inside
            the rectangular area must lie within the IShape for the
            entire rectanglar area to be considered contained within the
            IShape.
            The IShape.contains() method allows a IShape
            implementation to conservatively return false when:
            <ul>
            		<li>
            the intersect method returns true and
            </li>
            the calculations to determine whether or not the
            IShape entirely contains the rectangular area are
            prohibitively expensive.
            </ul>
            This means that for some Shapes this method might
            return false even though the IShape contains
            the rectangular area.
            The com.mapdigit.drawing.geometry.Area class performs
            more accurate geometric computations than most
            IShape objects and therefore can be used if a more precise
            answer is required.
            </remarks>
            <param name="x">X coordinate of the upper-left corner
            of the specified rectangular area</param>
            <param name="y">the Y coordinate of the upper-left corner
            of the specified rectangular area</param>
            <param name="w">Tthe width of the specified rectangular area.</param>
            <param name="h">the height of the specified rectangular area.</param>
            <returns>
            	true if the interior of the IShape
            entirely contains the specified rectangular area;
            false otherwise or, if the IShape
            contains the rectangular area and the
            intersects method returns true
            and the containment calculations would be too expensive to
            perform.
            </returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Ellipse.GetPathIterator(Mapdigit.Drawing.Geometry.AffineTransform)">
            <summary>
            Returns an iterator object that iterates along the
            IShape boundary and provides access to the geometry of the
            IShape outline. 
            </summary>
            <remarks>
             If an optional AffineTransform
            is specified, the coordinates returned in the iteration are
            transformed accordingly.
            Each call to this method returns a fresh IPathIterator
            object that traverses the geometry of the IShape object
            independently from any other IPathIterator objects in use
            at the same time.
            It is recommended, but not guaranteed, that objects
            implementing the IShape interface isolate iterations
            that are in process from any changes that might occur to the original
            object's geometry during such iterations.
            </remarks>
            <param name="at">an optional AffineTransform to be applied to the
            coordinates as they are returned in the iteration, or
            null if untransformed coordinates are desired</param>
            <returns>
            a new IPathIterator object, which independently
            traverses the geometry of the IShape.
            </returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Ellipse.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms 
            and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Ellipse.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            	true if the specified <see cref="T:System.Object"/> is equal
             to this instance; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
            </exception>
        </member>
        <member name="P:Mapdigit.Drawing.Geometry.Ellipse.IntX">
            <summary>
            Returns the X coordinate of the upper-left corner of
            the framing rectangle.
            </summary>
            <returns>
            the X coordinate of the upper-left corner of
            the framing rectangle.
            </returns>
        </member>
        <member name="P:Mapdigit.Drawing.Geometry.Ellipse.IntY">
            <summary>
            Returns the Y coordinate of the upper-left corner of
            the framing rectangle .
            </summary>
            <returns>
            the Y coordinate of the upper-left corner of
            the framing rectangle
            </returns>
        </member>
        <member name="P:Mapdigit.Drawing.Geometry.Ellipse.IntWidth">
            <summary>
            Returns the width of the framing rectangle.
            </summary>
            <returns>the width of the framing rectangle</returns>
        </member>
        <member name="P:Mapdigit.Drawing.Geometry.Ellipse.IntHeight">
            <summary>
            Returns the height of the framing rectangle.
            </summary>
            <returns>the height of the framing rectangle</returns>
        </member>
        <member name="P:Mapdigit.Drawing.Geometry.Ellipse.Bounds">
            <summary>
            Returns an integer Rectangle that completely encloses the
            IShape. 
            </summary>
            <remarks>
            remember that there is no guarantee that the
            returned Rectangle is the smallest bounding box that
            encloses the IShape, only that the IShape
            lies entirely within the indicated  Rectangle.  The
            returned Rectangle might also fail to completely
            enclose the IShape if the IShape overflows
            the limited range of the integer data type.  The
            getBounds method generally returns a
            tighter bounding box due to its greater flexibility in
            representation.
            </remarks>
            <returns>
            an integer Rectangle that completely encloses
            the IShape.
            </returns>
        </member>
        <member name="T:Mapdigit.Drawing.Geometry.EllipseIterator">
            <summary>
            A utility class to iterate over the path segments of an ellipse
            through the IPathIterator interface.
            </summary>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.EllipseIterator.#ctor(Mapdigit.Drawing.Geometry.RectangularShape,Mapdigit.Drawing.Geometry.AffineTransform)">
            <summary>
            Initializes a new instance of the <see cref="T:Mapdigit.Drawing.Geometry.EllipseIterator"/> class.
            </summary>
            <param name="e">The e.</param>
            <param name="at">At.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.EllipseIterator.IsDone">
            <summary>
            Tests if the iteration is complete.
            </summary>
            <returns>
            	true if all the segments have
            been read; false otherwise.
            </returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.EllipseIterator.Next">
            <summary>
            Moves the iterator to the next segment of the path forwards
            along the primary direction of traversal as long as there are
            more points in that direction.
            </summary>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.EllipseIterator.CurrentSegment(System.Int32[])">
            <summary>
            Returns the coordinates and type of the current path segment in
            the iteration.
            The return value is the path-segment type:
            SegMoveto, SegLineto, SegQuadto, SegCubicto, or SegClose.
            A long array of length 6 must be passed in and can be used to
            store the coordinates of the point(s).
            Each point is stored as a pair of long x,y coordinates.
            SegMoveto and SegLineto types returns one point,
            SegQuadto returns two points,
            SegCubicto returns 3 points
            and SegClose does not return any points.
            </summary>
            <param name="coords">an array that holds the data returned from
            this method</param>
            <returns>
            the path-segment type of the current path segment
            </returns>
        </member>
        <member name="P:Mapdigit.Drawing.Geometry.EllipseIterator.WindingRule">
            <summary>
            Returns the winding rule for determining the interior of the path.
            </summary>
            <returns>the winding rule</returns>
        </member>
        <member name="T:Mapdigit.Drawing.Geometry.FlatteningPathIterator">
             <summary>
             The FlatteningPathIterator class returns a flattened view of
             another IPathIterator object.
             </summary>
             <remarks>
             Other IShape classes can use this class to provide flattening behavior for 
             their paths without having to perform the interpolation calculations themselves.
            </remarks>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.FlatteningPathIterator.#ctor(Mapdigit.Drawing.Geometry.PathIterator,System.Int32)">
            <summary>
             Constructs a new FlatteningPathIterator object that
            flattens a path as it iterates over it.  
            </summary>
            <remarks>
            The iterator does not
            subdivide any curve read from the source iterator to more than
            10 levels of subdivision which yields a maximum of 1024 line
            segments per curve.
            </remarks>
            <param name="src"> the original unflattened path being iterated over</param>
            <param name="flatness">the maximum allowable distance between the
            control points and the flattened curve.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.FlatteningPathIterator.#ctor(Mapdigit.Drawing.Geometry.PathIterator,System.Int32,System.Int32)">
            <summary>
            Constructs a new FlatteningPathIterator object
            that flattens a path as it iterates over it.
            </summary>
            <remarks>
            The limit parameter allows you to control the
            maximum number of recursive subdivisions that the iterator
            can make before it assumes that the curve is flat enough
            without measuring against the flatness parameter.
            The flattened iteration therefore never generates more than
            a maximum of (2^limit) line segments per curve.
            </remarks>
            <param name="src">the original unflattened path being iterated over</param>
            <param name="flatness">he maximum allowable distance between the
             control points and the flattened curve</param>
            <param name="limit">the maximum number of recursive subdivisions
            allowed for any curved segment</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.FlatteningPathIterator.IsDone">
            <summary>
            Tests if the iteration is complete.
            </summary>
            <returns>
            	true if all the segments have
            been read; false otherwise.
            </returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.FlatteningPathIterator.Next">
            <summary>
            Moves the iterator to the next segment of the path forwards
            along the primary direction of traversal as long as there are
            more points in that direction.
            </summary>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.FlatteningPathIterator.CurrentSegment(System.Int32[])">
            <summary>
            Returns the coordinates and type of the current path segment in
            the iteration.
            </summary>
            <remarks>
            The return value is the path-segment type:
            SegMoveto, SegLineto, SegQuadto, SegCubicto, or SegClose.
            A long array of length 6 must be passed in and can be used to
            store the coordinates of the point(s).
            Each point is stored as a pair of long x,y coordinates.
            SegMoveto and SegLineto types returns one point,
            SegQuadto returns two points,
            SegCubicto returns 3 points
            and SegClose does not return any points.
            </remarks>
            <param name="coords">an array that holds the data returned from
            this method</param>
            <returns>
            the path-segment type of the current path segment
            </returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.FlatteningPathIterator.EnsureHoldCapacity(System.Int32)">
            <summary>
             Ensures that the hold array can hold up to (want) more values.
            It is currently holding (hold.length - holdIndex) values.
            </summary>
            <param name="want">The want.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.FlatteningPathIterator.Next(System.Boolean)">
            <summary>
            Nexts the specified do next.
            </summary>
            <param name="doNext">if set to <c>true</c> [do next].</param>
        </member>
        <member name="P:Mapdigit.Drawing.Geometry.FlatteningPathIterator.Flatness">
            <summary>
            Returns the flatness of this iterator.
            </summary>
        </member>
        <member name="P:Mapdigit.Drawing.Geometry.FlatteningPathIterator.RecursionLimit">
            <summary>
            Returns the recursion limit of this iterator.
            </summary>
        </member>
        <member name="P:Mapdigit.Drawing.Geometry.FlatteningPathIterator.WindingRule">
            <summary>
            Returns the winding rule for determining the interior of the path.
            </summary>
        </member>
        <member name="T:Mapdigit.Drawing.Geometry.IllegalPathStateException">
            <summary>
            The IllegalPathStateException represents an 
            exception that is thrown if an operation is performed on a path 
            that is in an illegal state with respect to the particular
            operation being performed, such as appending a path segment 
            to a Path without an initial moveto.
            </summary>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.IllegalPathStateException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mapdigit.Drawing.Geometry.IllegalPathStateException"/> class.
            </summary>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.IllegalPathStateException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Mapdigit.Drawing.Geometry.IllegalPathStateException"/> class.
            </summary>
            <param name="s">the detail message</param>
        </member>
        <member name="T:Mapdigit.Drawing.Geometry.Line">
            <summary>
            A line segment specified with int coordinates.
            </summary>
        </member>
        <member name="F:Mapdigit.Drawing.Geometry.Line.X1">
            <summary>
            The X coordinate of the start point of the line segment.
            </summary>
        </member>
        <member name="F:Mapdigit.Drawing.Geometry.Line.Y1">
            <summary>
            The Y coordinate of the start point of the line segment.
            </summary>
        </member>
        <member name="F:Mapdigit.Drawing.Geometry.Line.X2">
            <summary>
            The X coordinate of the end point of the line segment.
            </summary>
        </member>
        <member name="F:Mapdigit.Drawing.Geometry.Line.Y2">
            <summary>
            The Y coordinate of the end point of the line segment.
            </summary>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Line.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mapdigit.Drawing.Geometry.Line"/> class.
            </summary>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Line.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructs and initializes a Line from the
            specified coordinates.
            </summary>
            <param name="x1">the X coordinate of the start point.</param>
            <param name="y1">the Y coordinate of the start point.</param>
            <param name="x2">the X coordinate of the end point.</param>
            <param name="y2">the Y coordinate of the end point.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Line.#ctor(Mapdigit.Drawing.Geometry.Point,Mapdigit.Drawing.Geometry.Point)">
            <summary>
            Constructs and initializes a Line from the
            specified Point objects.
            </summary>
            <param name="p1">the start Point of this line segment.</param>
            <param name="p2">the end Point of this line segment.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Line.SetLine(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the location of the end points of this Line to
            the specified coordinates.
            </summary>
            <param name="x1">the X coordinate of the start point</param>
            <param name="y1">the Y coordinate of the start point</param>
            <param name="x2">the X coordinate of the end point.</param>
            <param name="y2">the Y coordinate of the end point.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Line.SetLine(Mapdigit.Drawing.Geometry.Point,Mapdigit.Drawing.Geometry.Point)">
            <summary>
            Sets the location of the end points of this Line to
            the specified Point coordinates.
            </summary>
            <param name="p1">the start Point of the line segment.</param>
            <param name="p2">the end Point of the line segment.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Line.SetLine(Mapdigit.Drawing.Geometry.Line)">
            <summary>
            Sets the location of the end points of this Line to
            the same as those end points of the specified Line.
            </summary>
            <param name="l">the specified Line.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Line.RelativeCcw(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns an indicator of where the specified point
            (px,py) lies with respect to the line segment from
            (x1,y1) to (x2,y2).
            </summary>
            <remarks>
            The return value can be either 1, -1, or 0 and indicates
            in which direction the specified line must pivot around its
            first end point, (x1,y1), in order to point at the
            specified point (px,py).
            A return value of 1 indicates that the line segment must
            turn in the direction that takes the positive X axis towards
            the negative Y axis.  In the default coordinate system used by
            Java 2D, this direction is counterclockwise.
            A return value of -1 indicates that the line segment must
            turn in the direction that takes the positive X axis towards
            the positive Y axis.  In the default coordinate system, this
            direction is clockwise.
            A return value of 0 indicates that the point lies
            exactly on the line segment.  remember that an indicator value
            of 0 is rare and not useful for determining colinearity
            because of floating point rounding issues.
            If the point is colinear with the line segment, but
            not between the end points, then the value will be -1 if the point
            lies "beyond (x1,y1)" or 1 if the point lies
            "beyond (x2,y2)".
            </remarks>
            <param name="x1">the X coordinate of the start point of the
                       specified line segment.</param>
            <param name="y1">the Y coordinate of the start point of the
                       specified line segment</param>
            <param name="x2">the X coordinate of the end point of the
                       specified line segment</param>
            <param name="y2">the Y coordinate of the end point of the
                       specified line segment.</param>
            <param name="px">the X coordinate of the specified point to be
                       compared with the specified line segment.</param>
            <param name="py">the Y coordinate of the specified point to be
                       compared with the specified line segment.</param>
            <returns></returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Line.RelativeCcw(System.Int32,System.Int32)">
            <summary>
            Returns an indicator of where the specified point
            (px,py) lies with respect to this line segment.
            </summary>
            <remarks>
            See the method comments of
            relativeCCW(int, int, int, int, int, int)
            to interpret the return value.
            </remarks>
            <param name="px">the X coordinate of the specified point
                       to be compared with this Line</param>
            <param name="py">the Y coordinate of the specified point
                       to be compared with this Line</param>
            <returns>an integer that indicates the position of the specified
                     coordinates with respect to this Line</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Line.RelativeCcw(Mapdigit.Drawing.Geometry.Point)">
            <summary>
            Returns an indicator of where the specified Point
            lies with respect to this line segment.
            </summary>
            <remarks>
            See the method comments of
            relativeCCW(int, int, int, int, int, int)
            to interpret the return value.
            </remarks>
            <param name="p">the specified Point to be compared
                      with this Line</param>
            <returns>an integer that indicates the position of the specified
                    Point with respect to this Line</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Line.LinesIntersect(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Tests if the line segment from (x1,y1) to
            (x2,y2) intersects the line segment from (x3,y3)
            to (x4,y4).
            </summary>
            <param name="x1">the X coordinate of the start point of the first
                       specified line segment</param>
            <param name="y1">the Y coordinate of the start point of the first
                       specified line segment</param>
            <param name="x2">the X coordinate of the end point of the first
                       specified line segment</param>
            <param name="y2">the Y coordinate of the end point of the first
                       specified line segment.</param>
            <param name="x3">the X coordinate of the start point of the second
                       specified line segment</param>
            <param name="y3">the Y coordinate of the start point of the second
                       specified line segment</param>
            <param name="x4">the X coordinate of the end point of the second
                      specified line segment</param>
            <param name="y4">the Y coordinate of the end point of the second
                       specified line segment</param>
            <returns>true if the first specified line segment
            			and the second specified line segment intersect
            			each other; false otherwise.</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Line.IntersectsLine(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Tests if the line segment from (x1,y1) to (x2,y2) intersects this line segment.
            </summary>
            <param name="x1">the X coordinate of the start point of the
                       specified line segment</param>
            <param name="y1">the Y coordinate of the start point of the
                       specified line segment</param>
            <param name="x2">the X coordinate of the end point of the
                       specified line segment</param>
            <param name="y2">the Y coordinate of the end point of the
                       specified line segment</param>
            <returns>true,if this line segment and the specified line segment
            intersect each other; false otherwise.</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Line.IntersectsLine(Mapdigit.Drawing.Geometry.Line)">
            <summary>
            Tests if the specified line segment intersects this line segment.
            </summary>
            <param name="l">the specified Line</param>
            <returns>true if this line segment and the specified line
            		segment intersect each other;
            		false otherwise.</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Line.PtSegDistSq(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the square of the distance from a point to a line segment.
            The distance measured is the distance between the specified
            point and the closest point between the specified end points.
            </summary>
            <remarks>
            If the specified point intersects the line segment in between the
            end points, this method returns 0.
            </remarks>
            <param name="x1">the X coordinate of the start point of the
                       specified line segment.</param>
            <param name="y1">the Y coordinate of the start point of the
                       specified line segment</param>
            <param name="x2">the X coordinate of the end point of the
                       specified line segment.</param>
            <param name="y2">the Y coordinate of the end point of the
                       specified line segment</param>
            <param name="px">the X coordinate of the specified point being
                       measured against the specified line segment.</param>
            <param name="py">the Y coordinate of the specified point being
                       measured against the specified line segment.</param>
            <returns>a int value that is the square of the distance from the
            	specified point to the specified line segment.</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Line.PtSegDist(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the distance from a point to a line segment.
            The distance measured is the distance between the specified
            point and the closest point between the specified end points.
            </summary>
            <remarks>
            If the specified point intersects the line segment in between the
            end points, this method returns 0.
            </remarks>
            <param name="x1">the X coordinate of the start point of the
                       specified line segment.</param>
            <param name="y1">the Y coordinate of the start point of the
                       specified line segment</param>
            <param name="x2">the X coordinate of the end point of the
                       specified line segment.</param>
            <param name="y2">the Y coordinate of the end point of the
                       specified line segment</param>
            <param name="px">the X coordinate of the specified point being
                       measured against the specified line segment.</param>
            <param name="py">the Y coordinate of the specified point being
                       measured against the specified line segment.</param>
            <returns>a int value that is the distance from the specified point
            			to the specified line segment.</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Line.PtSegDist(System.Int32,System.Int32)">
            <summary>
            Returns the distance from a point to this line segment.
            The distance measured is the distance between the specified
            point and the closest point between the current line's end points.
            </summary>
            <remarks>
            If the specified point intersects the line segment in between the
            end points, this method returns 0.0.
            </remarks>
            <param name="px">the X coordinate of the specified point being
                       measured against this line segment.</param>
            <param name="py">the Y coordinate of the specified point being
                       measured against this line segment.</param>
            <returns>a int value that is the distance from the specified
            			point to the current line segment.</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Line.PtSegDist(Mapdigit.Drawing.Geometry.Point)">
            <summary>
            Returns the distance from a Point to this line segment.
            </summary>
            <remarks>
            The distance measured is the distance between the specified
            point and the closest point between the current line's end points.
            If the specified point intersects the line segment in between the
            end points, this method returns 0.
            </remarks>
            <param name="pt">the specified Point being measured
            	against this line segment</param>
            <returns>a int value that is the distance from the specified
            Point to the current line segment.</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Line.PtSegDistSq(System.Int32,System.Int32)">
            <summary>
            Returns the square of the distance from a point to this line segment.
            The distance measured is the distance between the specified
            point and the closest point between the current line's end points.
            </summary>
            <remarks>
            If the specified point intersects the line segment in between the
            end points, this method returns 0.0.
            </remarks>
            <param name="px">the X coordinate of the specified point being
                      measured against this line segment</param>
            <param name="py">the Y coordinate of the specified point being
                      measured against this line segment</param>
            <returns>a int value that is the square of the distance from the
            	specified point to the current line segment.</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Line.PtSegDistSq(Mapdigit.Drawing.Geometry.Point)">
            <summary>
            Returns the square of the distance from a Point to
            this line segment.
            </summary>
            <remarks>
            The distance measured is the distance between the specified
            point and the closest point between the current line's end points.
            If the specified point intersects the line segment in between the
            end points, this method returns 0.0.
            </remarks>
            <param name="pt">the specified Point being measured against
                     this line segment..</param>
            <returns>a int value that is the square of the distance from the
            specified Point to the current	line segment.</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Line.PtLineDistSq(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the square of the distance from a point to a line.
            </summary>
            <remarks>
            The distance measured is the distance between the specified
            point and the closest point on the infinitely-extended line
            defined by the specified coordinates.  If the specified point
            intersects the line, this method returns 0.
            </remarks>
            <param name="x1">the X coordinate of the start point of the specified line.</param>
            <param name="y1">the Y coordinate of the start point of the specified line</param>
            <param name="x2">the X coordinate of the end point of the specified line</param>
            <param name="y2">the Y coordinate of the end point of the specified line.</param>
            <param name="px">the X coordinate of the specified point being
                       measured against the specified line</param>
            <param name="py">the Y coordinate of the specified point being
                       measured against the specified line</param>
            <returns>a int value that is the square of the distance from the
            			specified point to the specified line.</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Line.PtLineDistSq(Mapdigit.Drawing.Geometry.Point)">
            <summary>
            Returns the square of the distance from a specified
            Point to this line.
            </summary>
            <remarks>
            The distance measured is the distance between the specified
            point and the closest point on the infinitely-extended line
            defined by this Line.  If the specified point
            intersects the line, this method returns 0.0.
            </remarks>
            <param name="pt">the specified Point being measured
                       against this line</param>
            <returns>a int value that is the square of the distance from a
            specified Point to the current	line.</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Line.PtLineDistSq(System.Int32,System.Int32)">
            <summary>
            Returns the square of the distance from a point to this line.
            </summary>
            <remarks>
            The distance measured is the distance between the specified
            point and the closest point on the infinitely-extended line
            defined by this Line.  If the specified point
            intersects the line, this method returns 0.
            </remarks>
            <param name="px">the X coordinate of the specified point being
                       measured against this line.</param>
            <param name="py">the Y coordinate of the specified point being
                      measured against this line.</param>
            <returns>a int value that is the square of the distance from a
            		specified point to the current line.</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Line.PtLineDist(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the distance from a point to a line.
            </summary>
            <remarks>
            The distance measured is the distance between the specified
            point and the closest point on the infinitely-extended line
            defined by the specified coordinates.  If the specified point
            intersects the line, this method returns 0.
            </remarks>
            <param name="x1">the X coordinate of the start point of the specified line</param>
            <param name="y1">the Y coordinate of the start point of the specified line.</param>
            <param name="x2">the X coordinate of the end point of the specified line.</param>
            <param name="y2">the Y coordinate of the end point of the specified line</param>
            <param name="px">the X coordinate of the specified point being
                       measured against the specified line</param>
            <param name="py">the Y coordinate of the specified point being
                       measured against the specified line</param>
            <returns>a int value that is the distance from the specified
            			 point to the specified line.</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Line.PtLineDist(System.Int32,System.Int32)">
            <summary>
            Returns the distance from a point to this line.
            </summary>
            <remarks>
            The distance measured is the distance between the specified
            point and the closest point on the infinitely-extended line
            defined by this Line.  If the specified point
            intersects the line, this method returns 0.
            </remarks>
            <param name="px">the X coordinate of the specified point being
                       measured against this line</param>
            <param name="py">the Y coordinate of the specified point being
                       measured against this line</param>
            <returns>a int value that is the distance from a specified point
            			to the current line.</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Line.PtLineDist(Mapdigit.Drawing.Geometry.Point)">
            <summary>
            Returns the distance from a Point to this line.
            </summary>
            <remarks>
            The distance measured is the distance between the specified
            point and the closest point on the infinitely-extended line
            defined by this Line.  If the specified point
            intersects the line, this method returns 0.
            </remarks>
            <param name="pt">the specified Point being measured</param>
            <returns>a int value that is the distance from a specified
            		Point to the current line.</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Line.Contains(System.Int32,System.Int32)">
            <summary>
            Tests if the specified coordinates are inside the boundary of the
            IShape.
            </summary>
            <param name="x">the specified X coordinate to be tested</param>
            <param name="y">the specified Y coordinate to be tested.</param>
            <returns>
            	true if the specified coordinates are inside
            the IShape boundary; false
            otherwise.
            </returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Line.Contains(Mapdigit.Drawing.Geometry.Point)">
            <summary>
            Tests if a specified Point is inside the boundary
            of the IShape.
            </summary>
            <param name="p">the specified Point to be tested</param>
            <returns>
            	true if the specified Point is
            inside the boundary of the IShape;
            false otherwise.
            </returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Line.Contains(Mapdigit.Drawing.Geometry.Rectangle)">
            <summary>
            Tests if the interior of the IShape entirely contains the
            specified Rectangle.
            </summary>
            <remarks>
            The IShape.contains() method allows a IShape
            implementation to conservatively return false when:
            <ul>
            		<li>
            the intersect method returns true and
            </li>
            the calculations to determine whether or not the
            IShape entirely contains the Rectangle
            are prohibitively expensive.
            </ul>
            This means that for some Shapes this method might
            return false even though the IShape contains
            the Rectangle.
            The com.mapdigit.drawing.geometry.Area class performs
            more accurate geometric computations than most
            IShape objects and therefore can be used if a more precise
            answer is required.
            </remarks>
            <param name="r">The specified Rectangle</param>
            <returns>
            	true if the interior of the IShape
            entirely contains the Rectangle;
            false otherwise or, if the IShape
            contains the Rectangle and the
            intersects method returns true
            and the containment calculations would be too expensive to
            perform.
            </returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Line.Contains(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Tests if the interior of the IShape entirely contains
            the specified rectangular area. 
            </summary>
            <remarks>
             All coordinates that lie inside
            the rectangular area must lie within the IShape for the
            entire rectanglar area to be considered contained within the
            IShape.
            The IShape.contains() method allows a IShape
            implementation to conservatively return false when:
            <ul>
            		<li>
            the intersect method returns true and
            </li>
            the calculations to determine whether or not the
            IShape entirely contains the rectangular area are
            prohibitively expensive.
            </ul>
            This means that for some Shapes this method might
            return false even though the IShape contains
            the rectangular area.
            The com.mapdigit.drawing.geometry.Area class performs
            more accurate geometric computations than most
            IShape objects and therefore can be used if a more precise
            answer is required.
            </remarks>
            <param name="x">X coordinate of the upper-left corner
            of the specified rectangular area</param>
            <param name="y">the Y coordinate of the upper-left corner
            of the specified rectangular area</param>
            <param name="w">Tthe width of the specified rectangular area.</param>
            <param name="h">the height of the specified rectangular area.</param>
            <returns>
            	true if the interior of the IShape
            entirely contains the specified rectangular area;
            false otherwise or, if the IShape
            contains the rectangular area and the
            intersects method returns true
            and the containment calculations would be too expensive to
            perform.
            </returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Line.Intersects(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Tests if the interior of the IShape intersects the
            interior of a specified rectangular area.
            </summary>
            <remarks>
            The rectangular area is considered to intersect the IShape
            if any point is contained in both the interior of the
            IShape and the specified rectangular area.
            The IShape.intersects() method allows a IShape
            implementation to conservatively return true when:
            <ul>
            		<li>
            there is a high probability that the rectangular area and the
            IShape intersect, but
            </li>
            the calculations to accurately determine this intersection
            are prohibitively expensive.
            </ul>
            This means that for some Shapes this method might
            return true even though the rectangular area does not
            intersect the IShape.
            The com.mapdigit.drawing.geometry.Area class performs
            more accurate computations of geometric intersection than most
            IShape objects and therefore can be used if a more precise
            answer is required.
            </remarks>
            <param name="x">the X coordinate of the upper-left corner
            of the specified rectangular area</param>
            <param name="y">the Y coordinate of the upper-left corner
            of the specified rectangular area</param>
            <param name="w">Tthe width of the specified rectangular area</param>
            <param name="h">the height of the specified rectangular area</param>
            <returns>
            	true if the interior of the IShape and
            the interior of the rectangular area intersect, or are
            both highly likely to intersect and intersection calculations
            would be too expensive to perform; false
            </returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Line.Intersects(Mapdigit.Drawing.Geometry.Rectangle)">
            <summary>
            Tests if the interior of the IShape intersects the
            interior of a specified Rectangle.
            </summary>
            <remarks>
            The IShape.intersects() method allows a IShape
            implementation to conservatively return true when:
            <ul>
            		<li>
            there is a high probability that the Rectangle and the
            IShape intersect, but
            </li>
            the calculations to accurately determine this intersection
            are prohibitively expensive.
            </ul>
            This means that for some Shapes this method might
            return true even though the Rectangle does not
            intersect the IShape.
            The com.mapdigit.drawing.geometry.Area class performs
            more accurate computations of geometric intersection than most
            IShape objects and therefore can be used if a more precise
            answer is required.
            </remarks>
            <param name="r">r the specified Rectangle.</param>
            <returns>
            	true if the interior of the IShape and
            the interior of the specified Rectangle
            intersect, or are both highly likely to intersect and intersection
            calculations would be too expensive to perform; false
            otherwise.
            </returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Line.GetPathIterator(Mapdigit.Drawing.Geometry.AffineTransform)">
            <summary>
            Returns an iterator object that iterates along the
            IShape boundary and provides access to the geometry of the
            IShape outline. 
            </summary>
            <remarks>
             If an optional AffineTransform
            is specified, the coordinates returned in the iteration are
            transformed accordingly.
            Each call to this method returns a fresh IPathIterator
            object that traverses the geometry of the IShape object
            independently from any other IPathIterator objects in use
            at the same time.
            It is recommended, but not guaranteed, that objects
            implementing the IShape interface isolate iterations
            that are in process from any changes that might occur to the original
            object's geometry during such iterations.
            </remarks>
            <param name="at">an optional AffineTransform to be applied to the
            coordinates as they are returned in the iteration, or
            null if untransformed coordinates are desired</param>
            <returns>
            a new IPathIterator object, which independently
            traverses the geometry of the IShape.
            </returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Line.GetPathIterator(Mapdigit.Drawing.Geometry.AffineTransform,System.Int32)">
            <summary>
            Returns an iterator object that iterates along the IShape
            boundary and provides access to a flattened view of the
            IShape outline geometry.
            </summary>
            <remarks>
            Only SegMoveto, SegLineto, and SegClose point types are
            returned by the iterator.
            If an optional AffineTransform is specified,
            the coordinates returned in the iteration are transformed
            accordingly.
            The amount of subdivision of the curved segments is controlled
            by the flatness parameter, which specifies the
            maximum distance that any point on the unflattened transformed
            curve can deviate from the returned flattened path segments.
            remember that a limit on the accuracy of the flattened path might be
            silently imposed, causing very small flattening parameters to be
            treated as larger values.  This limit, if there is one, is
            defined by the particular implementation that is used.
            Each call to this method returns a fresh IPathIterator
            object that traverses the IShape object geometry
            independently from any other IPathIterator objects in use at
            the same time.
            It is recommended, but not guaranteed, that objects
            implementing the IShape interface isolate iterations
            that are in process from any changes that might occur to the original
            object's geometry during such iterations.
            </remarks>
            <param name="at">an optional AffineTransform to be applied to the
            coordinates as they are returned in the iteration, or
            null if untransformed coordinates are desired</param>
            <param name="flatness">the maximum distance that the line segments used to
            approximate the curved segments are allowed to deviate
            from any point on the original curve</param>
            <returns>
            a new IPathIterator that independently traverses
            a flattened view of the geometry of the  IShape.
            </returns>
        </member>
        <member name="P:Mapdigit.Drawing.Geometry.Line.P1">
            <summary>
            Returns the start Point of this Line.
            </summary>
        </member>
        <member name="P:Mapdigit.Drawing.Geometry.Line.P2">
            <summary>
            Returns the end Point of this Line.
            </summary>
        </member>
        <member name="P:Mapdigit.Drawing.Geometry.Line.Bounds">
            <summary>
            Returns an integer Rectangle that completely encloses the
            IShape.  
            </summary>
            <remarks>
            remember that there is no guarantee that the
            returned Rectangle is the smallest bounding box that
            encloses the IShape, only that the IShape
            lies entirely within the indicated  Rectangle.  The
            returned Rectangle might also fail to completely
            enclose the IShape if the IShape overflows
            the limited range of the integer data type.  The
            getBounds method generally returns a
            tighter bounding box due to its greater flexibility in
            representation.
            </remarks>
            <returns>
            an integer Rectangle that completely encloses
            the IShape.
            </returns>
        </member>
        <member name="T:Mapdigit.Drawing.Geometry.LineIterator">
            <summary>
            A utility class to iterate over the path segments of a line segment
            through the IPathIterator interface.
            </summary>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.LineIterator.#ctor(Mapdigit.Drawing.Geometry.Line,Mapdigit.Drawing.Geometry.AffineTransform)">
            <summary>
            Initializes a new instance of the <see cref="T:Mapdigit.Drawing.Geometry.LineIterator"/> class.
            </summary>
            <param name="l">The l.</param>
            <param name="at">At.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.LineIterator.IsDone">
            <summary>
            Tests if the iteration is complete.
            </summary>
            <returns>
            	true if all the segments have
            been read; false otherwise.
            </returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.LineIterator.Next">
            <summary>
            Moves the iterator to the next segment of the path forwards
            along the primary direction of traversal as long as there are
            more points in that direction.
            </summary>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.LineIterator.CurrentSegment(System.Int32[])">
            <summary>
            Returns the coordinates and type of the current path segment in
            the iteration.
            The return value is the path-segment type:
            SegMoveto, SegLineto, SegQuadto, SegCubicto, or SegClose.
            A long array of length 6 must be passed in and can be used to
            store the coordinates of the point(s).
            Each point is stored as a pair of long x,y coordinates.
            SegMoveto and SegLineto types returns one point,
            SegQuadto returns two points,
            SegCubicto returns 3 points
            and SegClose does not return any points.
            </summary>
            <param name="coords">an array that holds the data returned from
            this method</param>
            <returns>
            the path-segment type of the current path segment
            </returns>
        </member>
        <member name="P:Mapdigit.Drawing.Geometry.LineIterator.WindingRule">
            <summary>
            Returns the winding rule for determining the interior of the path.
            </summary>
            <returns>the winding rule</returns>
        </member>
        <member name="T:Mapdigit.Drawing.Geometry.MathFP">
            <summary>
            Fixed-Point Math Library. default all number shall be limited in range
            between -8388608.999999 to 8388608.999999 (precision bit 20).
            </summary>
        </member>
        <member name="F:Mapdigit.Drawing.Geometry.MathFP.DefaultPrecision">
            Default precision lenght.(1/ 2^21).
        </member>
        <member name="F:Mapdigit.Drawing.Geometry.MathFP.Infinity">
            largest possible number
        </member>
        <member name="F:Mapdigit.Drawing.Geometry.MathFP.One">
            Constant for One, HALF etc for the fixed-point math.
        </member>
        <member name="F:Mapdigit.Drawing.Geometry.MathFP.Half">
            Constant for One, HALF etc for the fixed-point math.
        </member>
        <member name="F:Mapdigit.Drawing.Geometry.MathFP.Two">
            Constant for One, HALF etc for the fixed-point math.
        </member>
        <member name="F:Mapdigit.Drawing.Geometry.MathFP.E">
            Constant for One, HALF etc for the fixed-point math.
        </member>
        <member name="F:Mapdigit.Drawing.Geometry.MathFP.Pi">
            Constant for One, HALF etc for the fixed-point math.
        </member>
        <member name="F:Mapdigit.Drawing.Geometry.MathFP.PiHalf">
            Constant for One, HALF etc for the fixed-point math.
        </member>
        <member name="F:Mapdigit.Drawing.Geometry.MathFP.PiTwo">
            Constant for One, HALF etc for the fixed-point math.
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.MathFP.GetPrecision">
            <summary>
            Gets the precision.
            </summary>
            <returns>the precision</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.MathFP.SetPrecision(System.Int32)">
            <summary>
            Sets the precision for all fixed-point operations.
            The maximum precision is 31 bits.
            </summary>
            <param name="precision">the desired precision in number of bits</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.MathFP.Convert(System.Int64,System.Int32)">
            <summary>
            Converts a fixed-point value to the current set precision.
            </summary>
            <param name="fp">the fixed-point value to convert.</param>
            <param name="precision">the precision of the fixed-point value passed in.</param>
            <returns>a fixed-point value of the current precision</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.MathFP.ToFP(System.Int32)">
            <summary>
            Converts an long to a fixed-point long.
            </summary>
            <param name="i">long to convert.</param>
            <returns>the converted fixed-point value.</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.MathFP.ToFP(System.String)">
             <summary>
             Converts a string to a fixed-point value. 
             The string should trimmed of any whitespace before-hand. 
             A few examples of valid strings:
            
             <pre>
             .01
             0.01
             10
             130.0
             -30000.12345
             </pre>
             </summary>
             <param name="s">the string to convert.</param>
             <returns>the fixed-point value</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.MathFP.ToInt(System.Int64)">
            <summary>
            Converts a fixed-point value to an long.
            </summary>
            <param name="fp">fixed-point value to convert</param>
            <returns>the converted long value.</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.MathFP.ToString(System.Int64)">
            <summary>
            Converts a fixed-point value to a string.
            </summary>
            <param name="fp">the fixed-point value to convert.</param>
            <returns>
             a string representing the fixed-point value with a minimum of
                    decimals in the string.
            </returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.MathFP.Ceil(System.Int64)">
            <summary>
            Returns the smallest (closest to negative infinity) fixed-point value
            that is greater than or equal to the argument and is equal to a
            mathematical integer.
            </summary>
            <param name="fp">a fixed-point value..</param>
            <returns>
            the smallest (closest to negative infinity) fixed-point value
                    that is greater than or equal to the argument and is equal to a
                    mathematical integer.
            </returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.MathFP.Floor(System.Int64)">
            <summary>
            Returns the largest (closest to positive infinity) fixed-point value
            value that is less than or equal to the argument and is equal to a
            mathematical integer.
            </summary>
            <param name="fp">a fixed-point value.</param>
            <returns>
             the largest (closest to positive infinity) fixed-point value that
                    less than or equal to the argument and is equal to a mathematical
                    integer.
            </returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.MathFP.Trunc(System.Int64)">
            <summary>
            Removes the fractional part of a fixed-point value.
            </summary>
            <param name="fp">the fixed-point value to truncate.</param>
            <returns>a truncated fixed-point value.</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.MathFP.Frac(System.Int64)">
            <summary>
            Returns the fractional part of a fixed-point value.
            </summary>
            <param name="fp">a fixed-point value to get fractional part of.</param>
            <returns>positive fractional fixed-point value if input is positive,
                     negative fractional otherwise.</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.MathFP.FracAsInt(System.Int64)">
            <summary>
            Converts a fixed-point integer to an int with only the decimal value.
            For example, if fp represents 12.34 the
            method returns 34
            </summary>
            <param name="fp">the fixed-point integer to be converted</param>
            <returns>a int in a normal integer representation</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.MathFP.Round(System.Int64)">
            <summary>
             Returns the closest integer to the argument.
            </summary>
            <param name="fp">the fixed-point value to round.</param>
            <returns>the value of the argument rounded to the nearest integer value.</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.MathFP.Min(System.Int64,System.Int64)">
            <summary>
            Returns the smaller of two values.
            </summary>
            <param name="fp1">the fixed-point value.</param>
            <param name="fp2">the fixed-point value.</param>
            <returns>the smaller of fp1 and fp2.</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.MathFP.Max(System.Int64,System.Int64)">
            <summary>
            Returns the greater of two values.
            </summary>
            <param name="fp1">the fixed-point value.</param>
            <param name="fp2">the fixed-point value.</param>
            <returns>the greater of fp1 and fp2.</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.MathFP.Abs(System.Int64)">
            <summary>
            Returns the absolute value of a fix float value.
            </summary>
            <param name="fp">the fixed-point value..</param>
            <returns>the absolute value of the argument.</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.MathFP.Add(System.Int64,System.Int64)">
            <summary>
            add two fixed-point values.
            </summary>
            <param name="fp1">first fixed-point value.</param>
            <param name="fp2">second fixed-point value.</param>
            <returns>the result of the addition.</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.MathFP.Sub(System.Int64,System.Int64)">
            <summary>
            substract two fixed-point values.
            </summary>
            <param name="fp1">first fixed-point value.</param>
            <param name="fp2">second fixed-point value.</param>
            <returns>the result of the substraction.</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.MathFP.IEEERemainder(System.Int64,System.Int64)">
            <summary>
            Computes the remainder operation on two arguments .
            </summary>
            <param name="fp1">first fixed-point value..</param>
            <param name="fp2">second fixed-point value</param>
            <returns>the remainder when fp1 is divided by fp2</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.MathFP.Mul(System.Int64,System.Int64)">
            <summary>
            Multiplies two fixed-point values.
            </summary>
            <param name="fp1">first fixed-point value..</param>
            <param name="fp2">second fixed-point value</param>
            <returns>the result of the multiplication.</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.MathFP.Div(System.Int64,System.Int64)">
            <summary>
            Divides two fixed-point values.
            </summary>
            <param name="fp1">first fixed-point value..</param>
            <param name="fp2">second fixed-point value</param>
            <returns>the result of the division.</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.MathFP.Sqrt(System.Int64)">
            <summary>
            Returns the correctly rounded positive square root of a fixed-point
            value.
            </summary>
            <param name="fp"> a fixed-point value.</param>
            <returns>the positive square root of fp. If the argument
                  is NaN or less than zero, the result is NaN.</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.MathFP.Sin(System.Int64)">
             <summary>
            Returns the trigonometric sine of an angle.
             </summary>
             <param name="fp"> the angle in radians</param>
             <returns>the sine of the argument.</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.MathFP.Cos(System.Int64)">
            <summary>
            Returns the trigonometric cosine of an angle.
            </summary>
            <param name="fp">the angle in radians</param>
            <returns>the cosine of the argument.</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.MathFP.Tan(System.Int64)">
            <summary>
            Returns the trigonometric tangent of an angle.
            </summary>
            <param name="fp">the angle in radians</param>
            <returns>the tangent of the argument.</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.MathFP.Asin(System.Int64)">
            <summary>
            Returns the arc sine of a value; the returned angle is in the range
            -<i>pi</i>/2 through <i>pi</i>/2.
            </summary>
            <param name="fp">the fixed-point value whose arc sine is to be returned.</param>
            <returns> the arc sine of the argument</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.MathFP.Acos(System.Int64)">
            <summary>
            Returns the arc cosine of a value; the returned angle is in the range 0.0
            through <i>pi</i>.
            </summary>
            <param name="fp">the fixed-point value whose arc cosine is to be returned.</param>
            <returns>the arc cosine of the argument</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.MathFP.Atan(System.Int64)">
            <summary>
            Returns the arc tangent of a value; the returned angle is in the range
            -<i>pi</i>/2 through <i>pi</i>/2.
            </summary>
            <param name="fp">The fiexed-point value whose arc tangent is to be returned.</param>
            <returns>the arc tangent of the argument.</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.MathFP.Atan2(System.Int64,System.Int64)">
            <summary>
            Returns the angle <i>theta</i> from the conversion of rectangular
            coordinates (fpX,fpY) to polar
            coordinates (r,<i>theta</i>).
            </summary>
            <param name="fpX">the ordinate coordinate</param>
            <param name="fpY">the abscissa coordinate</param>
            <returns>
            the <i>theta</i> component of the point
            (<i>r</i>,<i>theta</i>)
            in polar coordinates that corresponds to the point
            (<i>fpX</i>,<i>fpY</i>) in Cartesian coordinates.
            </returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.MathFP.Exp(System.Int64)">
            <summary>
            Returns Euler's number <i>e</i> raised to the power of a fixed-point
            value.
            </summary>
            <param name="fp">the exponent to raise <i>e</i> to.</param>
            <returns>the value <i>e</i><sup>fp</sup>, where <i>e</i>
                    is the base of the natural logarithms.</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.MathFP.Log(System.Int64)">
            <summary>
            Returns the natural logarithm (base e) of a fixed-point value.
            </summary>
            <param name="x">a fixed-point value.</param>
            <returns>the value lna, the natural logarithm of
                    fp.</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.MathFP.Log(System.Int64,System.Int64)">
            <summary>
            Returns the logarithm (base base) of a fixed-point value.
            </summary>
            <param name="fp">a fixed-point value</param>
            <param name="baseNumber">The base number.</param>
            <returns> the value loga, the logarithm of
                    fp</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.MathFP.Pow(System.Int64,System.Int64)">
            <summary>
            Returns the value of the first argument raised to the power of the second
            argument
            </summary>
            <param name="fp1">the base.</param>
            <param name="fp2">the exponent.</param>
            <returns>the value a<sup>b</sup>.</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.MathFP.ToRadians(System.Int64)">
            <summary>
            Converts an angle measured in degrees to an approximately equivalent
            angle measured in radians.
            </summary>
            <param name="fp">a fixed-point angle in degrees</param>
            <returns>the measurement of the angle angrad in radians.</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.MathFP.ToDegrees(System.Int64)">
            <summary>
            Converts an angle measured in radians to an approximately equivalent
             angle measured in degrees.
            </summary>
            <param name="fp">a fixed-point angle in radians.</param>
            <returns>the measurement of the angle angrad in degrees.
            </returns>
        </member>
        <member name="F:Mapdigit.Drawing.Geometry.MathFP._precision">
            number of fractional bits in all operations, do not modify directly
        </member>
        <member name="T:Mapdigit.Drawing.Geometry.NoninvertibleTransformException">
            <summary>
            The NoninvertibleTransformException class represents
            an exception that is thrown if an operation is performed requiring
            the inverse of an AffineTransform object but the 
            AffineTransform is in a non-invertible state.
            </summary>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.NoninvertibleTransformException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Mapdigit.Drawing.Geometry.NoninvertibleTransformException"/> class.
            </summary>
            <param name="s">The s.</param>
        </member>
        <member name="T:Mapdigit.Drawing.Geometry.Parser.AbstractParser">
            <summary>
            AbstractParser is the base class for parsers found
            in this package. <br />
            All parsers work on a String and the AbstractParser
            keeps a reference to that string along with the current position
            (@see #currentPos) and current character (@see current). <br />
            The key methods for this class are read which reads the next
            character in the parsed string, setString which sets the string
            to be parsed, and the utility methods skipCommaSpaces,
            skipSpaces and SkipSpacesCommaSpaces which can
            be used by descendants to skip common separators.
            <br />
            For an implementation example, see TransformListParser.
            </summary>
        </member>
        <member name="F:Mapdigit.Drawing.Geometry.Parser.AbstractParser._currentPos">
            The current position in the string
        </member>
        <member name="F:Mapdigit.Drawing.Geometry.Parser.AbstractParser._inputString">
            The String being parsed
        </member>
        <member name="F:Mapdigit.Drawing.Geometry.Parser.AbstractParser._current">
            The current character being parsed
            This is accessible by sub-classes
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Parser.AbstractParser.Read">
            <summary>
            the next character. Returns -1 when the
            end of the String has been reached.
            </summary>
            <returns>the next character</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Parser.AbstractParser.SetString(System.String)">
            <summary>
            Sets this parser's String. This also resets the current position to 0
            </summary>
            <param name="str">the string this parser should parse</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Parser.AbstractParser.SkipSpaces">
            <summary>
            Skips the spaces.
            </summary>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Parser.AbstractParser.SkipCommaSpaces">
            <summary>
            Skips the whitespaces and an optional comma.
            </summary>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Parser.AbstractParser.SkipSepSpaces(System.Char)">
            <summary>
            Skips the whitespaces and an optional char.
            </summary>
            <param name="sep">seperator to skip in addition to spaces.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Parser.AbstractParser.SkipSpacesCommaSpaces">
            <summary>
            Skips wsp*,wsp* .
            </summary>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Parser.AbstractParser.CurrentStartsWith(System.String)">
            <summary>
            Tests if the current substring (i.e. the substring beginning at the
            current position) starts with the specified prefix.  If the current
            substring starts with the specified prefix, the current character will
            be updated to point to the character immediately following the last
            character in the prefix; otherwise, the currentPos will
            not be affected.  For example, if the string being parsed is
             "timingAttr", and the current character is 'A':
            <pre>
            CurrentStartsWith("Att") returns true, current == 'r'
            CurrentStartsWith("Attr") returns true, current == -1
            CurrentStartsWith("Attx") returns false, current == 'A'
            </pre>
            </summary>
            <param name="str">str the prefix to be tested</param>
            <returns>true if the current substring starts with the
            specified prefix.  The result is false if
            currentPos is non-positive, or if the current substring
            does not start with the specified prefix.</returns>
        </member>
        <member name="T:Mapdigit.Drawing.Geometry.Parser.NumberListParser">
            <summary>
            The NumberListParser class converts attributes
            conforming to the SVG Tiny definition of coordinate or number
            list (see <a href="http://www.w3.org/TR/SVG11/types.html#BasicDataTypes">
            Basic Data Types</a>).
            </summary>
        </member>
        <member name="T:Mapdigit.Drawing.Geometry.Parser.NumberParser">
            <summary>
            This class represents a parser with support for numbers. remember that
            the parameter-less form of the parseNumber methods is meant
            for use by subclasses (e.g., TransformListParser).
            </summary>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Parser.NumberParser.ParseNumber">
            <summary>
            Parses a float value from the current position in the string
            </summary>
            <returns>floating point value corresponding to the parsed string</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Parser.NumberParser.ParseNumber(System.String)">
            <summary>
            Parses the content of the input String and converts it to a float.
            </summary>
            <param name="numberString">the value to parse</param>
            <returns>the corresponding single precision floating point value.</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Parser.NumberParser.ParseNumber(System.Boolean)">
            <summary>
            Parses the next float value in the string.
            </summary>
            <param name="eos">eos If eos is set to true, then there should be no more
            characters at the end of the string.</param>
            <returns>floating point value corresponding to the parsed string.
            An IllegalArgumentException is thrown if
            the next number in the string
            does not have a valid number syntax or if eos is true
            and there are more characters in the string after the
            number.</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Parser.NumberParser.BuildFloat(System.Int32,System.Int32)">
            <summary>
            </summary>
            <param name="mant"></param>
            <param name="exp"></param>
            <returns></returns>
        </member>
        <member name="F:Mapdigit.Drawing.Geometry.Parser.NumberParser.Pow10">
            Array of powers of ten.
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Parser.NumberListParser.ParseNumberList(System.String,System.Char)">
            <summary>
            Parses the number list.
            </summary>
            <param name="listStr">the string containing the list of numbers</param>
            <param name="sep">he separator between number values</param>
            <returns> An array of numbers</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Parser.NumberListParser.ParseNumberList(System.String)">
            <summary>
            Parses the number list.
            </summary>
            <param name="listStr">listStr the string containing the list of numbers</param>
            <returns> An array of numbers</returns>
        </member>
        <member name="T:Mapdigit.Drawing.Geometry.Parser.PathParser">
            <summary>
            The PathParser class converts attributes conforming to the
            SVG <a href="http://www.w3.org/TR/SVG11/paths.html#PathDataBNF">path
            syntax</a> with the
            <a href="http://www.w3.org/TR/SVGMobile/#sec-shapes">limitation</a> of SVG
            Tiny which says that SVG Tiny does not support arc to commands.
            </summary>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Parser.PathParser.GetPath">
            <summary>
            Returns the Current working path. This can be used,
            for example, when the ParsePath method throws an error
            to retrieve the state of the path at the time the error occured
            </summary>
            <returns>the Path built from the parsed
            string</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Parser.PathParser.ParsePoints(System.String)">
            <summary>
            Parses the input String and returns the corresponding
            Path.
            </summary>
            <param name="s">the String to parse.</param>
            <returns>the Path built from the parsed</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Parser.PathParser.ParsePath(System.String)">
            <summary>
            Parses the input String and returns the corresponding
            Path if no error is found. If an error occurs,
            this method throws an IllegalArgumentException.
            </summary>
            <param name="s">s the String to parse.</param>
            <returns>the Path built from the parsed
            String</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Parser.PathParser.Parsem">
            <summary>
            Parses a 'm' command.
            </summary>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Parser.PathParser.Parsel">
            <summary>
            Parses a 'l' command.
            </summary>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Parser.PathParser.ParseM">
            <summary>
            Parses a 'M' command.
            </summary>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Parser.PathParser.ParseL">
            <summary>
            Parses a 'L' command.
            </summary>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Parser.PathParser.Parseh">
            <summary>
            Parses a 'h' command.
            </summary>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Parser.PathParser.ParseH">
            <summary>
            Parses a 'H' command.
            </summary>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Parser.PathParser.Parsev">
            <summary>
            Parses a 'v' command.
            </summary>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Parser.PathParser.ParseV">
            <summary>
            Parses a 'V' command.
            </summary>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Parser.PathParser.Parsec">
            <summary>
            Parses a 'c' command.
            </summary>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Parser.PathParser.ParseC">
            <summary>
            Parses a 'C' command.
            </summary>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Parser.PathParser.Parseq">
            <summary>
            Parses a 'q' command.
            </summary>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Parser.PathParser.ParseQ">
            <summary>
            Parses a 'Q' command.
            </summary>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Parser.PathParser.Parses">
            <summary>
            Parses a 's' command.
            </summary>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Parser.PathParser.ParseS">
            <summary>
            Parses a 'S' command.
            </summary>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Parser.PathParser.Parset">
            <summary>
            Parses a 't' command.
            </summary>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Parser.PathParser.ParseT">
            <summary>
            Parses a 'T' command.
            </summary>
        </member>
        <member name="F:Mapdigit.Drawing.Geometry.Parser.PathParser._currentX">
            Current x and y positions in the path, set by
            commands such as MoveTo or LineTo.
        </member>
        <member name="F:Mapdigit.Drawing.Geometry.Parser.PathParser._currentY">
            Current x and y positions in the path, set by
            commands such as MoveTo or LineTo.
        </member>
        <member name="F:Mapdigit.Drawing.Geometry.Parser.PathParser._lastMoveToX">
            Last MoveTo command.
        </member>
        <member name="F:Mapdigit.Drawing.Geometry.Parser.PathParser._lastMoveToY">
            Last MoveTo command.
        </member>
        <member name="F:Mapdigit.Drawing.Geometry.Parser.PathParser._smoothQCenterX">
            The smoothQCenter point is used for smootg quad curves
        </member>
        <member name="F:Mapdigit.Drawing.Geometry.Parser.PathParser._smoothQCenterY">
            The smoothQCenter point is used for smootg quad curves
        </member>
        <member name="F:Mapdigit.Drawing.Geometry.Parser.PathParser._smoothCCenterX">
            The smoothQCenter point is used for smooth cubic curves
        </member>
        <member name="F:Mapdigit.Drawing.Geometry.Parser.PathParser._smoothCCenterY">
            The smoothQCenter point is used for smooth cubic curves
        </member>
        <member name="F:Mapdigit.Drawing.Geometry.Parser.PathParser._p">
            The GeneralPath under construction
        </member>
        <member name="T:Mapdigit.Drawing.Geometry.Parser.TransformListParser">
            <summary>
            The TransformListParser class converts attributes
            conforming to the SVG
            <a href="http://www.w3.org/TR/SVG11/coords.html#TransformAttribute">
            transform</a>
            syntax into AffineTransform objects.
            </summary>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Parser.TransformListParser.ParseTransformList(System.String)">
            <summary>
            Parses the transform list.
            </summary>
            <param name="txfStr">the string containing the set of transform commands</param>
            <returns>An AffineTransform object corresponding to the
            input transform list.</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Parser.TransformListParser.ParseMatrix">
            <summary>
            Parses a matrix transform. 'm' is assumed to be the current character.
            </summary>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Parser.TransformListParser.ParseRotate">
            <summary>
            Parses a rotate transform. 'r' is assumed to be the current character.
            </summary>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Parser.TransformListParser.ParseTranslate">
            <summary>
            Parses a translate transform. 't' is assumed to be the current character.
            </summary>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Parser.TransformListParser.ParseScale">
            <summary>
            Parses a scale transform. 'c' is assumed to be the current character.
            </summary>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Parser.TransformListParser.ParseSkew">
            <summary>
            Parses a skew transform. 'e' is assumed to be the current character.
            </summary>
        </member>
        <member name="F:Mapdigit.Drawing.Geometry.Parser.TransformListParser._transform">
            Captures the transform built by this parser
        </member>
        <member name="T:Mapdigit.Drawing.Geometry.Path">
            <summary>
            The Path class provides a simple, yet flexible
            shape which represents an arbitrary geometric path.
            </summary>
            <remarks>
            It can fully represent any path which can be iterated by the
            IPathIterator interface including all of its segment
            types and winding rules and it implements all of the
            basic hit testing methods of theIShape interface.
            
            Path provides exactly those facilities required for
            basic construction and management of a geometric path and
            implementation of the above interfaces with little added
            interpretation.
            If it is useful to manipulate the interiors of closed
            geometric shapes beyond simple hit testing then the
            Area class provides additional capabilities
            specifically targeted at closed figures.
            While both classes nominally implement the IShape
            interface, they differ in purpose and together they provide
            two useful views of a geometric shape where Path
            deals primarily with a trajectory formed by path segments
            and Area deals more with interpretation and manipulation
            of enclosed regions of 2D geometric space.
            
            The IPathIterator interface has more detailed descriptions
            of the types of segments that make up a path and the winding rules
            that control how to determine which regions are inside or outside
            the path.
            </remarks>
        </member>
        <member name="F:Mapdigit.Drawing.Geometry.Path.WindEvenOdd">
            <summary>
             An even-odd winding rule for determining the interior of a path.
            </summary>
        </member>
        <member name="F:Mapdigit.Drawing.Geometry.Path.WindNonZero">
            <summary>
             A non-zero winding rule for determining the interior of a path.
            </summary>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Path.FromString(System.String)">
            <summary>
            Parses Path object from a path data input string that contains the moveto
            , line, curve (both cubic and quadratic Beziers) and closepath
            instructions. 
            </summary>
            <remarks>
            For example, "M 100 100 L 300 100 L 200 300 z". . 
            </remarks>
            <param name="input">Tpath input string.</param>
            <returns>path object</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Path.ToSvg(Mapdigit.Drawing.Geometry.IShape)">
            <summary>
            </summary>
            <param name="shape"></param>
            <returns></returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Path.#ctor(Mapdigit.Drawing.Geometry.IShape,Mapdigit.Drawing.Geometry.AffineTransform)">
            <summary>
            Constructs a new int precision Path object
            from an arbitraryIShape object, transformed by an
            AffineTransform object.
            </summary>
            <remarks>
            All of the initial geometry and the winding rule for this path are
            taken from the specified IShape object and transformed
            by the specified AffineTransform object.
            </remarks>
            <param name="s"> the specified IShape object</param>
            <param name="at">the specified AffineTransform object</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Path.#ctor">
            <summary>
            Constructs a new empty int precision Path object
            with a default winding rule of WindNonZero.
            </summary>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Path.#ctor(System.Int32)">
            <summary>
            Constructs a new empty int precision Path object
            with the specified winding rule to control operations that
            require the interior of the path to be defined.
            </summary>
            <param name="rule">the winding rule</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Path.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructs a new Path object from the given
            specified initial values.
            </summary>
            <remarks>
            This method is only intended for internal use and should
            not be made public if the other constructors for this class
            are ever exposed.
            </remarks>
            <param name="rule">the winding rule</param>
            <param name="initialTypes">the size to make the initial array to
                                store the path segment types</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Path.#ctor(Mapdigit.Drawing.Geometry.IShape)">
            <summary>
            Constructs a new int precision Path object
            from an arbitraryIShape object.
            </summary>
            <remarks>
            All of the initial geometry and the winding rule for this path are
            taken from the specified IShape object.
            </remarks>
            <param name="s">The s.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Path.Clone">
            <summary>
            Creates a new object of the same class as this object.
            </summary>
            <returns>a clone of this instance.</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Path.ClosePath">
            <summary>
            Closes the current subpath by drawing a straight line back to
            the coordinates of the last moveTo. 
            </summary>
            <remarks>
             If the path is already closed then this method has no effect.
            </remarks>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Path.Append(Mapdigit.Drawing.Geometry.IShape,System.Boolean)">
            <summary>
            Appends the geometry of the specified IShape object to the
            path, possibly connecting the new geometry to the existing path
            segments with a line segment.
            </summary>
            <remarks>
            If the {connectparameter is true and the
            path is not empty then any initial moveTo in the
            geometry of the appended IShape
            is turned into a lineTo segment.
            If the destination coordinates of such a connecting lineTo
            segment match the ending coordinates of a currently open
            subpath then the segment is omitted as superfluous.
            The winding rule of the specified IShape is ignored
            and the appended geometry is governed by the winding
            rule specified for this path.
            </remarks>
            <param name="s">the IShape whose geometry is appended
                      to this path</param>
            <param name="connect">a boolean to control whether or not to turn an initial
                            moveTo segment into a lineTo segment
                           to connect the new geometry to the existing path</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Path.Reset">
            <summary>
            Resets the path to empty.
            </summary>
            <remarks>
             The append position is set back to the
            beginning of the path and all coordinates and point types are
            forgotten.
            </remarks> 
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Path.CreateTransformedShape(Mapdigit.Drawing.Geometry.AffineTransform)">
            <summary>
            Returns a new IShape representing a transformed version
            of this Path.
            </summary>
            <remarks>
            remember that the exact type and coordinate precision of the return
            value is not specified for this method.
            The method will return a IShape that contains no less precision
            for the transformed geometry than this Path currently
            maintains, but it may contain no more precision either.
            If the tradeoff of precision vs. 
            </remarks>
            <param name="at">the AffineTransform used to transform a
                       new IShape.</param>
            <returns>a new IShape, transformed with the specified
                     AffineTransform.</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Path.Contains(Mapdigit.Drawing.Geometry.PathIterator,System.Int32,System.Int32)">
            <summary>
            Tests if the specified coordinates are inside the closed
            boundary of the specified IPathIterator.
            </summary>
            <remarks>
            This method provides a basic facility for implementors of
            theIShape interface to implement support for the
            contains(int, int)method.
            </remarks>
            <param name="pi">the specified IPathIterator</param>
            <param name="x">the specified X coordinate</param>
            <param name="y">the specified Y coordinate</param>
            <returns>
            	true if the specified coordinates are inside the
                specified IPathIterator; false otherwise
            </returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Path.Contains(Mapdigit.Drawing.Geometry.PathIterator,Mapdigit.Drawing.Geometry.Point)">
            <summary>
            Tests if the specified Point is inside the closed
            boundary of the specified IPathIterator.
            </summary>
            <remarks>
            This method provides a basic facility for implementors of
            theIShape interface to implement support for the
            contains(Point)method.
            </remarks>
            <param name="pi">the specified IPathIterator</param>
            <param name="p">the specified Point</param>
            <returns>
            	true if the specified coordinates are inside the
                 specified IPathIterator; false otherwise
            </returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Path.Contains(System.Int32,System.Int32)">
            <summary>
            Tests if the specified coordinates are inside the boundary of the
            IShape.
            </summary>
            <param name="x">the specified X coordinate to be tested</param>
            <param name="y">the specified Y coordinate to be tested.</param>
            <returns>
            	true if the specified coordinates are inside
            the IShape boundary; false
            otherwise.
            </returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Path.Contains(Mapdigit.Drawing.Geometry.Point)">
            <summary>
            Tests if a specified Point is inside the boundary
            of the IShape.
            </summary>
            <param name="p">the specified Point to be tested</param>
            <returns>
            	true if the specified Point is
            inside the boundary of the IShape;
            false otherwise.
            </returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Path.Contains(Mapdigit.Drawing.Geometry.PathIterator,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Tests if the specified rectangular area is entirely inside the
            closed boundary of the specified IPathIterator.
            </summary>
            <remarks>
            This method provides a basic facility for implementors of
            theIShape interface to implement support for the
            contains(int, int, int, int) method.
            
            This method object may conservatively return false in
            cases where the specified rectangular area intersects a
            segment of the path, but that segment does not represent a
            boundary between the interior and exterior of the path.
            Such segments could lie entirely within the interior of the
            path if they are part of a path with a WindNonZero
            winding rule or if the segments are retraced in the reverse
            direction such that the two sets of segments cancel each
            other out without any exterior area falling between them.
            To determine whether segments represent true boundaries of
            the interior of the path would require extensive calculations
            involving all of the segments of the path and the winding
            rule and are thus beyond the scope of this implementation.
            </remarks>
            <param name="pi">the specified IPathIterator</param>
            <param name="x">the specified X coordinate</param>
            <param name="y">the specified Y coordinate.</param>
            <param name="w">the width of the specified rectangular area.</param>
            <param name="h">the height of the specified rectangular area</param>
            <returns>
            	true if the specified IPathIterator contains
                 the specified rectangluar area; false otherwise.
            </returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Path.Contains(Mapdigit.Drawing.Geometry.PathIterator,Mapdigit.Drawing.Geometry.Rectangle)">
            <summary>
            Tests if the specified Rectangle is entirely inside the
            closed boundary of the specified IPathIterator.
            </summary>
            <remarks>
            This method provides a basic facility for implementors of
            theIShape interface to implement support for the
            contains(Rectangle)method.
            
            This method object may conservatively return false in
            cases where the specified rectangular area intersects a
            segment of the path, but that segment does not represent a
            boundary between the interior and exterior of the path.
            Such segments could lie entirely within the interior of the
            path if they are part of a path with a WindNonZero
            winding rule or if the segments are retraced in the reverse
            direction such that the two sets of segments cancel each
            other out without any exterior area falling between them.
            To determine whether segments represent true boundaries of
            the interior of the path would require extensive calculations
            involving all of the segments of the path and the winding
            rule and are thus beyond the scope of this implementation.
            </remarks>
            <param name="pi">the specified IPathIterator</param>
            <param name="r">a specified Rectangle</param>
            <returns>
            	true if the specified IPathIterator contains
                 the specified Rectangle; false otherwise.
            </returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Path.Contains(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Tests if the interior of the IShape entirely contains
            the specified rectangular area. 
            </summary>
            <remarks>
             All coordinates that lie inside
            the rectangular area must lie within the IShape for the
            entire rectanglar area to be considered contained within the
            IShape.
            The IShape.contains()method allows a IShape
            implementation to conservatively return false when:
            <ul>
            		<li>
            the intersect method returns true and
            </li>
            the calculations to determine whether or not the
            IShape entirely contains the rectangular area are
            prohibitively expensive.
            </ul>
            This means that for some Shapes this method might
            return false even though the IShape contains
            the rectangular area.
            The com.mapdigit.drawing.geometry.Area class performs
            more accurate geometric computations than most
            IShape objects and therefore can be used if a more precise
            answer is required.
            </remarks>
            <param name="x">X coordinate of the upper-left corner
            of the specified rectangular area</param>
            <param name="y">the Y coordinate of the upper-left corner
            of the specified rectangular area</param>
            <param name="w">Tthe width of the specified rectangular area.</param>
            <param name="h">the height of the specified rectangular area.</param>
            <returns>
            	true if the interior of the IShape
            entirely contains the specified rectangular area;
            false otherwise or, if the IShape
            contains the rectangular area and the
            intersects method returns true
            and the containment calculations would be too expensive to
            perform.
            </returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Path.Contains(Mapdigit.Drawing.Geometry.Rectangle)">
            <summary>
            Tests if the interior of the IShape entirely contains the
            specified Rectangle.
            </summary>
            <remarks>
            The IShape.contains()method allows a IShape
            implementation to conservatively return false when:
            <ul>
            		<li>
            the intersect method returns true and
            </li>
            the calculations to determine whether or not the
            IShape entirely contains the Rectangle
            are prohibitively expensive.
            </ul>
            This means that for some Shapes this method might
            return false even though the IShape contains
            the Rectangle.
            The com.mapdigit.drawing.geometry.Area class performs
            more accurate geometric computations than most
            IShape objects and therefore can be used if a more precise
            answer is required.
            </remarks>
            <param name="r">The specified Rectangle</param>
            <returns>
            	true if the interior of the IShape
            entirely contains the Rectangle;
            false otherwise or, if the IShape
            contains the Rectangle and the
            intersects method returns true
            and the containment calculations would be too expensive to
            perform.
            </returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Path.Intersects(Mapdigit.Drawing.Geometry.PathIterator,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Tests if the interior of the specified IPathIterator
            intersects the interior of a specified set of rectangular
            coordinates.
            </summary>
            <remarks>
            This method provides a basic facility for implementors of
            theIShape interface to implement support for the
            intersects(int, int, int, int) method.
            
            This method object may conservatively return true in
            cases where the specified rectangular area intersects a
            segment of the path, but that segment does not represent a
            boundary between the interior and exterior of the path.
            Such a case may occur if some set of segments of the
            path are retraced in the reverse direction such that the
            two sets of segments cancel each other out without any
            interior area between them.
            To determine whether segments represent true boundaries of
            the interior of the path would require extensive calculations
            involving all of the segments of the path and the winding
            rule and are thus beyond the scope of this implementation.
            </remarks>
            <param name="pi">the specified IPathIterator.</param>
            <param name="x">the specified X coordinate.</param>
            <param name="y">the specified Y coordinate.</param>
            <param name="w">the width of the specified rectangular coordinates</param>
            <param name="h">the height of the specified rectangular coordinates.</param>
            <returns>
             true if the specified IPathIterator and
                    the interior of the specified set of rectangular
                    coordinates intersect each other; false otherwise.
            </returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Path.Intersects(Mapdigit.Drawing.Geometry.PathIterator,Mapdigit.Drawing.Geometry.Rectangle)">
            <summary>
            Tests if the interior of the specified IPathIterator
            intersects the interior of a specified Rectangle.
            </summary>
            <remarks>
            This method provides a basic facility for implementors of
            theIShape interface to implement support for the
            intersects(Rectangle) method.
            
            This method object may conservatively return true in
            cases where the specified rectangular area intersects a
            segment of the path, but that segment does not represent a
            boundary between the interior and exterior of the path.
            Such a case may occur if some set of segments of the
            path are retraced in the reverse direction such that the
            two sets of segments cancel each other out without any
            interior area between them.
            To determine whether segments represent true boundaries of
            the interior of the path would require extensive calculations
            involving all of the segments of the path and the winding
            rule and are thus beyond the scope of this implementation.
            </remarks>
            <param name="pi">the specified IPathIterator</param>
            <param name="r">the specified Rectangle</param>
            <returns>true if the specified IPathIterator and
                    the interior of the specified Rectangle
                    intersect each other; false otherwise.</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Path.Intersects(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Tests if the interior of the IShape intersects the
            interior of a specified rectangular area.
            </summary>
            <remarks>
            The rectangular area is considered to intersect the IShape
            if any point is contained in both the interior of the
            IShape and the specified rectangular area.
            The IShape.intersects() method allows a IShape
            implementation to conservatively return true when:
            <ul>
            		<li>
            there is a high probability that the rectangular area and the
            IShape intersect, but
            </li>
            the calculations to accurately determine this intersection
            are prohibitively expensive.
            </ul>
            This means that for some Shapes this method might
            return true even though the rectangular area does not
            intersect the IShape.
            The com.mapdigit.drawing.geometry.Area class performs
            more accurate computations of geometric intersection than most
            IShape objects and therefore can be used if a more precise
            answer is required.
            </remarks>
            <param name="x">the X coordinate of the upper-left corner
            of the specified rectangular area</param>
            <param name="y">the Y coordinate of the upper-left corner
            of the specified rectangular area</param>
            <param name="w">Tthe width of the specified rectangular area</param>
            <param name="h">the height of the specified rectangular area</param>
            <returns>
            	true if the interior of the IShape and
            the interior of the rectangular area intersect, or are
            both highly likely to intersect and intersection calculations
            would be too expensive to perform; false
            </returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Path.Intersects(Mapdigit.Drawing.Geometry.Rectangle)">
            <summary>
            Tests if the interior of the IShape intersects the
            interior of a specified Rectangle.
            </summary>
            <remarks>
            The IShape.intersects() method allows a IShape
            implementation to conservatively return true when:
            <ul>
            		<li>
            there is a high probability that the Rectangle and the
            IShape intersect, but
            </li>
            the calculations to accurately determine this intersection
            are prohibitively expensive.
            </ul>
            This means that for some Shapes this method might
            return true even though the Rectangle does not
            intersect the IShape.
            The com.mapdigit.drawing.geometry.Area class performs
            more accurate computations of geometric intersection than most
            IShape objects and therefore can be used if a more precise
            answer is required.
            </remarks>
            <param name="r">r the specified Rectangle.</param>
            <returns>
            	true if the interior of the IShape and
            the interior of the specified Rectangle
            intersect, or are both highly likely to intersect and intersection
            calculations would be too expensive to perform; false
            otherwise.
            </returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Path.GetPathIterator(Mapdigit.Drawing.Geometry.AffineTransform,System.Int32)">
            <summary>
            Returns an iterator object that iterates along the IShape
            boundary and provides access to a flattened view of the
            IShape outline geometry.
            </summary>
            <remarks>
            Only SegMoveto, SegLineto, and SegClose point types are
            returned by the iterator.
            If an optional AffineTransform is specified,
            the coordinates returned in the iteration are transformed
            accordingly.
            The amount of subdivision of the curved segments is controlled
            by the flatness parameter, which specifies the
            maximum distance that any point on the unflattened transformed
            curve can deviate from the returned flattened path segments.
            remember that a limit on the accuracy of the flattened path might be
            silently imposed, causing very small flattening parameters to be
            treated as larger values.  This limit, if there is one, is
            defined by the particular implementation that is used.
            Each call to this method returns a fresh IPathIterator
            object that traverses the IShape object geometry
            independently from any other IPathIterator objects in use at
            the same time.
            It is recommended, but not guaranteed, that objects
            implementing the IShape interface isolate iterations
            that are in process from any changes that might occur to the original
            object's geometry during such iterations.
            </remarks>
            <param name="at">an optional AffineTransform to be applied to the
            coordinates as they are returned in the iteration, or
            null if untransformed coordinates are desired</param>
            <param name="flatness">the maximum distance that the line segments used to
            approximate the curved segments are allowed to deviate
            from any point on the original curve</param>
            <returns>
            a new IPathIterator that independently traverses
            a flattened view of the geometry of the  IShape.
            </returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Path.MoveTo(System.Int32,System.Int32)">
            <summary>
            Adds a point to the path by moving to the specified
            coordinates specified in double precision.
            </summary>
            <param name="x"> the specified X coordinate</param>
            <param name="y">the specified Y coordinate</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Path.LineTo(System.Int32,System.Int32)">
            <summary>
            Adds a point to the path by drawing a straight line from the
            current coordinates to the new specified coordinates
            specified in double precision.
            </summary>
            <param name="x"> the specified X coordinate</param>
            <param name="y">the specified Y coordinate</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Path.QuadTo(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Adds a curved segment, defined by two new points, to the path by
            drawing a Quadratic curve that intersects both the current
            coordinates and the specified coordinates (x2,y2),
            using the specified point (x1,y1) as a quadratic
            parametric control point.
            All coordinates are specified in double precision.
            </summary>
            <param name="x1">the X coordinate of the quadratic control point.</param>
            <param name="y1">the Y coordinate of the quadratic control point.</param>
            <param name="x2">the X coordinate of the final end point.</param>
            <param name="y2">the Y coordinate of the final end point.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Path.CurveTo(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Adds a curved segment, defined by three new points, to the path by
            drawing a Bezier curve that intersects both the current
            coordinates and the specified coordinates (x3,y3),
            using the specified points (x1,y1) and (x2,y2) as
            Bezier control points.
            All coordinates are specified in double precision.
            </summary>
            <param name="x1">the X coordinate of the first Bezier control point.</param>
            <param name="y1">the Y coordinate of the first Bezier control point.</param>
            <param name="x2">the X coordinate of the second Bezier control point.</param>
            <param name="y2">the Y coordinate of the secondBezier control point.</param>
            <param name="x3">the X coordinate of the final end point.</param>
            <param name="y3">the Y coordinate of the final end point.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Path.Append(Mapdigit.Drawing.Geometry.PathIterator,System.Boolean)">
            <summary>
            Appends the geometry of the specified
            IPathIterator object
            to the path, possibly connecting the new geometry to the existing
            path segments with a line segment.
            </summary>
            <remarks>
            If the connectparameter is true and the
            path is not empty then any initial moveTo in the
            geometry of the appended IShape is turned into a
            lineTo segment.
            If the destination coordinates of such a connecting lineTo
            segment match the ending coordinates of a currently open
            subpath then the segment is omitted as superfluous.
            The winding rule of the specified IShape is ignored
            and the appended geometry is governed by the winding
            rule specified for this path.
            </remarks>
            <param name="pi">the IPathIterator whose geometry is appended to
                      this path</param>
            <param name="connect">ia boolean to control whether or not to turn an initial
                           moveTo segment into a lineTo segment
                           to connect the new geometry to the existing path</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Path.Transform(Mapdigit.Drawing.Geometry.AffineTransform)">
            <summary>
            Transforms the geometry of this path using the specified
            AffineTransform.
            </summary>
            <remarks>
            The geometry is transformed in place, which permanently changes the
            boundary defined by this object.
            </remarks>
            <param name="at">the AffineTransform used to transform the area</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Path.GetPathIterator(Mapdigit.Drawing.Geometry.AffineTransform)">
            <summary>
            Returns an iterator object that iterates along the
            IShape boundary and provides access to the geometry of the
            IShape outline.  If an optional AffineTransform
            is specified, the coordinates returned in the iteration are
            transformed accordingly.
            </summary>
            <remarks>
            Each call to this method returns a fresh IPathIterator
            object that traverses the geometry of the IShape object
            independently from any other IPathIterator objects in use
            at the same time.
            It is recommended, but not guaranteed, that objects
            implementing the IShape interface isolate iterations
            that are in process from any changes that might occur to the original
            object's geometry during such iterations.
            </remarks>
            <param name="at">an optional AffineTransform to be applied to the
            coordinates as they are returned in the iteration, or
            null if untransformed coordinates are desired</param>
            <returns>
            a new IPathIterator object, which independently
            traverses the geometry of the IShape.
            </returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Path.ToSVG(Mapdigit.Drawing.Geometry.IShape)">
            <summary>
            To a SVG string.
            </summary>
            <param name="shape">The shape.</param>
            <returns>a SVG string</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Path.PointCrossings(System.Int32,System.Int32)">
            <summary>
            Points the crossings.
            </summary>
            <param name="px">The px.</param>
            <param name="py">The py.</param>
            <returns></returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Path.CloneCoords(Mapdigit.Drawing.Geometry.AffineTransform)">
            <summary>
            Clones the coords.
            </summary>
            <param name="at">At.</param>
            <returns></returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Path.GetPoint(System.Int32)">
            <summary>
            Gets the point.
            </summary>
            <param name="coordindex">The coordindex.</param>
            <returns></returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Path.NeedRoom(System.Boolean,System.Int32)">
            <summary>
            Needs the room.
            </summary>
            <param name="needMove">if set to true [need move].</param>
            <param name="newCoords">The new coords.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Path.RectCrossings(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Rects the crossings.
            </summary>
            <param name="rxmin">The rxmin.</param>
            <param name="rymin">The rymin.</param>
            <param name="rxmax">The rxmax.</param>
            <param name="rymax">The rymax.</param>
            <returns></returns>
        </member>
        <member name="P:Mapdigit.Drawing.Geometry.Path.WindingRule">
            <summary>
            the winding rule.
            </summary>
        </member>
        <member name="P:Mapdigit.Drawing.Geometry.Path.CurrentPoint">
            <summary>
            Returns the coordinates most recently added to the end of the path
            as a Point object.
            </summary>
        </member>
        <member name="P:Mapdigit.Drawing.Geometry.Path.Bounds">
            <summary>
            Returns an integer Rectangle that completely encloses the
            IShape. 
            </summary>
            <remarks>
             remember that there is no guarantee that the
            returned Rectangle is the smallest bounding box that
            encloses the IShape, only that the IShape
            lies entirely within the indicated  Rectangle.  The
            returned Rectangle might also fail to completely
            enclose the IShape if the IShape overflows
            the limited range of the integer data type.  The
            getBounds method generally returns a
            tighter bounding box due to its greater flexibility in
            representation.
            </remarks>
            <returns>
            an integer Rectangle that completely encloses
            the IShape.
            </returns>
        </member>
        <member name="T:Mapdigit.Drawing.Geometry.Path.CopyIterator">
            <summary>
            
            </summary>
        </member>
        <member name="T:Mapdigit.Drawing.Geometry.Path.TxIterator">
            <summary>
            
            </summary>
        </member>
        <member name="T:Mapdigit.Drawing.Geometry.Point">
            <summary>
             A point representing a location in (x,y) coordinate space,
             specified in integer.
            </summary>
        </member>
        <member name="F:Mapdigit.Drawing.Geometry.Point.X">
            <summary>
            The X coordinate of this Point.
            If no X coordinate is set it will default to 0.
            </summary>
        </member>
        <member name="F:Mapdigit.Drawing.Geometry.Point.Y">
            <summary>
            The Y coordinate of this Point. 
            If no Y coordinate is set it will default to 0.
            </summary>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Point.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mapdigit.Drawing.Geometry.Point"/> class.
            </summary>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Point.#ctor(Mapdigit.Drawing.Geometry.Point)">
            <summary>
            Constructs and initializes a point with the same location as
             the specified Point object.
            </summary>
            <param name="p">The point.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Point.#ctor(System.Int32,System.Int32)">
            <summary>
             Constructs and initializes a point at the specified 
            (x,y) location in the coordinate space. 
            </summary>
            <param name="x">the X coordinate of the newly constructed Point</param>
            <param name="y">the Y coordinate of the newly constructed Point</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Point.FromString(System.String)">
            <summary>
            parse point from a string.
            </summary>
            <param name="input">The input.</param>
            <returns>a array of point</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Point.SetLocation(System.Int32,System.Int32)">
            <summary>
            Changes the point to have the specified location.
            
            This method is included for completeness, to parallel the
            setLocation method of Component.
            Its behavior is identical with move(int,int).
            </summary>
            <param name="x">the X coordinate of the new location</param>
            <param name="y">the Y coordinate of the new location</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Point.Move(System.Int32,System.Int32)">
            <summary>
            Moves this point to the specified location in the 
            (x,y) coordinate plane. This method
            is identical with setLocation(int,int).
            </summary>
            <param name="x">the X coordinate of the new location</param>
            <param name="y">the Y coordinate of the new location</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Point.Translate(System.Int32,System.Int32)">
            <summary>
            Translates this point, at location (x,y), 
            by dx along the x axis and dy 
            along the y axis so that it now represents the point 
            (x+dx,y+dy)}.
            </summary>
            <param name="dx">the distance to move this point 
                                        along the X axis</param>
            <param name="dy">the distance to move this point 
                                       along the Y axis</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Point.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:System.Object"/> is equal 
            to this instance; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
            </exception>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Point.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Point.DistanceSq(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the square of the distance between two points.
            </summary>
            <param name="x1"> the X coordinate of the first specified point.</param>
            <param name="y1"> the Y coordinate of the first specified point</param>
            <param name="x2">the X coordinate of the second specified point.</param>
            <param name="y2">the Y coordinate of the second specified point.</param>
            <returns>the square of the distance between the two
             sets of specified coordinates.</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Point.Distance(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the distance between two points.
            </summary>
            <param name="x1"> the X coordinate of the first specified point.</param>
            <param name="y1"> the Y coordinate of the first specified point</param>
            <param name="x2">the X coordinate of the second specified point.</param>
            <param name="y2">the Y coordinate of the second specified point.</param>
            <returns>the distance between the two sets of specified
            coordinates.</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Point.DistanceSq(System.Int32,System.Int32)">
            <summary>
             Returns the square of the distance from this
             Point to a specified point.
            </summary>
            <param name="px">the X coordinate of the specified point to be measured
                       against this Point</param>
            <param name="py">the Y coordinate of the specified point to be measured
                       against this Point</param>
            <returns> the square of the distance between this
             Point and the specified point.</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Point.DistanceSq(Mapdigit.Drawing.Geometry.Point)">
            <summary>
             Returns the square of the distance from this
             Point to a specified Point.
            </summary>
            <param name="pt"> the specified point to be measured
                       against this Point</param>
            <returns>the square of the distance between this
            Point to a specified Point.</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Point.Distance(System.Int32,System.Int32)">
            <summary>
            Returns the distance from this Point to
             a specified point.
            </summary>
            <param name="px">the X coordinate of the specified point to be measured
                       against this Point</param>
            <param name="py">the Y coordinate of the specified point to be measured
                       against this Point</param>
            <returns>the distance between this Point
             and a specified point.</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Point.Distance(Mapdigit.Drawing.Geometry.Point)">
            <summary>
            Returns the distance from this Point to a
            specified Point.
            </summary>
            <param name="pt">the specified point to be measured
                      against this Point</param>
            <returns> the distance between this Point and
             the specified Point.</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Point.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms
             and data structures like a hash table. 
            </returns>
        </member>
        <member name="P:Mapdigit.Drawing.Geometry.Point.Location">
            <summary>
            the location of this point.
            </summary>
        </member>
        <member name="T:Mapdigit.Drawing.Geometry.Polygon">
            <summary>
            The Polygon class encapsulates a description of a
            closed, two-dimensional region within a coordinate space. This
            region is bounded by an arbitrary number of line segments, each of
            which is one side of the polygon. 
            </summary>
            <remarks>
            Internally, a polygon comprises of a list of (x,y)
            coordinate pairs, where each pair defines a <i>vertex</i> of the
            polygon, and two successive pairs are the endpoints of a
            line that is a side of the polygon. The first and final
            pairs of (x,y) points are joined by a line segment
            that closes the polygon.  This Polygon is defined with
            an even-odd winding rule.  See
            WindEvenOdd
            for a definition of the even-odd winding rule.
            This class's hit-testing methods, which include the
            contains, intersects and inside
            methods, use the <i>insideness</i> definition described in the
            IShape class comments.
            </remarks>
        </member>
        <member name="F:Mapdigit.Drawing.Geometry.Polygon.NumOfPoints">
            <summary>
            The total number of points. 
            </summary>
            <remarks>
             The Value of npoints
            represents the number of valid points in this Polygon
            and might be less than the number of elements in
            xpoints or ypoints.
            This Value can be NULL.
            </remarks>
        </member>
        <member name="F:Mapdigit.Drawing.Geometry.Polygon.XPoints">
            <summary>
            The array of X coordinates.  
            </summary>
            <remarks>
            The number of elements in
            this array might be more than the number of X coordinates
            in this Polygon.  The extra elements allow new points
            to be added to this Polygon without re-creating this
            array.  The Value of npoints is equal to the
            number of valid points in this Polygon.
            </remarks>
        </member>
        <member name="F:Mapdigit.Drawing.Geometry.Polygon.YPoints">
            <summary>
            The array of Y coordinates.  
            </summary>
            <remarks>
            The number of elements in
            this array might be more than the number of Y coordinates
            in this Polygon.  The extra elements allow new points
            to be added to this Polygon without re-creating this
            array.  The Value of npoints is equal to the
            number of valid points in this Polygon.
            </remarks>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Polygon.FromString(System.String)">
            <summary>
            Parse a polygon from a string
            </summary>
            <param name="input">The input.</param>
            <returns>polygon object</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Polygon.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mapdigit.Drawing.Geometry.Polygon"/> class.
            </summary>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Polygon.#ctor(System.Int32[],System.Int32[],System.Int32)">
            <summary>
            Constructs and initializes a Polygon from the specified
            parameters.
            </summary>
            <param name="xpoints"> an array of X coordinates.</param>
            <param name="ypoints">an array of Y coordinates.</param>
            <param name="npoints">the total number of points in the
            			Polygon</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Polygon.Reset">
            <summary>
            Resets this Polygon object to an empty polygon.
            </summary>
            <remarks>
            The coordinate arrays and the data in them are left untouched
            but the number of points is reset to zero to mark the old
            vertex data as invalid and to start accumulating new vertex
            data at the beginning.
            All internally-cached data relating to the old vertices
            are discarded.
            Remember that since the coordinate arrays from before the reset
            are reused, creating a new empty Polygon might
            be more memory efficient than resetting the current one if
            the number of vertices in the new polygon data is significantly
            smaller than the number of vertices in the data from before the
            reset.
            </remarks>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Polygon.Invalidate">
            <summary>
            Invalidates or flushes any internally-cached data that depends
            on the vertex coordinates of this Polygon.
            </summary>
            <remarks>
            This method should be called after any direct manipulation
            of the coordinates in the xpoints or
            ypoints arrays to avoid inconsistent results
            from methods such as getBounds or contains
            that might cache data from earlier computations relating to
            the vertex coordinates.
            </remarks>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Polygon.Translate(System.Int32,System.Int32)">
            <summary>
            Translates the vertices of the Polygon by
            deltaX along the x axis and by
            deltaY along the y axis.
            </summary>
            <param name="deltaX">the amount to translate along the X axis.</param>
            <param name="deltaY">the amount to translate along the Y axis.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Polygon.AddPoint(Mapdigit.Drawing.Geometry.Point)">
            <summary>
            Appends the specified coordinates to this Polygon.
            </summary>
            <remarks>
            If an operation that calculates the bounding box of this
            Polygon has already been performed, such as
            getBounds or contains, then this
            method updates the bounding box.
            </remarks>
            <param name="pt"> a point to be added..</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Polygon.AddPoint(System.Int32,System.Int32)">
            <summary>
            Appends the specified coordinates to this Polygon.
            </summary>
            <remarks>
            If an operation that calculates the bounding box of this
            Polygon has already been performed, such as
            getBounds or contains, then this
            method updates the bounding box.
            </remarks>
            <param name="x">the specified X coordinate.</param>
            <param name="y">the specified Y coordinate.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Polygon.Contains(Mapdigit.Drawing.Geometry.Point)">
            <summary>
            Tests if a specified Point is inside the boundary
            of the IShape.
            </summary>
            <param name="p">the specified Point to be tested</param>
            <returns>
            	true if the specified Point is
            inside the boundary of the IShape;
            false otherwise.
            </returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Polygon.Inside(System.Int32,System.Int32)">
            <summary>
            Determines whether the specified coordinates are contained in this
             Polygon.
            </summary>
            <param name="x">the specified X coordinate to be tested.</param>
            <param name="y">the specified Y coordinate to be tested.</param>
            <returns>true if this Polygon contains
                     the specified coordinates (x,y);
                    false otherwise.</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Polygon.Contains(System.Int32,System.Int32)">
            <summary>
            Tests if the specified coordinates are inside the boundary of the
            IShape.
            </summary>
            <param name="x">the specified X coordinate to be tested</param>
            <param name="y">the specified Y coordinate to be tested.</param>
            <returns>
            	true if the specified coordinates are inside
            the IShape boundary; false
            otherwise.
            </returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Polygon.Intersects(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Tests if the interior of the IShape intersects the
            interior of a specified rectangular area.
            </summary>
            <remarks>
            The rectangular area is considered to intersect the IShape
            if any point is contained in both the interior of the
            IShape and the specified rectangular area.
            The IShape.intersects()method allows a IShape
            implementation to conservatively return true when:
            <ul>
            		<li>
            there is a high probability that the rectangular area and the
            IShape intersect, but
            </li>
            the calculations to accurately determine this intersection
            are prohibitively expensive.
            </ul>
            This means that for some Shapes this method might
            return true even though the rectangular area does not
            intersect the IShape.
            The Area class performs
            more accurate computations of geometric intersection than most
            IShape objects and therefore can be used if a more precise
            answer is required.
            </remarks>
            <param name="x">the X coordinate of the upper-left corner
            of the specified rectangular area</param>
            <param name="y">the Y coordinate of the upper-left corner
            of the specified rectangular area</param>
            <param name="w">Tthe width of the specified rectangular area</param>
            <param name="h">the height of the specified rectangular area</param>
            <returns>
            	true if the interior of the IShape and
            the interior of the rectangular area intersect, or are
            both highly likely to intersect and intersection calculations
            would be too expensive to perform; false
            </returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Polygon.Intersects(Mapdigit.Drawing.Geometry.Rectangle)">
            <summary>
            Tests if the interior of the IShape intersects the
            interior of a specified Rectangle.
            </summary>
            <remarks>
            The IShape.intersects()method allows a IShape
            implementation to conservatively return true when:
            <ul>
            		<li>
            there is a high probability that the Rectangle and the
            IShape intersect, but
            </li>
            the calculations to accurately determine this intersection
            are prohibitively expensive.
            </ul>
            This means that for some Shapes this method might
            return true even though the Rectangle does not
            intersect the IShape.
            The Area class performs
            more accurate computations of geometric intersection than most
            IShape objects and therefore can be used if a more precise
            answer is required.
            </remarks>
            <param name="r">r the specified Rectangle.</param>
            <returns>
            	true if the interior of the IShape and
            the interior of the specified Rectangle
            intersect, or are both highly likely to intersect and intersection
            calculations would be too expensive to perform; false
            otherwise.
            </returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Polygon.Contains(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Tests if the interior of the IShape entirely contains
            the specified rectangular area. 
            </summary>
            <remarks>
             All coordinates that lie inside
            the rectangular area must lie within the IShape for the
            entire rectanglar area to be considered contained within the
            IShape.
            The IShape.contains() method allows a IShape
            implementation to conservatively return false when:
            <ul>
            		<li>
            the intersect method returns true and
            </li>
            the calculations to determine whether or not the
            IShape entirely contains the rectangular area are
            prohibitively expensive.
            </ul>
            This means that for some Shapes this method might
            return false even though the IShape contains
            the rectangular area.
            The Area class performs
            more accurate geometric computations than most
            IShape objects and therefore can be used if a more precise
            answer is required.
            </remarks>
            <param name="x">X coordinate of the upper-left corner
            of the specified rectangular area</param>
            <param name="y">the Y coordinate of the upper-left corner
            of the specified rectangular area</param>
            <param name="w">Tthe width of the specified rectangular area.</param>
            <param name="h">the height of the specified rectangular area.</param>
            <returns>
            	true if the interior of the IShape
            entirely contains the specified rectangular area;
            false otherwise or, if the IShape
            contains the rectangular area and the
            intersects method returns true
            and the containment calculations would be too expensive to
            perform.
            </returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Polygon.Contains(Mapdigit.Drawing.Geometry.Rectangle)">
            <summary>
            Tests if the interior of the IShape entirely contains the
            specified Rectangle.
            </summary>
            <remarks>
            The IShape.contains() method allows a IShape
            implementation to conservatively return false when:
            <ul>
            		<li>
            the intersect method returns true and
            </li>
            the calculations to determine whether or not the
            IShape entirely contains the Rectangle
            are prohibitively expensive.
            </ul>
            This means that for some Shapes this method might
            return false even though the IShape contains
            the Rectangle.
            The Area class performs
            more accurate geometric computations than most
            IShape objects and therefore can be used if a more precise
            answer is required.
            </remarks>
            <param name="r">The specified Rectangle</param>
            <returns>
            	true if the interior of the IShape
            entirely contains the Rectangle;
            false otherwise or, if the IShape
            contains the Rectangle and the
            intersects method returns true
            and the containment calculations would be too expensive to
            perform.
            </returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Polygon.GetPathIterator(Mapdigit.Drawing.Geometry.AffineTransform)">
            <summary>
            Returns an iterator object that iterates along the
            IShape boundary and provides access to the geometry of the
            IShape outline.  
            </summary>
            <remarks>
            If an optional AffineTransform
            is specified, the coordinates returned in the iteration are
            transformed accordingly.
            Each call to this method returns a fresh IPathIterator
            object that traverses the geometry of the IShape object
            independently from any other IPathIterator objects in use
            at the same time.
            It is recommended, but not guaranteed, that objects
            implementing the IShape interface isolate iterations
            that are in process from any changes that might occur to the original
            object's geometry during such iterations.
            </remarks>
            <param name="at">an optional AffineTransform to be applied to the
            coordinates as they are returned in the iteration, or
            null if untransformed coordinates are desired</param>
            <returns>
            a new IPathIterator object, which independently
            traverses the geometry of the IShape.
            </returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Polygon.GetPathIterator(Mapdigit.Drawing.Geometry.AffineTransform,System.Int32)">
            <summary>
            Returns an iterator object that iterates along the IShape
            boundary and provides access to a flattened view of the
            IShape outline geometry.
            </summary>
            <remarks>
            Only SegMoveto, SegLineto, and SegClose point types are
            returned by the iterator.
            If an optional AffineTransform is specified,
            the coordinates returned in the iteration are transformed
            accordingly.
            The amount of subdivision of the curved segments is controlled
            by the flatness parameter, which specifies the
            maximum distance that any point on the unflattened transformed
            curve can deviate from the returned flattened path segments.
            remember that a limit on the accuracy of the flattened path might be
            silently imposed, causing very small flattening parameters to be
            treated as larger values.  This limit, if there is one, is
            defined by the particular implementation that is used.
            Each call to this method returns a fresh IPathIterator
            object that traverses the IShape object geometry
            independently from any other IPathIterator objects in use at
            the same time.
            It is recommended, but not guaranteed, that objects
            implementing the IShape interface isolate iterations
            that are in process from any changes that might occur to the original
            object's geometry during such iterations.
            </remarks>
            <param name="at">an optional AffineTransform to be applied to the
            coordinates as they are returned in the iteration, or
            null if untransformed coordinates are desired</param>
            <param name="flatness">the maximum distance that the line segments used to
            approximate the curved segments are allowed to deviate
            from any point on the original curve</param>
            <returns>
            a new IPathIterator that independently traverses
            a flattened view of the geometry of the  IShape.
            </returns>
        </member>
        <member name="F:Mapdigit.Drawing.Geometry.Polygon._bounds">
            The bounds of this Polygon.
            This Value can be null.
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Polygon.CalculateBounds(System.Int32[],System.Int32[],System.Int32)">
            <summary>
             Calculates the bounding box of the points passed to the constructor.
            Sets bounds to the result.
            </summary>
            <param name="xpoints">array of <i>x</i> coordinates</param>
            <param name="ypoints">array of <i>y</i> coordinates.</param>
            <param name="npoints">the total number of points.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Polygon.UpdateBounds(System.Int32,System.Int32)">
            <summary>
            Resizes the bounding box to accomodate the specified coordinates.
            </summary>
            <param name="x">The x coordinates.</param>
            <param name="y">The y coordinates.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Polygon.GetBoundingBox">
            <summary>
            Returns the bounds of this Polygon.
            </summary>
            <returns>the bounds of this Polygon.</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Polygon.GetCrossings(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the crossings.
            </summary>
            <param name="xlo">The xlo.</param>
            <param name="ylo">The ylo.</param>
            <param name="xhi">The xhi.</param>
            <param name="yhi">The yhi.</param>
            <returns></returns>
        </member>
        <member name="P:Mapdigit.Drawing.Geometry.Polygon.Bounds">
            <summary>
            Returns an integer Rectangle that completely encloses the IShape. 
            </summary>
            <remarks>
             remember that there is no guarantee that the
            returned Rectangle is the smallest bounding box that
            encloses the IShape, only that the IShape
            lies entirely within the indicated  Rectangle.  The
            returned Rectangle might also fail to completely
            enclose the IShape if the IShape overflows
            the limited range of the integer data type.  The
            getBounds method generally returns a
            tighter bounding box due to its greater flexibility in
            representation.
            </remarks>
            <returns>
            an integer Rectangle that completely encloses
            the IShape.
            </returns>
        </member>
        <member name="T:Mapdigit.Drawing.Geometry.Polygon.PolygonPathIterator">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Polygon.PolygonPathIterator.IsDone">
            Tests if there are more points to read.
            @return true if there are more points to read;
                     false otherwise.
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Polygon.PolygonPathIterator.Next">
            Moves the iterator forwards, along the primary direction of
            traversal, to the next segment of the path when there are
            more points in that direction.
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Polygon.PolygonPathIterator.CurrentSegment(System.Int32[])">
            Returns the coordinates and type of the current path segment in
            the iteration.
            The return Value is the path segment type:
            SegMoveto, SegLineto, or SegClose.
            A int array of length 2 must be passed in and
            can be used to store the coordinates of the point(s).
            Each point is stored as a pair of int x,y
            coordinates.  SegMoveto and SegLineto types return one
            point, and SegClose does not return any points.
            @param coords a int array that specifies the
            coordinates of the point(s)
            @return an integer representing the type and coordinates of the
            		current path segment.
        </member>
        <member name="P:Mapdigit.Drawing.Geometry.Polygon.PolygonPathIterator.WindingRule">
            Returns the winding rule for determining the interior of the
            path.
            @return an integer representing the current winding rule.
        </member>
        <member name="T:Mapdigit.Drawing.Geometry.Polyline">
            <summary>
             The Polyline class encapsulates a description of a 
            collection of line segments within a coordinate space.
            </summary>
        </member>
        <member name="F:Mapdigit.Drawing.Geometry.Polyline.NumOfPoints">
            <summary>
             The total number of points. 
            </summary>
            <remarks>
             The Value of npoints
            represents the number of valid points in this Polyline
            and might be less than the number of elements in 
            xpoints or  ypoints.
            This Value can be NULL.
            </remarks>
        </member>
        <member name="F:Mapdigit.Drawing.Geometry.Polyline.XPoints">
            <summary>
            The array of X coordinates.  
            </summary>
            <remarks>
            The number of elements in 
            this array might be more than the number of X coordinates
            in this Polyline.  The extra elements allow new points
            to be added to this Polyline without re-creating this
            array.  The Value of npoints is equal to the
            number of valid points in this Polyline.
            </remarks>
        </member>
        <member name="F:Mapdigit.Drawing.Geometry.Polyline.YPoints">
             <summary>
             The array of Y coordinates. 
             </summary>
             <remarks>
              The number of elements in
             this array might be more than the number of Y coordinates
             in this Polyline.  The extra elements allow new points    
             to be added to this Polyline without re-creating this
             array.  The Value of npoints is equal to the
             number of valid points in this Polyline. 
            </remarks>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Polyline.FromString(System.String)">
            <summary>
            Parse polyline from a string
            </summary>
            <param name="input">The input.</param>
            <returns>polyline object</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Polyline.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mapdigit.Drawing.Geometry.Polyline"/> class.
            </summary>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Polyline.#ctor(System.Int32[],System.Int32[],System.Int32)">
            <summary>
            Constructs and initializes a Polyline from the specified 
            parameters. 
            </summary>
            <param name="xpoints">an array of X coordinates.</param>
            <param name="ypoints">an array of Y coordinates.</param>
            <param name="npoints">the total number of points in the    
            			Polyline.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Polyline.Reset">
            <summary>
            Resets this Polyline object to an empty polyline.
            </summary>
            <remarks>
            The coordinate arrays and the data in them are left untouched
            but the number of points is reset to zero to mark the old
            vertex data as invalid and to start accumulating new vertex
            data at the beginning.
            All internally-cached data relating to the old vertices
            are discarded.
            remember that since the coordinate arrays from before the reset
            are reused, creating a new empty Polyline might
            be more memory efficient than resetting the current one if
            the number of vertices in the new polygon data is significantly
            smaller than the number of vertices in the data from before the
            reset.
            </remarks>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Polyline.Invalidate">
            <summary>
            Invalidates or flushes any internally-cached data that depends
            on the vertex coordinates of this Polyline.
            </summary>
            <remarks>
            This method should be called after any direct manipulation
            of the coordinates in the xpoints or
            ypoints arrays to avoid inconsistent results
            from methods such as getBounds or contains
            that might cache data from earlier computations relating to
            the vertex coordinates.
            </remarks>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Polyline.Translate(System.Int32,System.Int32)">
            <summary>
            Translates the vertices of the Polyline by 
            deltaX along the x axis and by 
            deltaY along the y axis.
            </summary>
            <param name="deltaX">the amount to translate along the X axis.</param>
            <param name="deltaY">the amount to translate along the Y axis.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Polyline.AddPoint(Mapdigit.Drawing.Geometry.Point)">
            <summary>
            Appends the specified coordinates to this Polyline.
            </summary>
            <remarks>
            If an operation that calculates the bounding box of this
            Polyline has already been performed, such as
            getBounds or contains, then this
            method updates the bounding box.
            </remarks>
            <param name="pt">a point to be added.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Polyline.AddPoint(System.Int32,System.Int32)">
            <summary>
            Appends the specified coordinates to this Polyline. 
            </summary>
            <remarks>
            If an operation that calculates the bounding box of this     
            Polyline has already been performed, such as  
            getBounds or contains, then this 
            method updates the bounding box. 
            </remarks>
            <param name="x">the specified X coordinate.</param>
            <param name="y">the specified Y coordinate</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Polyline.Contains(Mapdigit.Drawing.Geometry.Point)">
            <summary>
            Tests if a specified Point is inside the boundary
            of the IShape.
            </summary>
            <param name="p">the specified Point to be tested</param>
            <returns>
            	true if the specified Point is
            inside the boundary of the IShape;
            false otherwise.
            </returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Polyline.Contains(System.Int32,System.Int32)">
            <summary>
            Tests if the specified coordinates are inside the boundary of the
            IShape.
            </summary>
            <param name="x">the specified X coordinate to be tested</param>
            <param name="y">the specified Y coordinate to be tested.</param>
            <returns>
            	true if the specified coordinates are inside
            the IShape boundary; false
            otherwise.
            </returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Polyline.Contains(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Tests if the interior of the IShape entirely contains
            the specified rectangular area.  
            </summary>
            <remarks>
            All coordinates that lie inside
            the rectangular area must lie within the IShape for the
            entire rectanglar area to be considered contained within the
            IShape.
            The IShape.contains() method allows a IShape
            implementation to conservatively return false when:
            <ul>
            		<li>
            the intersect method returns true and
            </li>
            the calculations to determine whether or not the
            IShape entirely contains the rectangular area are
            prohibitively expensive.
            </ul>
            This means that for some Shapes this method might
            return false even though the IShape contains
            the rectangular area.
            The Area class performs
            more accurate geometric computations than most
            IShape objects and therefore can be used if a more precise
            answer is required.
            </remarks>
            <param name="x">X coordinate of the upper-left corner
            of the specified rectangular area</param>
            <param name="y">the Y coordinate of the upper-left corner
            of the specified rectangular area</param>
            <param name="w">Tthe width of the specified rectangular area.</param>
            <param name="h">the height of the specified rectangular area.</param>
            <returns>
            	true if the interior of the IShape
            entirely contains the specified rectangular area;
            false otherwise or, if the IShape
            contains the rectangular area and the
            intersects method returns true
            and the containment calculations would be too expensive to
            perform.
            </returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Polyline.Inside(System.Int32,System.Int32)">
            <summary>
            Determines whether the specified coordinates are contained in this 
            Polyline.
            </summary>
            <param name="x">the specified X coordinate to be tested</param>
            <param name="y">the specified Y coordinate to be tested.</param>
            <returns>true if this Polyline contains
                     the specified coordinates (x,y);
                     false otherwise.</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Polyline.Intersects(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Tests if the interior of the IShape intersects the
            interior of a specified rectangular area.
            </summary>
            <remarks>
            The rectangular area is considered to intersect the IShape
            if any point is contained in both the interior of the
            IShape and the specified rectangular area.
            The IShape.intersects() method allows a IShape
            implementation to conservatively return true when:
            <ul>
            		<li>
            there is a high probability that the rectangular area and the
            IShape intersect, but
            </li>
            the calculations to accurately determine this intersection
            are prohibitively expensive.
            </ul>
            This means that for some Shapes this method might
            return true even though the rectangular area does not
            intersect the IShape.
            The Area class performs
            more accurate computations of geometric intersection than most
            IShape objects and therefore can be used if a more precise
            answer is required.
            </remarks>
            <param name="x">the X coordinate of the upper-left corner
            of the specified rectangular area</param>
            <param name="y">the Y coordinate of the upper-left corner
            of the specified rectangular area</param>
            <param name="w">Tthe width of the specified rectangular area</param>
            <param name="h">the height of the specified rectangular area</param>
            <returns>
            	true if the interior of the IShape and
            the interior of the rectangular area intersect, or are
            both highly likely to intersect and intersection calculations
            would be too expensive to perform; false
            </returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Polyline.Intersects(Mapdigit.Drawing.Geometry.Rectangle)">
            <summary>
            Tests if the interior of the IShape intersects the
            interior of a specified Rectangle.
            </summary>
            <remarks>
            The IShape.intersects() method allows a IShape
            implementation to conservatively return true when:
            <ul>
            		<li>
            there is a high probability that the Rectangle and the
            IShape intersect, but
            </li>
            the calculations to accurately determine this intersection
            are prohibitively expensive.
            </ul>
            This means that for some Shapes this method might
            return true even though the Rectangle does not
            intersect the IShape.
            The Area class performs
            more accurate computations of geometric intersection than most
            IShape objects and therefore can be used if a more precise
            answer is required.
            </remarks>
            <param name="r">r the specified Rectangle.</param>
            <returns>
            	true if the interior of the IShape and
            the interior of the specified Rectangle
            intersect, or are both highly likely to intersect and intersection
            calculations would be too expensive to perform; false
            otherwise.
            </returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Polyline.Contains(Mapdigit.Drawing.Geometry.Rectangle)">
            <summary>
            Tests if the interior of the IShape entirely contains the
            specified Rectangle.
            </summary>
            <remarks>
            The IShape.contains() method allows a IShape
            implementation to conservatively return false when:
            <ul>
            		<li>
            the intersect method returns true and
            </li>
            the calculations to determine whether or not the
            IShape entirely contains the Rectangle
            are prohibitively expensive.
            </ul>
            This means that for some Shapes this method might
            return false even though the IShape contains
            the Rectangle.
            The Area class performs
            more accurate geometric computations than most
            IShape objects and therefore can be used if a more precise
            answer is required.
            </remarks>
            <param name="r">The specified Rectangle</param>
            <returns>
            	true if the interior of the IShape
            entirely contains the Rectangle;
            false otherwise or, if the IShape
            contains the Rectangle and the
            intersects method returns true
            and the containment calculations would be too expensive to
            perform.
            </returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Polyline.GetPathIterator(Mapdigit.Drawing.Geometry.AffineTransform)">
            <summary>
            Returns an iterator object that iterates along the
            IShape boundary and provides access to the geometry of the
            IShape outline.  
            </summary>
            <remarks>
            If an optional AffineTransform
            is specified, the coordinates returned in the iteration are
            transformed accordingly.
            Each call to this method returns a fresh IPathIterator
            object that traverses the geometry of the IShape object
            independently from any other IPathIterator objects in use
            at the same time.
            It is recommended, but not guaranteed, that objects
            implementing the IShape interface isolate iterations
            that are in process from any changes that might occur to the original
            object's geometry during such iterations.
            </remarks>
            <param name="at">an optional AffineTransform to be applied to the
            coordinates as they are returned in the iteration, or
            null if untransformed coordinates are desired</param>
            <returns>
            a new IPathIterator object, which independently
            traverses the geometry of the IShape.
            </returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Polyline.GetPathIterator(Mapdigit.Drawing.Geometry.AffineTransform,System.Int32)">
            <summary>
            Returns an iterator object that iterates along the IShape
            boundary and provides access to a flattened view of the
            IShape outline geometry.
            </summary>
            <remarks>
            Only SegMoveto, SegLineto, and SegClose point types are
            returned by the iterator.
            If an optional AffineTransform is specified,
            the coordinates returned in the iteration are transformed
            accordingly.
            The amount of subdivision of the curved segments is controlled
            by the flatness parameter, which specifies the
            maximum distance that any point on the unflattened transformed
            curve can deviate from the returned flattened path segments.
            remember that a limit on the accuracy of the flattened path might be
            silently imposed, causing very small flattening parameters to be
            treated as larger values.  This limit, if there is one, is
            defined by the particular implementation that is used.
            Each call to this method returns a fresh IPathIterator
            object that traverses the IShape object geometry
            independently from any other IPathIterator objects in use at
            the same time.
            It is recommended, but not guaranteed, that objects
            implementing the IShape interface isolate iterations
            that are in process from any changes that might occur to the original
            object's geometry during such iterations.
            </remarks>
            <param name="at">an optional AffineTransform to be applied to the
            coordinates as they are returned in the iteration, or
            null if untransformed coordinates are desired</param>
            <param name="flatness">the maximum distance that the line segments used to
            approximate the curved segments are allowed to deviate
            from any point on the original curve</param>
            <returns>
            a new IPathIterator that independently traverses
            a flattened view of the geometry of the  IShape.
            </returns>
        </member>
        <member name="F:Mapdigit.Drawing.Geometry.Polyline._bounds">
            The bounds of this Polyline.
            This Value can be null.
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Polyline.CalculateBounds(System.Int32[],System.Int32[],System.Int32)">
            <summary>
            Calculates the bounding box of the points passed to the constructor.
             Sets bounds to the result.
            </summary>
            <param name="xpoints">array of <i>x</i> coordinates</param>
            <param name="ypoints">array of <i>y</i> coordinates</param>
            <param name="npoints"> the total number of points.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Polyline.GetBoundingBox">
            <summary>
            Returns the bounds of this Polyline.
            </summary>
            <returns>the bounds of this Polyline.</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Polyline.UpdateBounds(System.Int32,System.Int32)">
            <summary>
            Resizes the bounding box to accomodate the specified coordinates.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Polyline.GetCrossings(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the crossings.
            </summary>
            <param name="xlo">The xlo.</param>
            <param name="ylo">The ylo.</param>
            <param name="xhi">The xhi.</param>
            <param name="yhi">The yhi.</param>
            <returns></returns>
        </member>
        <member name="P:Mapdigit.Drawing.Geometry.Polyline.Bounds">
            <summary>
            Returns an integer Rectangle that completely encloses the IShape. 
            </summary>
            <remarks>
             Remember that there is no guarantee that the
            returned Rectangle is the smallest bounding box that
            encloses the IShape, only that the IShape
            lies entirely within the indicated  Rectangle.  The
            returned Rectangle might also fail to completely
            enclose the IShape if the IShape overflows
            the limited range of the integer data type.  The
            getBounds method generally returns a
            tighter bounding box due to its greater flexibility in
            representation.
            </remarks>
            <returns>
            an integer Rectangle that completely encloses
            the IShape.
            </returns>
        </member>
        <member name="T:Mapdigit.Drawing.Geometry.Polyline.PolylinePathIterator">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Polyline.PolylinePathIterator.IsDone">
            Tests if there are more points to read.
            @return true if there are more points to read;
                     false otherwise.
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Polyline.PolylinePathIterator.Next">
            Moves the iterator forwards, along the primary direction of
            traversal, to the next segment of the path when there are
            more points in that direction.
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Polyline.PolylinePathIterator.CurrentSegment(System.Int32[])">
            Returns the coordinates and type of the current path segment in
            the iteration.
            The return Value is the path segment type:
            SegMoveto, SegLineto, or SegClose.
            A int array of length 2 must be passed in and
            can be used to store the coordinates of the point(s).
            Each point is stored as a pair of int x,y
            coordinates.  SegMoveto and SegLineto types return one
            point, and SegClose does not return any points.
            @param coords a int array that specifies the
            coordinates of the point(s)
            @return an integer representing the type and coordinates of the 
            		current path segment.
        </member>
        <member name="P:Mapdigit.Drawing.Geometry.Polyline.PolylinePathIterator.WindingRule">
            Returns the winding rule for determining the interior of the
            path.
            @return an integer representing the current winding rule.
        </member>
        <member name="T:Mapdigit.Drawing.Geometry.QuadCurve">
            <summary>
             A quadratic parametric curve segment
            </summary>
        </member>
        <member name="F:Mapdigit.Drawing.Geometry.QuadCurve.X1">
            <summary>
            The X coordinate of the start point of the quadratic curve segment.
            </summary>
        </member>
        <member name="F:Mapdigit.Drawing.Geometry.QuadCurve.Y1">
            <summary>
            The Y coordinate of the start point of the quadratic curve segment.
            </summary>
        </member>
        <member name="F:Mapdigit.Drawing.Geometry.QuadCurve.Ctrlx">
            <summary>
             The X coordinate of the control point of the quadratic curve segment.
            </summary>
        </member>
        <member name="F:Mapdigit.Drawing.Geometry.QuadCurve.Ctrly">
            <summary>
             The Y coordinate of the control point of the quadratic curve segment.
            </summary>
            
        </member>
        <member name="F:Mapdigit.Drawing.Geometry.QuadCurve.X2">
            <summary>
             The X coordinate of the end point of the quadratic curve segment.
            </summary>
        </member>
        <member name="F:Mapdigit.Drawing.Geometry.QuadCurve.Y2">
            <summary>
             The Y coordinate of the end point of the quadratic curve segment.
            </summary>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.QuadCurve.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mapdigit.Drawing.Geometry.QuadCurve"/> class.
            </summary>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.QuadCurve.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructs and initializes a QuadCurve from the
            specified double coordinates.
            </summary>
            <param name="x1">the X coordinate of the start point.</param>
            <param name="y1">the Y coordinate of the start point.</param>
            <param name="ctrlx">the X coordinate of the control point.</param>
            <param name="ctrly">the Y coordinate of the control point.</param>
            <param name="x2">the X coordinate of the end point</param>
            <param name="y2">the Y coordinate of the end point.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.QuadCurve.SetCurve(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Sets the location of the end points and control point of this curve
            to the specified double coordinates.
            </summary>
            <param name="x1">the X coordinate of the start point.</param>
            <param name="y1">the Y coordinate of the start point.</param>
            <param name="ctrlx">T the X coordinate of the control point.</param>
            <param name="ctrly"> the Y coordinate of the control point.</param>
            <param name="x2">the X coordinate of the end point.</param>
            <param name="y2">the Y coordinate of the end point.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.QuadCurve.SetCurve(System.Double[],System.Int32)">
            <summary>
            Sets the location of the end points and control points of this
            QuadCurve to the double coordinates at
            the specified offset in the specified array.
            </summary>
            <param name="coords">the array containing coordinate values.</param>
            <param name="offset">the index into the array from which to start
            getting the coordinate values and assigning them to this
            	QuadCurve.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.QuadCurve.SetCurve(Mapdigit.Drawing.Geometry.Point,Mapdigit.Drawing.Geometry.Point,Mapdigit.Drawing.Geometry.Point)">
            <summary>
            Sets the location of the end points and control point of this
            QuadCurve to the specified Point
            coordinates.
            </summary>
            <param name="p1">the start point</param>
            <param name="cp">the control point.</param>
            <param name="p2">the end point.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.QuadCurve.SetCurve(Mapdigit.Drawing.Geometry.Point[],System.Int32)">
            <summary>
            Sets the location of the end points and control points of this
            QuadCurve to the coordinates of the
            Point objects at the specified offset in
            the specified array.
            </summary>
            <param name="pts">an array containing Point that define
            		coordinate values.</param>
            <param name="offset"> the index into pts from which to start
            	getting the coordinate values and assigning them to this
            	QuadCurve.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.QuadCurve.SetCurve(Mapdigit.Drawing.Geometry.QuadCurve)">
            <summary>
            Sets the location of the end points and control point of this
            QuadCurve to the same as those in the specified
            QuadCurve.
            </summary>
            <param name="c">the specified QuadCurve</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.QuadCurve.GetFlatnessSq(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the square of the flatness, or maximum distance of a
            control point from the line connecting the end points, of the
            quadratic curve specified by the indicated control points.
            </summary>
            <param name="x1">the X coordinate of the start point</param>
            <param name="y1">the Y coordinate of the start point</param>
            <param name="ctrlx">the X coordinate of the control point</param>
            <param name="ctrly">the Y coordinate of the control point.</param>
            <param name="x2">the X coordinate of the end point.</param>
            <param name="y2">the Y coordinate of the end point.</param>
            <returns>the square of the flatness of the quadratic curve
            		defined by the specified coordinates.</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.QuadCurve.GetFlatness(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the flatness, or maximum distance of a
            control point from the line connecting the end points, of the
            quadratic curve specified by the indicated control points.
            </summary>
            <param name="x1">the X coordinate of the start point</param>
            <param name="y1">the Y coordinate of the start point</param>
            <param name="ctrlx">the X coordinate of the control point</param>
            <param name="ctrly">the Y coordinate of the control point.</param>
            <param name="x2">the X coordinate of the end point.</param>
            <param name="y2">the Y coordinate of the end point.</param>
            <returns>the flatness of the quadratic curve defined by the
            		specified coordinates.</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.QuadCurve.GetFlatnessSq(System.Int32[],System.Int32)">
            <summary>
            Returns the square of the flatness, or maximum distance of a
            control point from the line connecting the end points, of the
            quadratic curve specified by the control points stored in the
            indicated array at the indicated index.
            </summary>
            <param name="coords">an array containing coordinate values.</param>
            <param name="offset">the index into coords from which to
            		to start getting the values from the array.</param>
            <returns>the flatness of the quadratic curve that is defined by the
            		values in the specified array at the specified index.</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.QuadCurve.GetFlatness(System.Int32[],System.Int32)">
            <summary>
            Returns the flatness, or maximum distance of a
            control point from the line connecting the end points, of the
            quadratic curve specified by the control points stored in the
            indicated array at the indicated index.
            </summary>
            <param name="coords">an array containing coordinate values.</param>
            <param name="offset">the index into coords from which to
            		to start getting the values from the array.</param>
            <returns>the flatness of a quadratic curve defined by the
            	specified array at the specified offset.</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.QuadCurve.GetFlatnessSq">
            <summary>
             Returns the square of the flatness, or maximum distance of a
            control point from the line connecting the end points, of this
            QuadCurve.
            </summary>
            <returns>the square of the flatness of this
            QuadCurve.</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.QuadCurve.GetFlatness">
            <summary>
            Returns the flatness, or maximum distance of a
            control point from the line connecting the end points, of this
            QuadCurve.
            </summary>
            <returns>the flatness of this QuadCurve.</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.QuadCurve.Subdivide(Mapdigit.Drawing.Geometry.QuadCurve,Mapdigit.Drawing.Geometry.QuadCurve)">
            <summary>
            Subdivides this QuadCurve and stores the resulting
            two subdivided curves into the left and
            right curve parameters.
            </summary>
            <remarks>
            Either or both of the left and right
            objects can be the same as this QuadCurve or
            null.
            </remarks>
            <param name="left">the QuadCurve object for storing the
            left or first half of the subdivided curve</param>
            <param name="right">the QuadCurve object for storing the
            right or second half of the subdivided curve</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.QuadCurve.Subdivide(Mapdigit.Drawing.Geometry.QuadCurve,Mapdigit.Drawing.Geometry.QuadCurve,Mapdigit.Drawing.Geometry.QuadCurve)">
            <summary>
            Subdivides the quadratic curve specified by the src
            parameter and stores the resulting two subdivided curves into the
            left and right curve parameters.
            </summary>
            <remarks>
            Either or both of the left and right
            objects can be the same as the src object or
            null.
            </remarks>
            <param name="src">the quadratic curve to be subdivided.</param>
            <param name="left">the QuadCurve object for storing the
            		left or first half of the subdivided curve.</param>
            <param name="right"> the QuadCurve object for storing the
            	right or second half of the subdivided curve</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.QuadCurve.Subdivide(System.Double[],System.Int32,System.Double[],System.Int32,System.Double[],System.Int32)">
            <summary>
            Subdivides the quadratic curve specified by the coordinates
            stored in the src array at indices
            srcoff through srcoff+5
            and stores the resulting two subdivided curves into the two
            result arrays at the corresponding indices.
            </summary>
            <remarks>
            Either or both of the left and right
            arrays can be null or a reference to the same array
            and offset as the src array.
            Remember that the last point in the first subdivided curve is the
            same as the first point in the second subdivided curve.  Thus,
            it is possible to pass the same array for left and
            right and to use offsets such that
            rightoff equals leftoff + 4 in order
            to avoid allocating extra storage for this common point.
            </remarks>
            <param name="src">the array holding the coordinates for the source curve.</param>
            <param name="srcoff"> the offset into the array of the beginning of the
             the 6 source coordinates.</param>
            <param name="left"> the array for storing the coordinates for the first
             half of the subdivided curve</param>
            <param name="leftoff">the offset into the array of the beginning of the
             the 6 left coordinates</param>
            <param name="right"> the array for storing the coordinates for the second
             half of the subdivided curve</param>
            <param name="rightoff">the offset into the array of the beginning of the
            the 6 right coordinates.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.QuadCurve.SolveQuadratic(System.Double[])">
            <summary>
            Solves the quadratic whose coefficients are in the eqn
            array and places the non-complex roots back into the same array,
            returning the number of roots. 
            </summary>
            <remarks>
             The quadratic solved is represented
            by the equation:
            <pre>
                eqn = {C, B, A};
                ax^2 + bx + c = 0
            </pre>
            A return value of -1 is used to distinguish a constant
            equation, which might be always 0 or never 0, from an equation that
            has no zeroes.
            </remarks>
            <param name="eqn">the array that contains the quadratic coefficients</param>
            <returns> the number of roots, or -1 if the equation is
            		a constant</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.QuadCurve.SolveQuadratic(System.Double[],System.Double[])">
             <summary>
             Solves the quadratic whose coefficients are in the eqn
             array and places the non-complex roots into the res
             array, returning the number of roots.
             </summary>
             <remarks>
             The quadratic solved is represented by the equation:
             <pre>
                 eqn = {C, B, A};
                 ax^2 + bx + c = 0
             </pre>
             A return value of -1 is used to distinguish a constant
             equation, which might be always 0 or never 0, from an equation that
             has no zeroes.
            </remarks>
             <param name="eqn">the specified array of coefficients to use to solve
                    the quadratic equation</param>
             <param name="res">the array that contains the non-complex roots
                     resulting from the solution of the quadratic equation.</param>
             <returns>the number of roots, or -1 if the equation is
             	a constant</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.QuadCurve.Contains(System.Int32,System.Int32)">
            <summary>
            Tests if the specified coordinates are inside the boundary of the
            IShape.
            </summary>
            <param name="x">the specified X coordinate to be tested</param>
            <param name="y">the specified Y coordinate to be tested.</param>
            <returns>
            	true if the specified coordinates are inside
            the IShape boundary; false
            otherwise.
            </returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.QuadCurve.Contains(Mapdigit.Drawing.Geometry.Point)">
            <summary>
            Tests if a specified Point is inside the boundary
            of the IShape.
            </summary>
            <param name="p">the specified Point to be tested</param>
            <returns>
            	true if the specified Point is
            inside the boundary of the IShape;
            false otherwise.
            </returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.QuadCurve.FillEqn(System.Double[],System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Fill an array with the coefficients of the parametric equation
            in t, ready for solving against val with solveQuadratic.
            </summary>
            <remarks>
            We currently have:
            <code>
                val = Py(t) = C1*(1-t)^2 + 2*CP*t*(1-t) + C2*t^2
                            = C1 - 2*C1*t + C1*t^2 + 2*CP*t - 2*CP*t^2 + C2*t^2
                            = C1 + (2*CP - 2*C1)*t + (C1 - 2*CP + C2)*t^2
                          0 = (C1 - val) + (2*CP - 2*C1)*t + (C1 - 2*CP + C2)*t^2
                          0 = C + Bt + At^2
                C = C1 - val
                B = 2*CP - 2*C1
                A = C1 - 2*CP + C2
            </code>
            </remarks>
            <param name="eqn">The eqn.</param>
            <param name="val">The val.</param>
            <param name="c1">The c1.</param>
            <param name="cp">The cp.</param>
            <param name="c2">The c2.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.QuadCurve.EvalQuadratic(System.Double[],System.Int32,System.Boolean,System.Boolean,System.Double[],System.Double,System.Double,System.Double)">
            <summary>
            Evaluate the t values in the first num slots of the vals[] array
            and place the evaluated values back into the same array. 
            </summary>
            <remarks>
            Only evaluate t values that are within the range [0, 1], including
            the 0 and 1 ends of the range iff the include0 or include1
            booleans are true.  If an "inflection" equation is handed in,
            then any points which represent a point of inflection for that
            quadratic equation are also ignored.
            </remarks>
            <param name="vals">The vals.</param>
            <param name="num">The num.</param>
            <param name="include0">if set to <c>true</c> [include0].</param>
            <param name="include1">if set to <c>true</c> [include1].</param>
            <param name="inflect">The inflect.</param>
            <param name="c1">The c1.</param>
            <param name="ctrl">The CTRL.</param>
            <param name="c2">The c2.</param>
            <returns></returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.QuadCurve.GetTag(System.Double,System.Double,System.Double)">
            <summary>
            Determine where coord lies with respect to the range from
            low to high.  It is assumed that low is less than high.  The return
            value is one of the 5 values BELOW, LOWEDGE, INSIDE, HIGHEDGE,
            or ABOVE.
            </summary>
            <param name="coord">The coord.</param>
            <param name="low">The low.</param>
            <param name="high">The high.</param>
            <returns></returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.QuadCurve.Inwards(System.Int32,System.Int32,System.Int32)">
            <summary>
            Determine if the pttag represents a coordinate that is already
            in its test range, or is on the border with either of the two
            opttags representing another coordinate that is "towards the
            inside" of that test range.  In other words, are either of the
            two "opt" points "drawing the pt inward"?
            </summary>
            <param name="pttag">The pttag.</param>
            <param name="opt1Tag">The opt1 tag.</param>
            <param name="opt2Tag">The opt2 tag.</param>
            <returns></returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.QuadCurve.Intersects(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Tests if the interior of the IShape intersects the
            interior of a specified rectangular area.
            </summary>
            <remarks>
            The rectangular area is considered to intersect the IShape
            if any point is contained in both the interior of the
            IShape and the specified rectangular area.
            The IShape.intersects() method allows a IShape
            implementation to conservatively return true when:
            <ul>
            		<li>
            there is a high probability that the rectangular area and the
            IShape intersect, but
            </li>
            the calculations to accurately determine this intersection
            are prohibitively expensive.
            </ul>
            This means that for some Shapes this method might
            return true even though the rectangular area does not
            intersect the IShape.
            The Area class performs
            more accurate computations of geometric intersection than most
            IShape objects and therefore can be used if a more precise
            answer is required.
            </remarks>
            <param name="x">the X coordinate of the upper-left corner
            of the specified rectangular area</param>
            <param name="y">the Y coordinate of the upper-left corner
            of the specified rectangular area</param>
            <param name="w">Tthe width of the specified rectangular area</param>
            <param name="h">the height of the specified rectangular area</param>
            <returns>
            	true if the interior of the IShape and
            the interior of the rectangular area intersect, or are
            both highly likely to intersect and intersection calculations
            would be too expensive to perform; false
            </returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.QuadCurve.Intersects(Mapdigit.Drawing.Geometry.Rectangle)">
            <summary>
            Tests if the interior of the IShape intersects the
            interior of a specified Rectangle.
            </summary>
            <remarks>
            The IShape.intersects() method allows a IShape
            implementation to conservatively return true when:
            <ul>
            		<li>
            there is a high probability that the Rectangle and the
            IShape intersect, but
            </li>
            the calculations to accurately determine this intersection
            are prohibitively expensive.
            </ul>
            This means that for some Shapes this method might
            return true even though the Rectangle does not
            intersect the IShape.
            The Area class performs
            more accurate computations of geometric intersection than most
            IShape objects and therefore can be used if a more precise
            answer is required.
            </remarks>
            <param name="r">r the specified Rectangle.</param>
            <returns>
            	true if the interior of the IShape and
            the interior of the specified Rectangle
            intersect, or are both highly likely to intersect and intersection
            calculations would be too expensive to perform; false
            otherwise.
            </returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.QuadCurve.Contains(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Tests if the interior of the IShape entirely contains
            the specified rectangular area. 
            </summary>
            <remarks>
             All coordinates that lie inside
            the rectangular area must lie within the IShape for the
            entire rectanglar area to be considered contained within the
            IShape.
            The IShape.contains() method allows a IShape
            implementation to conservatively return false when:
            <ul>
            		<li>
            the intersect method returns true and
            </li>
            the calculations to determine whether or not the
            IShape entirely contains the rectangular area are
            prohibitively expensive.
            </ul>
            This means that for some Shapes this method might
            return false even though the IShape contains
            the rectangular area.
            The Area class performs
            more accurate geometric computations than most
            IShape objects and therefore can be used if a more precise
            answer is required.
            </remarks>
            <param name="x">X coordinate of the upper-left corner
            of the specified rectangular area</param>
            <param name="y">the Y coordinate of the upper-left corner
            of the specified rectangular area</param>
            <param name="w">Tthe width of the specified rectangular area.</param>
            <param name="h">the height of the specified rectangular area.</param>
            <returns>
            	true if the interior of the IShape
            entirely contains the specified rectangular area;
            false otherwise or, if the IShape
            contains the rectangular area and the
            intersects method returns true
            and the containment calculations would be too expensive to
            perform.
            </returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.QuadCurve.Contains(Mapdigit.Drawing.Geometry.Rectangle)">
            <summary>
            Tests if the interior of the IShape entirely contains the
            specified Rectangle.
            </summary>
            <remarks>
            The IShape.contains() method allows a IShape
            implementation to conservatively return false when:
            <ul>
            		<li>
            the intersect method returns true and
            </li>
            the calculations to determine whether or not the
            IShape entirely contains the Rectangle
            are prohibitively expensive.
            </ul>
            This means that for some Shapes this method might
            return false even though the IShape contains
            the Rectangle.
            The Area class performs
            more accurate geometric computations than most
            IShape objects and therefore can be used if a more precise
            answer is required.
            </remarks>
            <param name="r">The specified Rectangle</param>
            <returns>
            	true if the interior of the IShape
            entirely contains the Rectangle;
            false otherwise or, if the IShape
            contains the Rectangle and the
            intersects method returns true
            and the containment calculations would be too expensive to
            perform.
            </returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.QuadCurve.GetPathIterator(Mapdigit.Drawing.Geometry.AffineTransform)">
            <summary>
            Returns an iterator object that iterates along the
            IShape boundary and provides access to the geometry of the
            IShape outline.  
            </summary>
            <remarks>
            If an optional AffineTransform
            is specified, the coordinates returned in the iteration are
            transformed accordingly.
            Each call to this method returns a fresh IPathIterator
            object that traverses the geometry of the IShape object
            independently from any other IPathIterator objects in use
            at the same time.
            It is recommended, but not guaranteed, that objects
            implementing the IShape interface isolate iterations
            that are in process from any changes that might occur to the original
            object's geometry during such iterations.
            </remarks>
            <param name="at">an optional AffineTransform to be applied to the
            coordinates as they are returned in the iteration, or
            null if untransformed coordinates are desired</param>
            <returns>
            a new IPathIterator object, which independently
            traverses the geometry of the IShape.
            </returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.QuadCurve.GetPathIterator(Mapdigit.Drawing.Geometry.AffineTransform,System.Int32)">
            <summary>
            Returns an iterator object that iterates along the IShape
            boundary and provides access to a flattened view of the
            IShape outline geometry.
            </summary>
            <remarks>
            Only SegMoveto, SegLineto, and SegClose point types are
            returned by the iterator.
            If an optional AffineTransform is specified,
            the coordinates returned in the iteration are transformed
            accordingly.
            The amount of subdivision of the curved segments is controlled
            by the flatness parameter, which specifies the
            maximum distance that any point on the unflattened transformed
            curve can deviate from the returned flattened path segments.
            remember that a limit on the accuracy of the flattened path might be
            silently imposed, causing very small flattening parameters to be
            treated as larger values.  This limit, if there is one, is
            defined by the particular implementation that is used.
            Each call to this method returns a fresh IPathIterator
            object that traverses the IShape object geometry
            independently from any other IPathIterator objects in use at
            the same time.
            It is recommended, but not guaranteed, that objects
            implementing the IShape interface isolate iterations
            that are in process from any changes that might occur to the original
            object's geometry during such iterations.
            </remarks>
            <param name="at">an optional AffineTransform to be applied to the
            coordinates as they are returned in the iteration, or
            null if untransformed coordinates are desired</param>
            <param name="flatness">the maximum distance that the line segments used to
            approximate the curved segments are allowed to deviate
            from any point on the original curve</param>
            <returns>
            a new IPathIterator that independently traverses
            a flattened view of the geometry of the  IShape.
            </returns>
        </member>
        <member name="P:Mapdigit.Drawing.Geometry.QuadCurve.IntX1">
            <summary>
            Returns the X coordinate of the start poin
            </summary>
        </member>
        <member name="P:Mapdigit.Drawing.Geometry.QuadCurve.IntY1">
            <summary>
            Returns the Y coordinate of the start point
            </summary>
        </member>
        <member name="P:Mapdigit.Drawing.Geometry.QuadCurve.P1">
            <summary>
            Returns the start point.
            </summary>
        </member>
        <member name="P:Mapdigit.Drawing.Geometry.QuadCurve.IntCtrlX">
            <summary>
            Returns the X coordinate of the control point
            </summary>
        </member>
        <member name="P:Mapdigit.Drawing.Geometry.QuadCurve.IntCtrlY">
            <summary>
            Returns the Y coordinate of the control point
            </summary>
        </member>
        <member name="P:Mapdigit.Drawing.Geometry.QuadCurve.CtrlPt">
            <summary>
            Returns the control point.
            </summary>
        </member>
        <member name="P:Mapdigit.Drawing.Geometry.QuadCurve.IntX2">
            <summary>
            Returns the X coordinate of the end point
            </summary>
        </member>
        <member name="P:Mapdigit.Drawing.Geometry.QuadCurve.IntY2">
            <summary>
            Returns the Y coordinate of the end point
            </summary>
        </member>
        <member name="P:Mapdigit.Drawing.Geometry.QuadCurve.P2">
            <summary>
            Returns the end point.
            </summary>
        </member>
        <member name="P:Mapdigit.Drawing.Geometry.QuadCurve.Bounds">
            <summary>
            Returns an integer Rectangle that completely encloses the IShape. 
            </summary>
            <remarks>
             remember that there is no guarantee that the
            returned Rectangle is the smallest bounding box that
            encloses the IShape, only that the IShape
            lies entirely within the indicated  Rectangle.  The
            returned Rectangle might also fail to completely
            enclose the IShape if the IShape overflows
            the limited range of the integer data type.  The
            getBounds method generally returns a
            tighter bounding box due to its greater flexibility in
            representation.
            </remarks>
            <returns>
            an integer Rectangle that completely encloses
            the IShape.
            </returns>
        </member>
        <member name="T:Mapdigit.Drawing.Geometry.QuadIterator">
            <summary>
            A utility class to iterate over the path segments of a quadratic curve
            segment through the IPathIterator interface.
            </summary>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.QuadIterator.#ctor(Mapdigit.Drawing.Geometry.QuadCurve,Mapdigit.Drawing.Geometry.AffineTransform)">
            <summary>
            Initializes a new instance of the <see cref="T:Mapdigit.Drawing.Geometry.QuadIterator"/> class.
            </summary>
            <param name="q">The q.</param>
            <param name="at">At.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.QuadIterator.IsDone">
            <summary>
            Tests if the iteration is complete.
            </summary>
            <returns>
            	true if all the segments have
            been read; false otherwise.
            </returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.QuadIterator.Next">
            <summary>
            Moves the iterator to the next segment of the path forwards
            along the primary direction of traversal as long as there are
            more points in that direction.
            </summary>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.QuadIterator.CurrentSegment(System.Int32[])">
            <summary>
            Returns the coordinates and type of the current path segment in
            the iteration.
            The return value is the path-segment type:
            SegMoveto, SegLineto, SegQuadto, SegCubicto, or SegClose.
            A long array of length 6 must be passed in and can be used to
            store the coordinates of the point(s).
            Each point is stored as a pair of long x,y coordinates.
            SegMoveto and SegLineto types returns one point,
            SegQuadto returns two points,
            SegCubicto returns 3 points
            and SegClose does not return any points.
            </summary>
            <param name="coords">an array that holds the data returned from
            this method</param>
            <returns>
            the path-segment type of the current path segment
            </returns>
        </member>
        <member name="P:Mapdigit.Drawing.Geometry.QuadIterator.WindingRule">
            <summary>
            Returns the winding rule for determining the interior of the path.
            </summary>
            <returns>the winding rule</returns>
        </member>
        <member name="T:Mapdigit.Drawing.Geometry.Rectangle">
             <summary>
             A Rectangle specifies an area in a coordinate space that is
             enclosed by the Rectangle object's upper-left point
             (x,y)
             in the coordinate space, its width, and its height.
             </summary>
             <remarks>
             
             A Rectangle object's width and
             height are public fields. The constructors
             that create a Rectangle, and the methods that can modify
             one, do not prevent setting a negative value for width or height.
             
             A Rectangle whose width or height is exactly zero has location
             along those axes with zero dimension, but is otherwise considered empty.
             The isEmpty method will return true for such a Rectangle.
             Methods which test if an empty Rectangle contains or intersects
             a point or rectangle will always return false if either dimension is zero.
             Methods which combine such a Rectangle with a point or rectangle
             will include the location of the Rectangle on that axis in the
             result as if the add(Point) method were being called.
             A Rectangle whose width or height is negative has neither
             location nor dimension along those axes with negative dimensions.
             Such a Rectangle is treated as non-existant along those axes.
             Such a Rectangle is also empty with respect to containment
             calculations and methods which test if it contains or intersects a
             point or rectangle will always return false.
             Methods which combine such a Rectangle with a point or rectangle
             will ignore the Rectangle entirely in generating the result.
             If two Rectangle objects are combined and each has a negative
             dimension, the result will have at least one negative dimension.
             
             Methods which affect only the location of a Rectangle will
             operate on its location regardless of whether or not it has a negative
             or zero dimension along either axis.
             
             Remember that a Rectangle constructed with the default no-argument
             constructor will have dimensions of 0x0 and therefore be empty.
             That Rectangle will still have a location of (0,0) and
             will contribute that location to the union and add operations.
             Code attempting to accumulate the bounds of a set of points should
             therefore initially construct the Rectangle with a specifically
             negative width and height or it should use the first point in the set
             to construct the Rectangle.
             For example:
             <pre>
                 Rectangle bounds = new Rectangle(0, 0, -1, -1);
                 for (int i = 0; i &lt; points.length; i++) {
                     bounds.add(points[i]);
                 }
             </pre>
             or if we know that the points array contains at least one point:
             <pre>
                 Rectangle bounds = new Rectangle(points[0]);
                 for (int i = 1; i &lt; points.length; i++) {
                     bounds.add(points[i]);
                 }
             </pre>
             
             This class uses 32-bit integers to store its location and dimensions.
             Frequently operations may produce a result that exceeds the range of
             a 32-bit integer.
             The methods will calculate their results in a way that avoids any
             32-bit overflow for intermediate results and then choose the best
             representation to store the final results back into the 32-bit fields
             which hold the location and dimensions.
             The location of the result will be stored into the xand
             yfields by clipping the true result to the nearest 32-bit value.
             The values stored into the width and height dimension
             fields will be chosen as the 32-bit values that encompass the largest
             part of the true result as possible.
             Generally this means that the dimension will be clipped independently
             to the range of 32-bit integers except that if the location had to be
             moved to store it into its pair of 32-bit fields then the dimensions
             will be adjusted relative to the "best representation" of the location.
             If the true result had a negative dimension and was therefore
             non-existant along one or both axes, the stored dimensions will be
             negative numbers in those axes.
             If the true result had a location that could be represented within
             the range of 32-bit integers, but zero dimension along one or both
             axes, then the stored dimensions will be zero in those axes.
            
            </remarks>
        </member>
        <member name="F:Mapdigit.Drawing.Geometry.Rectangle.OutLeft">
            <summary>
            The bitmask that indicates that a point lies to the left of
            this Rectangle.
            </summary>
        </member>
        <member name="F:Mapdigit.Drawing.Geometry.Rectangle.OutTop">
            <summary>
             The bitmask that indicates that a point lies above
            this Rectangle.
            </summary>
        </member>
        <member name="F:Mapdigit.Drawing.Geometry.Rectangle.OutRight">
            <summary>
            The bitmask that indicates that a point lies to the right of
            this Rectangle.
            </summary>
        </member>
        <member name="F:Mapdigit.Drawing.Geometry.Rectangle.OutBottom">
            <summary>
            The bitmask that indicates that a point lies below
            this Rectangle.
            </summary>
        </member>
        <member name="F:Mapdigit.Drawing.Geometry.Rectangle.X">
            <summary>
            The X coordinate of the upper-left corner of the Rectangle.
            </summary>
        </member>
        <member name="F:Mapdigit.Drawing.Geometry.Rectangle.Y">
            <summary>
            The Y coordinate of the upper-left corner of the Rectangle.
            </summary>
        </member>
        <member name="F:Mapdigit.Drawing.Geometry.Rectangle.Width">
            <summary>
            The width of the Rectangle.
            </summary>
        </member>
        <member name="F:Mapdigit.Drawing.Geometry.Rectangle.Height">
            <summary>
            The height of the Rectangle.
            </summary>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Rectangle.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mapdigit.Drawing.Geometry.Rectangle"/> class.
            </summary>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Rectangle.#ctor(Mapdigit.Drawing.Geometry.Rectangle)">
            <summary>
            Constructs a new Rectangle, initialized to match
            the values of the specified Rectangle.
            </summary>
            <param name="r">the Rectangle from which to copy initial values
                      to a newly constructed Rectangle</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Rectangle.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructs a new Rectangle whose upper-left corner is
            specified as
            (x,y) and whose width and height
            are specified by the arguments of the same name.
            </summary>
            <param name="x">the specified X coordinate.</param>
            <param name="y">the specified Y coordinate.</param>
            <param name="width">the width of the Rectangle.</param>
            <param name="height">the height of the Rectangle.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Rectangle.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructs a new Rectangle whose upper-left corner
            is at (0,0) in the coordinate space, and whose width and
            height are specified by the arguments of the same name.
            </summary>
            <param name="width">the width of the Rectangle.</param>
            <param name="height">the height of the Rectangle.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Rectangle.#ctor(Mapdigit.Drawing.Geometry.Point,Mapdigit.Drawing.Geometry.Point)">
            <summary>
            Constructs a new Rectangle with given two points.
            </summary>
            <param name="p1">one corner point of the rectangle.</param>
            <param name="p2">one corner point of the rectangle.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Rectangle.#ctor(System.Int32,System.Int32,Mapdigit.Drawing.Geometry.Dimension)">
            <summary>
            Creates a new instance of Rectangle at position (x, y) and with
             predefine dimension
            </summary>
            <param name="x">x the x coordinate of the rectangle</param>
            <param name="y">y the y coordinate of the rectangle</param>
            <param name="d">d the Dimension of the rectangle</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Rectangle.#ctor(Mapdigit.Drawing.Geometry.Point,Mapdigit.Drawing.Geometry.Dimension)">
            <summary>
            Constructs a new Rectangle whose upper-left corner is
            specified by the Point argument, and
            whose width and height are specified by the
            Dimension argument.
            </summary>
            <param name="p">a Point that is the upper-left corner of
            the Rectangle</param>
            <param name="d">a Dimension, representing the
            width and height of the Rectangle</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Rectangle.#ctor(Mapdigit.Drawing.Geometry.Point)">
            <summary>
            Constructs a new Rectangle whose upper-left corner is the
            specified Point, and whose width and height are both zero.
            </summary>
            <param name="p">a Point that is the top left corner
            of the Rectangle.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Rectangle.#ctor(Mapdigit.Drawing.Geometry.Dimension)">
            <summary>
            Constructs a new Rectangle whose top left corner is
            (0,0) and whose width and height are specified
            by the Dimension argument.
            </summary>
            <param name="d">a Dimension, specifying width and height</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Rectangle.SetRect(Mapdigit.Drawing.Geometry.Rectangle)">
            <summary>
            Sets this Rectangle to be the same as the specified Rectangle.
            </summary>
            <param name="r">the specified Rectangle</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Rectangle.SetRect(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the bounds of this Rectangle to the integer bounds
            which encompass the specified x, y, width,
            and height.
            </summary>
            <remarks>
            If the parameters specify a Rectangle that exceeds the
            maximum range of integers, the result will be the best
            representation of the specified Rectangle intersected
            with the maximum integer bounds.
            </remarks>
            <param name="x">the X coordinate of the upper-left corner of
                              the specified rectangle</param>
            <param name="y">the Y coordinate of the upper-left corner of
                             the specified rectangle</param>
            <param name="width">the width of the specified rectangle</param>
            <param name="height">the new height of the specified rectangle.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Rectangle.IntersectsLine(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Tests if the specified line segment intersects the interior of this
            Rectangle.
            </summary>
            <param name="x1">the X coordinate of the start point of the specified
                       line segment</param>
            <param name="y1">the Y coordinate of the start point of the specified
                       line segment</param>
            <param name="x2">the X coordinate of the end point of the specified
                       line segment.</param>
            <param name="y2">the Y coordinate of the end point of the specified
                       line segment</param>
            <returns>true if the specified line segment intersects
            the interior of this Rectangle; false
            otherwise.</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Rectangle.IntersectsLine(Mapdigit.Drawing.Geometry.Line)">
            <summary>
            Tests if the specified line segment intersects the interior of this
            Rectangle.
            </summary>
            <param name="l">the specified Line to test for intersection
            with the interior of this Rectangle.</param>
            <returns> true if the specified Line
            intersects the interior of this Rectangle;
            false otherwise.</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Rectangle.Outcode(Mapdigit.Drawing.Geometry.Point)">
            <summary>
            Determines where the specified Point lies with
            respect to this Rectangle.
            </summary>
            <remarks>
            This method computes a binary OR of the appropriate mask values
            indicating, for each side of this Rectangle,
            whether or not the specified Point is on the same
            side of the edge as the rest of this Rectangle.
            </remarks>
            <param name="p">the specified Point</param>
            <returns>the logical OR of all appropriate out codes.</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Rectangle.SetFrame(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the location and size of the framing rectangle of this
            IShape to the specified rectangular values.
            </summary>
            <param name="x">the X coordinate of the upper-left corner of the
            specified rectangular shape</param>
            <param name="y">the Y coordinate of the upper-left corner of the
            specified rectangular shape</param>
            <param name="w">the width of the specified rectangular shape</param>
            <param name="h">the height of the specified rectangular shape</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Rectangle.Contains(System.Int32,System.Int32)">
            <summary>
            Determines whether [contains] [the specified r X].
            </summary>
            <param name="rX">The r X.</param>
            <param name="rY">The r Y.</param>
            <returns>
            	<c>true</c> if [contains] [the specified r X]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Rectangle.Intersects(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Intersectses the specified x.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <returns></returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Rectangle.Intersects(Mapdigit.Drawing.Geometry.Rectangle)">
            <summary>
            Intersectses the specified rect.
            </summary>
            <param name="rect">The rect.</param>
            <returns></returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Rectangle.Intersects(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Helper method allowing us to determine if two coordinate sets intersect. This saves
            us the need of creating a rectangle object for a quick calculation
            </summary>
            <param name="tx">x of first rectangl</param>
            <param name="ty">y of first rectangle.</param>
            <param name="tw">width of first rectangle.</param>
            <param name="th">height of first rectangle</param>
            <param name="x">x of second rectangle</param>
            <param name="y">y of second rectangle</param>
            <param name="width">width width of second rectangle.</param>
            <param name="height">height height of second rectangle.</param>
            <returns>true if the rectangles intersect</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Rectangle.Contains(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Determines whether [contains] [the specified r X].
            </summary>
            <param name="rX">The r X.</param>
            <param name="rY">The r Y.</param>
            <param name="rWidth">Width of the r.</param>
            <param name="rHeight">Height of the r.</param>
            <returns>
            	<c>true</c> if [contains] [the specified r X]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Rectangle.Intersect(Mapdigit.Drawing.Geometry.Rectangle,Mapdigit.Drawing.Geometry.Rectangle,Mapdigit.Drawing.Geometry.Rectangle)">
            <summary>
            Intersects the pair of specified source Rectangle
            objects and puts the result into the specified destination
            Rectangle object. 
            </summary>
            <remarks>
             One of the source rectangles
            can also be the destination to avoid creating a third Rectangle
            object, but in this case the original points of this source
            rectangle will be overwritten by this method.
            </remarks>
            <param name="src1"> the first of a pair of Rectangle
            objects to be intersected with each other</param>
            <param name="src2">the second of a pair of Rectangle
             objects to be intersected with each other.</param>
            <param name="dest">the Rectangle that holds the
            results of the intersection of src1 and
            src2.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Rectangle.Union(Mapdigit.Drawing.Geometry.Rectangle,Mapdigit.Drawing.Geometry.Rectangle,Mapdigit.Drawing.Geometry.Rectangle)">
            <summary>
            Unions the pair of source Rectangle objects
            and puts the result into the specified destination
            Rectangle object.  
            </summary>
            <remarks>
            One of the source rectangles
            can also be the destination to avoid creating a third Rectangle
            object, but in this case the original points of this source
            rectangle will be overwritten by this method.
            </remarks>
            <param name="src1"> the first of a pair of Rectangle
            objects to be intersected with each other</param>
            <param name="src2">the second of a pair of Rectangle
             objects to be intersected with each other.</param>
            <param name="dest">the Rectangle that holds the
            results of the intersection of src1 and
            src2.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Rectangle.Add(System.Int32,System.Int32)">
            <summary>
            Adds a point, specified by the int precision arguments
            newx and newy, to this Rectangle.  
            </summary>
            <remarks>
            The resulting Rectangle
            is the smallest Rectangle that
            contains both the original Rectangle and the
            specified point.
            
            After adding a point, a call to contains with the
            added point as an argument does not necessarily return
            true. The contains method does not
            return true for points on the right or bottom
            edges of a rectangle. Therefore, if the added point falls on
            the left or bottom edge of the enlarged rectangle,
            contains returns false for that point.
            </remarks>
            <param name="newx">the X coordinate of the new point.</param>
            <param name="newy">the Y coordinate of the new point.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Rectangle.Add(Mapdigit.Drawing.Geometry.Point)">
            <summary>
            Adds the Point object pt to this  Rectangle.
            </summary>
            <remarks>
            The resulting Rectangle is the smallest
            Rectangle that contains both the original
            Rectangle and the specified Point.
            After adding a point, a call to contains with the
            added point as an argument does not necessarily return
            true. The contains
            method does not return true for points on the right
            or bottom edges of a rectangle. Therefore, if the added point falls
            on the left or bottom edge of the enlarged rectangle,
            contains returns false for that point.
            </remarks>
            <param name="pt"> pt the new Point to add to this
            Rectangle.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Rectangle.Add(Mapdigit.Drawing.Geometry.Rectangle)">
            <summary>
            Adds a Rectangle object to this Rectangle.  
            </summary>
            <remarks>
            The resulting Rectangle
            is the union of the two Rectangle objects.
            </remarks>
            <param name="r">the Rectangle to add to this
            Rectangle.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Rectangle.GetPathIterator(Mapdigit.Drawing.Geometry.AffineTransform)">
            <summary>
            Returns an iterator object that iterates along the
            IShape boundary and provides access to the geometry of the
            IShape outline. 
            </summary>
            <remarks>
             If an optional AffineTransform
            is specified, the coordinates returned in the iteration are
            transformed accordingly.
            Each call to this method returns a fresh IPathIterator
            object that traverses the geometry of the IShape object
            independently from any other IPathIterator objects in use
            at the same time.
            It is recommended, but not guaranteed, that objects
            implementing the IShape interface isolate iterations
            that are in process from any changes that might occur to the original
            object's geometry during such iterations.
            </remarks>
            <param name="at">an optional AffineTransform to be applied to the
            coordinates as they are returned in the iteration, or
            null if untransformed coordinates are desired</param>
            <returns>
            a new IPathIterator object, which independently
            traverses the geometry of the IShape.
            </returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Rectangle.GetPathIterator(Mapdigit.Drawing.Geometry.AffineTransform,System.Int32)">
            <summary>
            Returns an iterator object that iterates along the IShape
            boundary and provides access to a flattened view of the
            IShape outline geometry.
            </summary>
            <remarks>
            Only SegMoveto, SegLineto, and SegClose point types are
            returned by the iterator.
            If an optional AffineTransform is specified,
            the coordinates returned in the iteration are transformed
            accordingly.
            The amount of subdivision of the curved segments is controlled
            by the flatness parameter, which specifies the
            maximum distance that any point on the unflattened transformed
            curve can deviate from the returned flattened path segments.
            remember that a limit on the accuracy of the flattened path might be
            silently imposed, causing very small flattening parameters to be
            treated as larger values.  This limit, if there is one, is
            defined by the particular implementation that is used.
            Each call to this method returns a fresh IPathIterator
            object that traverses the IShape object geometry
            independently from any other IPathIterator objects in use at
            the same time.
            It is recommended, but not guaranteed, that objects
            implementing the IShape interface isolate iterations
            that are in process from any changes that might occur to the original
            object's geometry during such iterations.
            </remarks>
            <param name="at">an optional AffineTransform to be applied to the
            coordinates as they are returned in the iteration, or
            null if untransformed coordinates are desired</param>
            <param name="flatness">the maximum distance that the line segments used to
            approximate the curved segments are allowed to deviate
            from any point on the original curve</param>
            <returns>
            a new IPathIterator that independently traverses
            a flattened view of the geometry of the  IShape.
            </returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Rectangle.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms 
            and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Rectangle.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:System.Object"/> is equal to
             this instance; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
            </exception>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Rectangle.SetBounds(Mapdigit.Drawing.Geometry.Rectangle)">
            <summary>
            Sets the bounding Rectangle of this Rectangle
            to match the specified Rectangle.
            </summary>
            <remarks>
            This method is included for completeness, to parallel the
            setBounds method of Component.
            </remarks>
            <param name="r"> the specified Rectangle</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Rectangle.SetBounds(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the bounding Rectangle of this Rectangle to the specified
            x, y, width, and height.
            </summary>
            <remarks>
            This method is included for completeness, to parallel the
            setBounds method of Component.
            </remarks>
            <param name="x">the new X coordinate for the upper-left
                                corner of this Rectangle</param>
            <param name="y">the new Y coordinate for the upper-left
                                corner of this Rectangle</param>
            <param name="width">the new width for this Rectangle</param>
            <param name="height">the new height for this Rectangle</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Rectangle.GetLocation">
            <summary>
            Returns the location of this Rectangle.
            </summary>
            <remarks>
            This method is included for completeness, to parallel the
            getLocation method of Component.
            </remarks>
            <returns>the Point that is the upper-left corner of
            			this Rectangle.</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Rectangle.SetLocation(Mapdigit.Drawing.Geometry.Point)">
            <summary>
            Moves this Rectangle to the specified location.
            </summary>
            <remarks>
            This method is included for completeness, to parallel the
            setLocation method of Component.
            </remarks>
            <param name="p">the Point specifying the new location
                            for this Rectangle</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Rectangle.SetLocation(System.Int32,System.Int32)">
            <summary>
            Moves this Rectangle to the specified location.
            </summary>
            <remarks>
            This method is included for completeness, to parallel the
            setLocation method of Component.
            </remarks>
            <param name="x"> the X coordinate of the new location</param>
            <param name="y"> the Y coordinate of the new location</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Rectangle.Translate(System.Int32,System.Int32)">
            <summary>
            Translates this Rectangle the indicated distance,
            to the right along the X coordinate axis, and
            downward along the Y coordinate axis.
            </summary>
            <param name="dx">the distance to move this Rectangle
                             along the X axis</param>
            <param name="dy">the distance to move this Rectangle
                             along the Y axis</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Rectangle.GetSize">
            <summary>
            Gets the size of this Rectangle, represented by
            the returned Dimension.
            </summary>
            <remarks>
            This method is included for completeness, to parallel the
            getSize method of Component.
            </remarks>
            <returns>a Dimension, representing the size of
                        this Rectangle.</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Rectangle.SetSize(Mapdigit.Drawing.Geometry.Dimension)">
            <summary>
            Sets the size of this Rectangle to match the
            specified Dimension.
            </summary>
            <remarks>
            This method is included for completeness, to parallel the
            setSize method of Component.
            </remarks>
            <param name="d"> the new size for the Dimension object</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Rectangle.SetSize(System.Int32,System.Int32)">
            <summary>
            Sets the size of this Rectangle to the specified
            width and height.
            </summary>
            <remarks>
            This method is included for completeness, to parallel the
            setSize method of Component.
            </remarks>
            <param name="width">the new width for this Rectangle</param>
            <param name="height">the new height for this Rectangle</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Rectangle.Contains(Mapdigit.Drawing.Geometry.Point)">
            <summary>
            Tests if a specified Point is inside the boundary of the IShape.
            </summary>
            <param name="p">the specified Point to be tested</param>
            <returns>
            	true if the specified Point is
            inside the boundary of the IShape;
            false otherwise.
            </returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Rectangle.Contains(Mapdigit.Drawing.Geometry.Rectangle)">
            <summary>
            Determines whether [contains] [the specified rect].
            </summary>
            <param name="rect">The rect.</param>
            <returns>
            	<c>true</c> if [contains] [the specified rect]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Rectangle.Intersection(Mapdigit.Drawing.Geometry.Rectangle)">
            <summary>
            Computes the intersection of this Rectangle with the
            specified Rectangle.
            </summary>
            <remarks>
             Returns a new Rectangle
            that represents the intersection of the two rectangles.
            If the two rectangles do not intersect, the result will be
            an empty rectangle.
            </remarks>
            <param name="r"> the specified Rectangle</param>
            <returns> the largest Rectangle contained in both the
                       specified Rectangle and in
            	  this Rectangle; or if the rectangles
                       do not intersect, an empty rectangle.</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Rectangle.Union(Mapdigit.Drawing.Geometry.Rectangle)">
            <summary>
            Computes the union of this Rectangle with the
            specified Rectangle.
            </summary>
            <remarks>
             Returns a new Rectangle that represents the union of the two rectangles.
            
            If either Rectangle has any dimension less than zero
            the rules for non-existant rectangles apply.
            If only one has a dimension less than zero, then the result
            will be a copy of the other Rectangle.
            If both have dimension less than zero, then the result will
            have at least one dimension less than zero.
            
            If the resulting Rectangle would have a dimension
            too large to be expressed as an int, the result
            will have a dimension of  Integer.MAX_VALUE along
            that dimension.
            </remarks>
            <param name="r">the specified Rectangle</param>
            <returns>the smallest Rectangle containing both
            	  the specified Rectangle and this
            	  Rectangle.</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Rectangle.Grow(System.Int32,System.Int32)">
            <summary>
            Resizes the Rectangle both horizontally and vertically.
            </summary>
            <remarks>
            This method modifies the Rectangle so that it is
            h units larger on both the left and right side,
            and v units larger at both the top and bottom.
            
            The new Rectangle has (x - h, y - v)
            as its upper-left corner,
            width of  (width + 2h),
            and a height of (height + 2v).
            
            If negative values are supplied for h and
            v, the size of the Rectangle
            decreases accordingly.
            The  grow method will check for integer overflow
            and underflow, but does not check whether the resulting
            values of width and height grow
            from negative to non-negative or shrink from non-negative
            to negative.
            </remarks>
            <param name="h">the horizontal expansion.</param>
            <param name="v">the vertical expansion.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Rectangle.IsEmpty">
            <summary>
            Determines whether the RectangularShape is empty.
            When the RectangularShape is empty, it encloses no
            area.
            </summary>
            <returns>
            	<c>true</c> if this instance is empty; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Rectangle.SetEmpty">
            <summary>
            Set the rectangle to empty.
            </summary>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Rectangle.Outcode(System.Int32,System.Int32)">
            <summary>
            Determines where the specified coordinates lie with respect
            to this Rectangle.
            </summary>
            <remarks>
            This method computes a binary OR of the appropriate mask values
            indicating, for each side of this Rectangle,
            whether or not the specified coordinates are on the same side
            of the edge as the rest of this Rectangle.
            </remarks>
            <param name="x">the specified X coordinate</param>
            <param name="y">the specified Y coordinate</param>
            <returns>the logical OR of all appropriate out codes.</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Rectangle.CreateIntersection(Mapdigit.Drawing.Geometry.Rectangle)">
            <summary>
            Returns a new Rectangle object representing the
            intersection of this Rectangle with the specified
            Rectangle.
            </summary>
            <param name="r">the Rectangle to be intersected with
            this Rectangle</param>
            <returns>the largest Rectangle contained in both
            		the specified Rectangle and in this
            	Rectangle.</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Rectangle.CreateUnion(Mapdigit.Drawing.Geometry.Rectangle)">
            <summary>
            Returns a new Rectangle object representing the
            union of this Rectangle with the specified
            Rectangle.
            </summary>
            <param name="r">the Rectangle to be combined with
            this Rectangle</param>
            <returns>the smallest Rectangle containing both
            the specified Rectangle and this
            Rectangle.</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Rectangle.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Rectangle.Clip(System.Int32,System.Boolean)">
            <summary>
            Return best integer representation for v, clipped to integer
            range and floor-ed or ceiling-ed, depending on the boolean.
            </summary>
            <param name="v">The v.</param>
            <param name="doceil">if set to <c>true</c> [doceil].</param>
            <returns></returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Rectangle.Reshape(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the bounding Rectangle of this
            Rectangle to the specified
            x, y, width,
            and height.
            </summary>
            <param name="x">the new X coordinate for the upper-left
                                corner of this Rectangle</param>
            <param name="y">the new Y coordinate for the upper-left
                               corner of this Rectangle</param>
            <param name="width">the new width for this Rectangle.</param>
            <param name="height">the new height for this Rectangle.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Rectangle.Move(System.Int32,System.Int32)">
            <summary>
            Moves this Rectangle to the specified location.
            </summary>
            <param name="x">the X coordinate of the new location</param>
            <param name="y">the Y coordinate of the new location</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Rectangle.Resize(System.Int32,System.Int32)">
            <summary>
             Sets the size of this Rectangle to the specified
            width and height.
            </summary>
            <param name="width">the new width for this Rectangle</param>
            <param name="height">the new height for this Rectangle</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.Rectangle.Inside(System.Int32,System.Int32)">
            <summary>
            Checks whether or not this Rectangle contains the
            point at the specified location (X,Y).
            </summary>
            <param name="x">the specified X coordinate.</param>
            <param name="y">the specified Y coordinate.</param>
            <returns>true if the point
                       (X,Y) is inside this
            	  Rectangle;
                       false otherwise.</returns>
        </member>
        <member name="P:Mapdigit.Drawing.Geometry.Rectangle.IntX">
            <summary>
            Returns the X coordinate of the upper-left corner of
            the framing rectangle.
            </summary>
        </member>
        <member name="P:Mapdigit.Drawing.Geometry.Rectangle.IntY">
            <summary>
            Returns the Y coordinate of the upper-left corner of
            the framing rectangle .
            </summary>
        </member>
        <member name="P:Mapdigit.Drawing.Geometry.Rectangle.IntWidth">
            <summary>
            Returns the width of the framing rectangle.
            </summary>
        </member>
        <member name="P:Mapdigit.Drawing.Geometry.Rectangle.IntHeight">
            <summary>
            Returns the height of the framing rectangle.
            </summary>
        </member>
        <member name="P:Mapdigit.Drawing.Geometry.Rectangle.Bounds">
            <summary>
            Returns an integer Rectangle that completely encloses the IShape.  
            </summary>
            <remarks>
            remember that there is no guarantee that the
            returned Rectangle is the smallest bounding box that
            encloses the IShape, only that the IShape
            lies entirely within the indicated  Rectangle.  The
            returned Rectangle might also fail to completely
            enclose the IShape if the IShape overflows
            the limited range of the integer data type.  The
            getBounds method generally returns a
            tighter bounding box due to its greater flexibility in
            representation.
            </remarks>
            <returns>
            an integer Rectangle that completely encloses
            the IShape.
            </returns>
        </member>
        <member name="T:Mapdigit.Drawing.Geometry.RectIterator">
            <summary>
            A utility class to iterate over the path segments of an rounded rectangle
            through the IPathIterator interface.
            </summary>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.RectIterator.#ctor(Mapdigit.Drawing.Geometry.RectangularShape,Mapdigit.Drawing.Geometry.AffineTransform)">
            <summary>
            Initializes a new instance of the <see cref="T:Mapdigit.Drawing.Geometry.RectIterator"/> class.
            </summary>
            <param name="r">The r.</param>
            <param name="at">At.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.RectIterator.IsDone">
            <summary>
            Tests if the iteration is complete.
            </summary>
            <returns>
            	true if all the segments have
            been read; false otherwise.
            </returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.RectIterator.Next">
            <summary>
            Moves the iterator to the next segment of the path forwards
            along the primary direction of traversal as long as there are
            more points in that direction.
            </summary>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.RectIterator.CurrentSegment(System.Int32[])">
            <summary>
            Returns the coordinates and type of the current path segment in
            the iteration.
            The return value is the path-segment type:
            SegMoveto, SegLineto, SegQuadto, SegCubicto, or SegClose.
            A long array of length 6 must be passed in and can be used to
            store the coordinates of the point(s).
            Each point is stored as a pair of long x,y coordinates.
            SegMoveto and SegLineto types returns one point,
            SegQuadto returns two points,
            SegCubicto returns 3 points
            and SegClose does not return any points.
            </summary>
            <param name="coords">an array that holds the data returned from
            this method</param>
            <returns>
            the path-segment type of the current path segment
            </returns>
        </member>
        <member name="P:Mapdigit.Drawing.Geometry.RectIterator.WindingRule">
            <summary>
            Returns the winding rule for determining the interior of the path.
            </summary>
            <returns>the winding rule</returns>
        </member>
        <member name="T:Mapdigit.Drawing.Geometry.RoundRectangle">
            <summary>
            The RoundRectangle class defines a rectangle with rounded
            corners all specified in long coordinates.
            </summary>
        </member>
        <member name="F:Mapdigit.Drawing.Geometry.RoundRectangle.X">
            <summary>
            The X coordinate of this RoundRectangle.
            </summary>
        </member>
        <member name="F:Mapdigit.Drawing.Geometry.RoundRectangle.Y">
            <summary>
            The Y coordinate of this RoundRectangle.
            </summary>
        </member>
        <member name="F:Mapdigit.Drawing.Geometry.RoundRectangle.Width">
            <summary>
            The width of this RoundRectangle.
            </summary>
        </member>
        <member name="F:Mapdigit.Drawing.Geometry.RoundRectangle.Height">
            <summary>
            The height of this RoundRectangle.
            </summary>
        </member>
        <member name="F:Mapdigit.Drawing.Geometry.RoundRectangle.ArcWidth">
            <summary>
            The width of the arc that rounds off the corners.
            </summary>
        </member>
        <member name="F:Mapdigit.Drawing.Geometry.RoundRectangle.ArcHeight">
            <summary>
            The height of the arc that rounds off the corners.
            </summary>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.RoundRectangle.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mapdigit.Drawing.Geometry.RoundRectangle"/> class.
            </summary>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.RoundRectangle.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructs and initializes a RoundRectangle
            from the specified double coordinates.
            </summary>
            <param name="x">the X coordinate of the newly
                      constructed RoundRectangle</param>
            <param name="y">the Y coordinate of the newly
                      constructed RoundRectangle.</param>
            <param name="w">the width to which to set the newly
                      constructed RoundRectangle.</param>
            <param name="h">the height to which to set the newly
                      constructed RoundRectangle.</param>
            <param name="arcw">the width of the arc to use to round off the
                        corners of the newly constructed RoundRectangle</param>
            <param name="arch">the height of the arc to use to round off the
                        corners of the newly constructed
                        RoundRectangle</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.RoundRectangle.IsEmpty">
            <summary>
            Determines whether the RectangularShape is empty.
            When the RectangularShape is empty, it encloses no
            area.
            </summary>
            <returns>
            	true if this instance is empty; otherwise, false.
            </returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.RoundRectangle.SetRoundRect(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Sets the location, size, and corner radii of this
            RoundRectangle to the specified
            double values.
            </summary>
            <param name="x">X coordinate to which to set the
                     location of this RoundRectangle</param>
            <param name="y">the Y coordinate to which to set the
                      location of this RoundRectangle</param>
            <param name="w">the width to which to set this
                     RoundRectangle</param>
            <param name="h">the height to which to set this
                      RoundRectangle.</param>
            <param name="arcw">the width to which to set the arc of this
                             RoundRectangle.</param>
            <param name="arch">the height to which to set the arc of this
                              RoundRectangle</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.RoundRectangle.SetRoundRect(Mapdigit.Drawing.Geometry.RoundRectangle)">
            <summary>
            Sets this RoundRectangle to be the same as the
            specified RoundRectangle.
            </summary>
            <param name="rr">he specified RoundRectangle.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.RoundRectangle.SetFrame(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the location and size of the framing rectangle of this
            IShape to the specified rectangular values.
            </summary>
            <param name="x">the X coordinate of the upper-left corner of the
            specified rectangular shape</param>
            <param name="y">the Y coordinate of the upper-left corner of the
            specified rectangular shape</param>
            <param name="w">the width of the specified rectangular shape</param>
            <param name="h">the height of the specified rectangular shape</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.RoundRectangle.Contains(System.Int32,System.Int32)">
            <summary>
            Tests if the specified coordinates are inside the boundary of the
            IShape.
            </summary>
            <param name="x">the specified X coordinate to be tested</param>
            <param name="y">the specified Y coordinate to be tested.</param>
            <returns>
            	true if the specified coordinates are inside
            the IShape boundary; false
            otherwise.
            </returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.RoundRectangle.Intersects(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Tests if the interior of the IShape intersects the
            interior of a specified rectangular area.
            </summary>
            <remarks>
            The rectangular area is considered to intersect the IShape
            if any point is contained in both the interior of the
            IShape and the specified rectangular area.
            The IShape.intersects() method allows a IShape
            implementation to conservatively return true when:
            <ul>
            		<li>
            there is a high probability that the rectangular area and the
            IShape intersect, but
            </li>
            the calculations to accurately determine this intersection
            are prohibitively expensive.
            </ul>
            This means that for some Shapes this method might
            return true even though the rectangular area does not
            intersect the IShape.
            The Area class performs
            more accurate computations of geometric intersection than most
            IShape objects and therefore can be used if a more precise
            answer is required.
            </remarks>
            <param name="x">the X coordinate of the upper-left corner
            of the specified rectangular area</param>
            <param name="y">the Y coordinate of the upper-left corner
            of the specified rectangular area</param>
            <param name="w">Tthe width of the specified rectangular area</param>
            <param name="h">the height of the specified rectangular area</param>
            <returns>
            	true if the interior of the IShape and
            the interior of the rectangular area intersect, or are
            both highly likely to intersect and intersection calculations
            would be too expensive to perform; false
            </returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.RoundRectangle.Contains(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Tests if the interior of the IShape entirely contains
            the specified rectangular area.  
            </summary>
            <remarks>
            All coordinates that lie inside
            the rectangular area must lie within the IShape for the
            entire rectanglar area to be considered contained within the
            IShape.
            The IShape.contains() method allows a IShape
            implementation to conservatively return false when:
            <ul>
            		<li>
            the intersect method returns true and
            </li>
            the calculations to determine whether or not the
            IShape entirely contains the rectangular area are
            prohibitively expensive.
            </ul>
            This means that for some Shapes this method might
            return false even though the IShape contains
            the rectangular area.
            The Area class performs
            more accurate geometric computations than most
            IShape objects and therefore can be used if a more precise
            answer is required.
            </remarks>
            <param name="x">X coordinate of the upper-left corner
            of the specified rectangular area</param>
            <param name="y">the Y coordinate of the upper-left corner
            of the specified rectangular area</param>
            <param name="w">Tthe width of the specified rectangular area.</param>
            <param name="h">the height of the specified rectangular area.</param>
            <returns>
            	true if the interior of the IShape
            entirely contains the specified rectangular area;
            false otherwise or, if the IShape
            contains the rectangular area and the
            intersects method returns true
            and the containment calculations would be too expensive to
            perform.
            </returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.RoundRectangle.GetPathIterator(Mapdigit.Drawing.Geometry.AffineTransform)">
            <summary>
            Returns an iterator object that iterates along the
            IShape boundary and provides access to the geometry of the
            IShape outline.  
            </summary>
            <remarks>
            If an optional AffineTransform
            is specified, the coordinates returned in the iteration are
            transformed accordingly.
            Each call to this method returns a fresh IPathIterator
            object that traverses the geometry of the IShape object
            independently from any other IPathIterator objects in use
            at the same time.
            It is recommended, but not guaranteed, that objects
            implementing the IShape interface isolate iterations
            that are in process from any changes that might occur to the original
            object's geometry during such iterations.
            </remarks>
            <param name="at">an optional AffineTransform to be applied to the
            coordinates as they are returned in the iteration, or
            null if untransformed coordinates are desired</param>
            <returns>
            a new IPathIterator object, which independently
            traverses the geometry of the IShape.
            </returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.RoundRectangle.GetHashCode">
            <summary>
            Returns a hash c for this instance.
            </summary>
            <returns>
            A hash c for this instance, suitable for use in hashing algorithms 
            and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.RoundRectangle.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            	true if the specified <see cref="T:System.Object"/> is equal 
            to this instance; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
            </exception>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.RoundRectangle.Classify(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Classifies the specified coord.
            </summary>
            <param name="coord">The coord.</param>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <param name="arcsize">The arcsize.</param>
            <returns></returns>
        </member>
        <member name="P:Mapdigit.Drawing.Geometry.RoundRectangle.IntX">
            <summary>
            Returns the X coordinate of the upper-left corner of
            the framing rectangle.
            </summary>
        </member>
        <member name="P:Mapdigit.Drawing.Geometry.RoundRectangle.IntY">
            <summary>
            Returns the Y coordinate of the upper-left corner of
            the framing rectangle .
            </summary>
        </member>
        <member name="P:Mapdigit.Drawing.Geometry.RoundRectangle.IntWidth">
            <summary>
            Returns the width of the framing rectangle.
            </summary>
        </member>
        <member name="P:Mapdigit.Drawing.Geometry.RoundRectangle.IntHeight">
            <summary>
            Returns the height of the framing rectangle.
            </summary>
        </member>
        <member name="P:Mapdigit.Drawing.Geometry.RoundRectangle.Bounds">
            <summary>
            Returns an integer Rectangle that completely encloses the IShape.  
            </summary>
            <remarks>
            remember that there is no guarantee that the
            returned Rectangle is the smallest bounding box that
            encloses the IShape, only that the IShape
            lies entirely within the indicated  Rectangle.  The
            returned Rectangle might also fail to completely
            enclose the IShape if the IShape overflows
            the limited range of the integer data type.  The
            getBounds method generally returns a
            tighter bounding box due to its greater flexibility in
            representation.
            </remarks>
            <returns>
            an integer Rectangle that completely encloses
            the IShape.
            </returns>
        </member>
        <member name="T:Mapdigit.Drawing.Geometry.RoundRectIterator">
            <summary>
            A utility class to iterate over the path segments of an rounded rectangle
            through the IPathIterator interface.
            </summary>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.RoundRectIterator.#ctor(Mapdigit.Drawing.Geometry.RoundRectangle,Mapdigit.Drawing.Geometry.AffineTransform)">
            <summary>
            Initializes a new instance of the <see cref="T:Mapdigit.Drawing.Geometry.RoundRectIterator"/> class.
            </summary>
            <param name="rr">The rr.</param>
            <param name="at">At.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.RoundRectIterator.IsDone">
            <summary>
            Tests if the iteration is complete.
            </summary>
            <returns>
            	<c>true</c> if all the segments have
            been read; <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.RoundRectIterator.Next">
            <summary>
            Moves the iterator to the next segment of the path forwards
            along the primary direction of traversal as long as there are
            more points in that direction.
            </summary>
        </member>
        <member name="M:Mapdigit.Drawing.Geometry.RoundRectIterator.CurrentSegment(System.Int32[])">
            <summary>
            Returns the coordinates and type of the current path segment in
            the iteration.
            The return value is the path-segment type:
            SegMoveto, SegLineto, SegQuadto, SegCubicto, or SegClose.
            A long array of length 6 must be passed in and can be used to
            store the coordinates of the point(s).
            Each point is stored as a pair of long x,y coordinates.
            SegMoveto and SegLineto types returns one point,
            SegQuadto returns two points,
            SegCubicto returns 3 points
            and SegClose does not return any points.
            </summary>
            <param name="coords">an array that holds the data returned from
            this method</param>
            <returns>
            the path-segment type of the current path segment
            </returns>
        </member>
        <member name="P:Mapdigit.Drawing.Geometry.RoundRectIterator.WindingRule">
            <summary>
            Returns the winding rule for determining the interior of the path.
            </summary>
            <returns>the winding rule</returns>
        </member>
        <member name="T:Mapdigit.Drawing.Graphics2D">
            <summary>
            This Graphics2D class provides more sophisticated control over geometry,
            coordinate transformations, color management, and text layout.
            </summary>
            <remarks>
             This is the fundamental class for rendering 2-dimensional shapes, text and images
            </remarks>
        </member>
        <member name="M:Mapdigit.Drawing.Graphics2D.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor. create a graphics object with given width and height
            </summary>
            <param name="width">the width of the graphics 2d object..</param>
            <param name="height">the height of the graphics 2d object.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Graphics2D.Reset">
            <summary>
            Resets this graphics with default pen, color,brush etc.
            </summary>
        </member>
        <member name="M:Mapdigit.Drawing.Graphics2D.GetOutline(Mapdigit.Drawing.Pen,Mapdigit.Drawing.Geometry.IShape)">
            <summary>
            Get the shape's outline with given pen.
            </summary>
            <param name="pen">pen used to draw the shape, only the pen's width have
            the effect on the shape's outline.</param>
            <param name="shape">the input shape.</param>
            <returns>the outline shape if draw with given pen.</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Graphics2D.Draw(Mapdigit.Drawing.Pen,Mapdigit.Drawing.Geometry.IShape)">
            <summary>
            Strokes the outline of a IShape using the settings of the current
            Graphics2D context.
            </summary>
            <param name="pen">the pen used to stroke the shape.</param>
            <param name="shape"> the IShape to be rendered.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Graphics2D.Fill(Mapdigit.Drawing.Brush,Mapdigit.Drawing.Geometry.IShape)">
            <summary>
            Strokes the outline of a IShape using the settings of the current
            Graphics2D context.
            </summary>
            <param name="brush">the brush used to fill the shape.</param>
            <param name="shape">the IShape to be rendered.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Graphics2D.DrawChars(Mapdigit.Drawing.FontEx,System.Int32,System.Char[],System.Int32,System.Int32)">
            <summary>
             Draws the specified characters using the current font and color.
             The offset and length parameters must specify a valid range of characters
             within the character array data. The offset parameter must be within the
             range [0..(data.length)], inclusive
            </summary>
            <param name="font">font object</param>
            <param name="fontSize"> the size of the font</param>
            <param name="data">the array of characters to be drawn</param>
            <param name="x">x coordinate of the anchor point.</param>
            <param name="y">y coordinate of the anchor point.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Graphics2D.DrawChars(Mapdigit.Drawing.FontEx,System.Int32,System.Char[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
             Draws the specified characters using the current font and color.
             The offset and length parameters must specify a valid range of characters
             within the character array data. The offset parameter must be within the
             range [0..(data.length)], inclusive
            </summary>
            <param name="font">the font object</param>
            <param name="fontSize">the size of the font</param>
            <param name="data">the array of characters to be drawn.</param>
            <param name="offset">the start offset in the data</param>
            <param name="length">the number of characters to be drawn</param>
            <param name="x">x coordinate of the anchor point.</param>
            <param name="y">y coordinate of the anchor point.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Graphics2D.DrawChars(Mapdigit.Drawing.FontEx,System.Int32,System.Char[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
             Draws the specified characters using the current font and color.
             The offset and length parameters must specify a valid range of characters
             within the character array data. The offset parameter must be within the
             range [0..(data.length)], inclusive
            </summary>
            <param name="font">the font object</param>
            <param name="fontSize">the size of the font</param>
            <param name="data">the array of characters to be drawn.</param>
            <param name="offset">the start offset in the data</param>
            <param name="length">the number of characters to be drawn</param>
            <param name="x">x coordinate of the anchor point.</param>
            <param name="y">y coordinate of the anchor point.</param>
            <param name="tdir">text direction</param>
        </member>
        <member name="M:Mapdigit.Drawing.Graphics2D.DrawChars(Mapdigit.Drawing.FontEx,Mapdigit.Drawing.Brush,Mapdigit.Drawing.Pen,System.Int32,System.Char[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
             Draws the specified characters using the current font and color.
             The offset and length parameters must specify a valid range of characters
             within the character array data. The offset parameter must be within the
             range [0..(data.length)], inclusive
            </summary>
            <param name="font">the font object</param>
            <param name="pen">pen object</param>
            <param name="fontSize">the size of the font</param>
            <param name="data">the array of characters to be drawn.</param>
            <param name="offset">the start offset in the data</param>
            <param name="length">the number of characters to be drawn</param>
            <param name="x">x coordinate of the anchor point.</param>
            <param name="y">y coordinate of the anchor point.</param>
            <param name="brush">brush object</param>
            <param name="tdir">text direction</param>
        </member>
        <member name="M:Mapdigit.Drawing.Graphics2D.DrawLine(Mapdigit.Drawing.Pen,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws a line between the points (x1, y1) and (x2, y2).
            </summary>
            <param name="pen">pen used to draw the line.</param>
            <param name="x1">the first point's x coordinate.</param>
            <param name="y1">the first point's y coordinate.</param>
            <param name="x2">the second point's x coordinate.</param>
            <param name="y2">the second point's y coordinate.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Graphics2D.DrawLine(Mapdigit.Drawing.Pen,Mapdigit.Drawing.Geometry.Point,Mapdigit.Drawing.Geometry.Point)">
            <summary>
            Draws a line between the points pt1 and pt2.
            </summary>
            <param name="pen">pen used to draw the line</param>
            <param name="pt1">the first point.</param>
            <param name="pt2">the second point.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Graphics2D.SetPenAndBrush(Mapdigit.Drawing.Pen,Mapdigit.Drawing.Brush)">
            <summary>
            Set the default pen and brush together of the graphics
            </summary>
            <param name="pen">default pen to be used by the graphcis if any draw method's
             pen set to null.</param>
            <param name="brush">default brush to be used by the graphics.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Graphics2D.DrawRectangle(Mapdigit.Drawing.Pen,Mapdigit.Drawing.Geometry.Rectangle)">
            <summary>
            Draw a rectangle with given pen
            </summary>
            <param name="pen"> pen used to draw the rectangle.</param>
            <param name="rectangle">rectangle to be drawn..</param>
        </member>
        <member name="M:Mapdigit.Drawing.Graphics2D.FillRectangle(Mapdigit.Drawing.Brush,Mapdigit.Drawing.Geometry.Rectangle)">
            <summary>
            Fill a rectangle with given brush
            </summary>
            <param name="brush"> brush used to fill the rectangle..</param>
            <param name="rectangle">rectangle to be filled..</param>
        </member>
        <member name="M:Mapdigit.Drawing.Graphics2D.DrawOval(Mapdigit.Drawing.Pen,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws the outline of an oval. The result is a circle or ellipse that fits
            within the rectangle specified by the x, y, width, and height arguments.
            </summary>
            <param name="pen">pen used to draw the oval.</param>
            <param name="x">the x coordinate of the upper left corner of the oval to be drawn.</param>
            <param name="y">the y coordinate of the upper left corner of the oval to be drawn.</param>
            <param name="width">the width of the oval to be drawn.</param>
            <param name="height">the height of the oval to be drawn.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Graphics2D.FillOval(Mapdigit.Drawing.Brush,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
             Fills an oval bounded by the specified rectangle with the current color.
            </summary>
            <param name="brush">the brush used to fill the oval.</param>
            <param name="x">the x coordinate of the upper left corner of the oval to be filled.</param>
            <param name="y">the y coordinate of the upper left corner of the oval to be filled.</param>
            <param name="width">the width of the oval to be filled.</param>
            <param name="height">the height of the oval to be filled.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Graphics2D.DrawPolyline(Mapdigit.Drawing.Pen,Mapdigit.Drawing.Geometry.Polyline)">
            <summary>
            Draws the polyline.
            </summary>
            <param name="pen">the pen used to draw the polyline.</param>
            <param name="polyline">the polyline to be drawn.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Graphics2D.DrawPolygon(Mapdigit.Drawing.Pen,Mapdigit.Drawing.Geometry.Polygon)">
            <summary>
            Draws the polygon.
            </summary>
            <param name="pen">the pen used to draw the polygon.</param>
            <param name="polygon">the polygon to be drawn.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Graphics2D.FillPolygon(Mapdigit.Drawing.Brush,Mapdigit.Drawing.Geometry.Polygon)">
            <summary>
            Fills the polygon.
            </summary>
            <param name="brush">the brush used to fill the polygon.</param>
            <param name="polygon">the polygon to be filled.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Graphics2D.SetClip(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Set current clip of this graphcis object.
            </summary>
            <param name="x">the x coordinate of the top left point..</param>
            <param name="y">the y coordinate of the top left point..</param>
            <param name="width">the widht of the clip rectangle..</param>
            <param name="height">the height of the clip rectangle.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Graphics2D.DrawImage(System.Int32[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws the specified Image object at the specified location and with the
            specified size.
            </summary>
            <param name="imageRgb">Image object to draw.</param>
            <param name="width">Width of the portion of the source image to draw.</param>
            <param name="height">Height of the portion of the source image to draw.</param>
            <param name="dstX">x-coordinate of the upper-left corner of the drawn image.</param>
            <param name="dstY">y-coordinate of the upper-left corner of the drawn image</param>
        </member>
        <member name="M:Mapdigit.Drawing.Graphics2D.DrawImage(System.Int32[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws the specified Image object at the specified location and with the
            specified size.
            </summary>
            <param name="imageRgb">The image RGB.</param>
            <param name="width">Width of the portion of the source image to draw..</param>
            <param name="height">Height of the portion of the source image to draw.</param>
            <param name="dstX">x-coordinate of the upper-left corner of the drawn image.</param>
            <param name="dstY">y-coordinate of the upper-left corner of the drawn image</param>
            <param name="srcX">x-coordinate of the upper-left corner of the source image</param>
            <param name="srcY">y-coordinate of the upper-left corner of the source image.</param>
            <param name="dstWidth">Width of the destination image.</param>
            <param name="dstHeight">Height of the destination image.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Graphics2D.DrawImage(System.Int32[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws the specified Image object at the specified location and with the
            specified size.
            </summary>
            <param name="imageRgb">Image object to draw.</param>
            <param name="width">Width of the portion of the source image to draw..</param>
            <param name="height">Height of the portion of the source image to draw.</param>
            <param name="dstX">x-coordinate of the upper-left corner of the drawn image.</param>
            <param name="dstY">y-coordinate of the upper-left corner of the drawn image</param>
            <param name="transpency">specify the transparent color of the image.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Graphics2D.DrawImage(System.Int32[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws the transparent Image object at the specified location and with the
            specified size
            </summary>
            <param name="imageRgb">Image object to draw.</param>
            <param name="width">Width of the portion of the source image to draw..</param>
            <param name="height">Height of the portion of the source image to draw.</param>
            <param name="dstX">x-coordinate of the upper-left corner of the drawn image.</param>
            <param name="dstY">y-coordinate of the upper-left corner of the drawn image</param>
            <param name="transpency">specify the transparent color of the image.</param>
            <param name="alpha">The new alpha.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Graphics2D.Clear(Mapdigit.Drawing.Color)">
            <summary>
            Clear the graphicis object with given color.
            </summary>
            <param name="color">the color used to clear the graphics.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Graphics2D.Clear(System.Int32)">
            <summary>
            Clear the graphics content with given color.
            </summary>
            <param name="color">the clear color.</param>
        </member>
        <member name="F:Mapdigit.Drawing.Graphics2D._graphicsFp">
            the wraped graphicsFP object.
        </member>
        <member name="F:Mapdigit.Drawing.Graphics2D._defaultPen">
            default pen for drawing.
        </member>
        <member name="F:Mapdigit.Drawing.Graphics2D._defaultBrush">
            default brush for filling.
        </member>
        <member name="F:Mapdigit.Drawing.Graphics2D._graphicsWidth">
            <summary>
            graphics width
            </summary>
        </member>
        <member name="F:Mapdigit.Drawing.Graphics2D._graphicsHeight">
            <summary>
            graphics height.
            </summary>
        </member>
        <member name="M:Mapdigit.Drawing.Graphics2D.Union(Mapdigit.Drawing.Geometry.IShape)">
            <summary>
            Union the shape into single path.
            </summary>
            <param name="shape">shape the shape object..</param>
            <returns>a single path</returns>
        </member>
        <member name="M:Mapdigit.Drawing.Graphics2D.SetGraphicsFpPenAttribute(Mapdigit.Drawing.Pen)">
            <summary>
            Sset graphics pen attribute.
            </summary>
            <param name="pen">The pen.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Graphics2D.Merge(System.Int32,System.Int32)">
            <summary>
            Merges the two colors.
            </summary>
            <param name="color1">The color1.</param>
            <param name="color2">The color2.</param>
            <returns></returns>
        </member>
        <member name="P:Mapdigit.Drawing.Graphics2D.Width">
            <summary>
            get the height of the graphics object.
            </summary>
        </member>
        <member name="P:Mapdigit.Drawing.Graphics2D.Height">
            <summary>
            get the height of the graphics object.
            </summary>
        </member>
        <member name="P:Mapdigit.Drawing.Graphics2D.DefaultPen">
            <summary>
            the default pen of the graphics
            </summary>
        </member>
        <member name="P:Mapdigit.Drawing.Graphics2D.DefaultBrush">
            <summary>
            the default brush of the graphics
            </summary>
        </member>
        <member name="P:Mapdigit.Drawing.Graphics2D.AffineTransform">
            <summary>
            the current transformation matrix from user space to device space.
            </summary>
        </member>
        <member name="P:Mapdigit.Drawing.Graphics2D.ClipRect">
            <summary>
            the current clip of this graphcis object.
            </summary>
            <returns>the current clip  rectangle.</returns>
        </member>
        <member name="P:Mapdigit.Drawing.Graphics2D.Argb">
            <summary>
            Returns the content of this image as ARGB array.
            </summary>
        </member>
        <member name="P:Mapdigit.Drawing.Graphics2D.Item(System.Int32,System.Int32)">
            <summary>
            Gets the <see cref="T:System.Int32"/> with the specified x.
            </summary>
            <value></value>
        </member>
        <member name="T:Mapdigit.Drawing.LinearGradientBrush">
            <summary>
            The LinearGradientBrush class provides a way to fill a IShape with a 
            linear color gradient pattern. 
            </summary>
            <remarks>
            The user may specify two or more gradient colors, and this brush will 
            provide an interpolation between each color.  The user also specifies start
            and end points which define where in user space the color gradient should 
            begin and end.
            The user must provide an array of integers specifying how to distribute the
            colors along the gradient.  These values should range from 0 to 255 and 
            act like keyframes along the gradient (they mark where the gradient should 
            be exactly a particular color).
            In the event that the user does not set the first keyframe value equal
            to 0 and/or the last keyframe value equal to 255, keyframes will be created
            at these positions and the first and last colors will be replicated there.
            So, if a user specifies the following arrays to construct a gradient:
            <pre>
                {Color.BLUE, Color.RED}, {100, 140}
            </pre>
            this will be converted to a gradient with the following keyframes:
            <pre>
                {Color.BLUE, Color.BLUE, Color.RED, Color.RED}, {0, 100, 140, 255}
            </pre>
            The user may also select what action the {@code LinearGradientBrush}
            should take when filling color outside the start and end points.
            If no cycle method is specified, NoCycle will be chosen by
            default, which means the endpoint colors will be used to fill the
            remaining area.
            The following code demonstrates typical usage of
            LinearGradientBrush:
            <code>
                Point start = new Point(0, 0);
                Point end = new Point(50, 50);
                int[] dist = {0, 100f, 255};
                Color[] colors = {Color.RED, Color.WHITE, Color.BLUE};
                LinearGradientBrush p =
                new LinearGradientBrush(start, end, dist, colors);
            </code>
            This code will create a LinearGradientBrush which interpolates
            between red and white for the first 20% of the gradient and between white
            and blue for the remaining 80%.
            </remarks>
        </member>
        <member name="M:Mapdigit.Drawing.LinearGradientBrush.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32[],Mapdigit.Drawing.Color[],System.Int32)">
            <summary>
            Constructs a LinearGradientBrush with a default 
            NoCycle repeating method and SRGB color space.
            </summary>
            <param name="startX">the X coordinate of the gradient axis start point 
                          in user space.</param>
            <param name="startY">the Y coordinate of the gradient axis start point 
                           in user space.</param>
            <param name="endX">the X coordinate of the gradient axis end point 
                           in user space.</param>
            <param name="endY">the Y coordinate of the gradient axis end point 
                           in user space.</param>
            <param name="fractions">numbers ranging from 0 to 255 specifying the 
                              distribution of colors along the gradient.</param>
            <param name="colors">array of colors corresponding to each fractional value.</param>
            <param name="fillType">Type of the fill.</param>
        </member>
        <member name="M:Mapdigit.Drawing.LinearGradientBrush.#ctor(Mapdigit.Drawing.Geometry.Point,Mapdigit.Drawing.Geometry.Point,System.Int32[],Mapdigit.Drawing.Color[])">
            <summary>
            Constructs a LinearGradientBrush with a default
            NoCycle repeating method and SRGBcolor space.
            </summary>
            <param name="start">the gradient axis start Point in user space</param>
            <param name="end">the gradient axis end Point in user space</param>
            <param name="fractions">numbers ranging from 0 to 255 specifying the 
                              distribution of colors along the gradient.</param>
            <param name="colors">array of colors corresponding to each fractional value.</param>
        </member>
        <member name="M:Mapdigit.Drawing.LinearGradientBrush.#ctor(Mapdigit.Drawing.Geometry.Point,Mapdigit.Drawing.Geometry.Point,System.Int32[],Mapdigit.Drawing.Color[],System.Int32)">
            <summary>
            Constructs a LinearGradientBrush with a default
            NoCycle repeating method and SRGB color space.
            </summary>
            <param name="start">the gradient axis start Point in user space</param>
            <param name="end">the gradient axis end Point in user space</param>
            <param name="fractions">numbers ranging from 0 to 255 specifying the 
                              distribution of colors along the gradient.</param>
            <param name="colors">array of colors corresponding to each fractional value.</param>
            <param name="fillType">Type of the fill.</param>
        </member>
        <member name="M:Mapdigit.Drawing.LinearGradientBrush.#ctor(Mapdigit.Drawing.Geometry.Rectangle,Mapdigit.Drawing.Color,Mapdigit.Drawing.Color,System.Single)">
            <summary>
            Constructs a LinearGradientBrush with two colors and angle.
            </summary>
            <param name="rect">rectangle area of the linear gradien brush.</param>
            <param name="color1">start color</param>
            <param name="color2">end color.</param>
            <param name="angle">the anagle from start color to the end color.</param>
        </member>
        <member name="M:Mapdigit.Drawing.LinearGradientBrush.#ctor(Mapdigit.Drawing.Geometry.Rectangle,Mapdigit.Drawing.Color,Mapdigit.Drawing.Color,System.Single,System.Int32)">
            <summary>
            Constructs a LinearGradientBrush with two colors and angle.
            </summary>
            <param name="rect">rectangle area of the linear gradien brush.</param>
            <param name="color1">start color</param>
            <param name="color2">end color.</param>
            <param name="angle">the anagle from start color to the end color.</param>
            <param name="fillType">Type of the fill.</param>
        </member>
        <member name="M:Mapdigit.Drawing.LinearGradientBrush.#ctor(Mapdigit.Drawing.Geometry.Point,Mapdigit.Drawing.Geometry.Point,System.Int32[],Mapdigit.Drawing.Color[],Mapdigit.Drawing.Geometry.AffineTransform,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Mapdigit.Drawing.LinearGradientBrush"/> class.
            </summary>
            <param name="start">the gradient axis start Point in user space</param>
            <param name="end">the gradient axis end Point in user space</param>
            <param name="fractions">numbers ranging from 0 to 255 specifying the 
                              distribution of colors along the gradient.</param>
            <param name="colors">array of colors corresponding to each fractional value.</param>
            <param name="gradientTransform">transform to apply to the gradient</param>
            <param name="fillType">Type of the fill.</param>
        </member>
        <member name="F:Mapdigit.Drawing.LinearGradientBrush._start">
            Gradient start and end points. 
        </member>
        <member name="F:Mapdigit.Drawing.LinearGradientBrush._fractions">
            Gradient keyframe values in the range 0 to 1. 
        </member>
        <member name="F:Mapdigit.Drawing.LinearGradientBrush._colors">
            Gradient colors. 
        </member>
        <member name="F:Mapdigit.Drawing.LinearGradientBrush._transparency">
            The transparency of this paint object. 
        </member>
        <member name="P:Mapdigit.Drawing.LinearGradientBrush.StartPoint">
            <summary>
            Returns a copy of the start point of the gradient axis.
            </summary>
        </member>
        <member name="P:Mapdigit.Drawing.LinearGradientBrush.EndPoint">
            <summary>
            Returns a copy of the end point of the gradient axis.
            </summary>
        </member>
        <member name="P:Mapdigit.Drawing.LinearGradientBrush.Fractions">
            <summary>
            Returns a copy of the array of floats used by this gradient
            to calculate color distribution.
            The returned array always has 0 as its first value and 1 as its
            last value, with increasing values in between.
            </summary>
        </member>
        <member name="P:Mapdigit.Drawing.LinearGradientBrush.Colors">
            <summary>
            Returns a copy of the array of colors used by this gradient.
            The first color maps to the first value in the fractions array,
            and the last color maps to the last value in the fractions array.
            </summary>
        </member>
        <member name="P:Mapdigit.Drawing.LinearGradientBrush.Transparency">
            <summary>
            Returns the transparency mode for this Color.
             </summary>
        </member>
        <member name="T:Mapdigit.Drawing.Pen">
            <summary>
            The Pen class defines a basic set of rendering attributes for the outlines
            of graphics primitives, which are rendered with a Graphics2D object that 
            has its Stroke attribute set to this Pen.
            </summary>
            <remarks>
            The rendering attributes defined by Pen describe the shape of the mark 
            made by a pen drawn along the outline of a IShape and the decorations 
            applied at the ends and joins of path segments of the IShape.
            These rendering attributes include:
            width--The pen width, measured perpendicularly to the pen trajectory.
            End caps--The decoration applied to the ends of unclosed subpaths and
            dash segments.  Subpaths that start and end on the same point are
            still considered unclosed if they do not have a CLOSE segment.
            The limit to trim a line join that has a JoinMiter decoration.
            A line join is trimmed when the ratio of miter length to stroke
            width is greater than the miterlimit value.  The miter length is
            the diagonal length of the miter, which is the distance between
            the inside corner and the outside corner of the intersection.
            The smaller the angle formed by two line segments, the longer
            the miter length and the sharper the angle of intersection.  The
            default miterlimit value of 10 causes all angles less than
            11 degrees to be trimmed.  Trimming miters converts
            the decoration of the line join to bevel.
            dash attributes--The definition of how to make a dash pattern by alternating
            between opaque and transparent sections.
            For more information on the user space coordinate system and the
            rendering process, see the Graphics2D class comments.
            </remarks>
        </member>
        <member name="F:Mapdigit.Drawing.Pen.JoinMiter">
            <summary>
             Joins path segments by extending their outside edges until
             they meet.
            </summary>
        </member>
        <member name="F:Mapdigit.Drawing.Pen.JoinRound">
            <summary>
             Joins path segments by rounding off the corner at a radius
             of half the line width.
            </summary>
        </member>
        <member name="F:Mapdigit.Drawing.Pen.JoinBevel">
            <summary>
             Joins path segments by connecting the outer corners of their
             wide outlines with a straight segment.
            </summary>
        </member>
        <member name="F:Mapdigit.Drawing.Pen.CapButt">
            <summary>
             Ends unclosed subpaths and dash segments with no added decoration.
            </summary>
        </member>
        <member name="F:Mapdigit.Drawing.Pen.CapRound">
            <summary>
            Ends unclosed subpaths and dash segments with a Round
            decoration that has a radius equal to half of the width
            of the pen.
            </summary>
        </member>
        <member name="F:Mapdigit.Drawing.Pen.CapSquare">
            <summary>
            Ends unclosed subpaths and dash segments with a square
            projection that extends beyond the end of the segment
            to a distance equal to half of the line width.
            </summary>
        </member>
        <member name="M:Mapdigit.Drawing.Pen.#ctor(Mapdigit.Drawing.Brush,System.Int32,System.Int32,System.Int32,System.Int32[],System.Int32)">
            <summary>
            IConstructs a new Pen with the specified attributes.
            </summary>
            <param name="brush">brush used to construct the pen object.</param>
            <param name="width">the width of this Pen.  The
                    width must be greater than or equal to 0.  If width is
                    set to 0, the stroke is rendered as the thinnest
                    possible line for the target device and the antialias
                    hint setting.</param>
            <param name="cap">the decoration of the ends of a Pen.</param>
            <param name="join">the decoration applied where path segments meet.</param>
            <param name="dash">the array representing the dashing pattern.</param>
            <param name="dashPhase">the offset to start the dashing pattern.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Pen.#ctor(Mapdigit.Drawing.Color,System.Int32,System.Int32,System.Int32,System.Int32[],System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Mapdigit.Drawing.Pen"/> class.
            </summary>
            <param name="color">the color of the pen.</param>
            <param name="width">the width of this Pen.  The
                    width must be greater than or equal to 0.  If width is
                    set to 0, the stroke is rendered as the thinnest
                    possible line for the target device and the antialias
                    hint setting.</param>
            <param name="cap">the decoration of the ends of a Pen.</param>
            <param name="join">the decoration applied where path segments meet.</param>
            <param name="dash">the array representing the dashing pattern.</param>
            <param name="dashPhase">the offset to start the dashing pattern.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Pen.#ctor(Mapdigit.Drawing.Brush,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Mapdigit.Drawing.Pen"/> class.
            </summary>
            <param name="brush">brush used to construct the pen object.</param>
            <param name="width">the width of this Pen.  The
                    width must be greater than or equal to 0.  If width is
                    set to 0, the stroke is rendered as the thinnest
                    possible line for the target device and the antialias
                    hint setting.</param>
            <param name="cap">the decoration of the ends of a Pen.</param>
            <param name="join">the decoration applied where path segments meet.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Pen.#ctor(Mapdigit.Drawing.Color,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Mapdigit.Drawing.Pen"/> class.
            </summary>
            <param name="color">the color of the Pen</param>
            <param name="width">the width of the Pen</param>
            <param name="cap">the decoration of the ends of a Pen.</param>
            <param name="join">the decoration applied where path segments meet.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Pen.#ctor(Mapdigit.Drawing.Brush,System.Int32)">
            <summary>
            Constructs a solid Pen with the specified
            line width and with default values for the cap and join styles.
            </summary>
            <param name="brush">the brush used to create the pen.</param>
            <param name="width">the width of the Pen</param>
        </member>
        <member name="M:Mapdigit.Drawing.Pen.#ctor(Mapdigit.Drawing.Color,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Mapdigit.Drawing.Pen"/> class.
            </summary>
            <param name="color">color the color of the Pen</param>
            <param name="width">the width of the Pen</param>
        </member>
        <member name="M:Mapdigit.Drawing.Pen.#ctor(Mapdigit.Drawing.Brush)">
            <summary>
             Constructs a new Pen with given brush.
            </summary>
            <param name="brush"> brush used to create the pen.</param>
        </member>
        <member name="M:Mapdigit.Drawing.Pen.#ctor(Mapdigit.Drawing.Color)">
            <summary>
            Constructs a new Pen with defaults for all
            attributes.
            The default attributes are a solid line of width 1.0, CapSquare,
            JoinMiter, a miter limit of 10.
            </summary>
            <param name="color">the color of the Pen</param>
        </member>
        <member name="M:Mapdigit.Drawing.Pen.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms 
            and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Mapdigit.Drawing.Pen.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:System.Object"/> is equal 
            to this instance; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
            </exception>
        </member>
        <member name="P:Mapdigit.Drawing.Pen.Width">
            <summary>
            Returns the line width. 
            </summary>
            <remarks>
             Line width is represented in user space,
            which is the default-coordinate space used by Java 2D.  See the
            Graphics2D class comments for more information on
            the user space coordinate system.
            </remarks>
        </member>
        <member name="P:Mapdigit.Drawing.Pen.Color">
            <summary>
            Returns the pen color.
            </summary>
        </member>
        <member name="P:Mapdigit.Drawing.Pen.EndCap">
            <summary>
            Returns the end cap style.
            </summary>
        </member>
        <member name="P:Mapdigit.Drawing.Pen.LineJoin">
            <summary>
            Returns the line join style.
            </summary>
        </member>
        <member name="P:Mapdigit.Drawing.Pen.DashArray">
            <summary>
            Returns the array representing the lengths of the dash segments.
            </summary>
            <remarks>
            Alternate entries in the array represent the user space lengths
            of the opaque and transparent segments of the dashes.
            As the pen moves along the outline of the IShape
            to be stroked, the user space
            distance that the pen travels is accumulated.  The distance
            value is used to index into the dash array.
            The pen is opaque when its current cumulative distance maps
            to an even element of the dash array and transparent otherwise.
            </remarks>
        </member>
        <member name="P:Mapdigit.Drawing.Pen.DashPhase">
            <summary>
            Returns the current dash phase.
            </summary>
            <remarks>
            The dash phase is a distance specified in user coordinates that
            represents an offset into the dashing pattern. In other words, the dash
            phase defines the point in the dashing pattern that will correspond to
            the beginning of the stroke.
            </remarks>
        </member>
        <member name="T:Mapdigit.Drawing.RadialGradientBrush">
            <summary>
            The RadialGradientBrush class provides a way to fill a shape with
            a circular radial color gradient pattern. 
            </summary>
            <remarks>
            The user may specify 2 or more gradient colors, and this paint will
            provide an interpolation between each color.
            The user must specify the circle controlling the gradient pattern,
            which is described by a center point and a radius.  The user can also
            specify a separate focus point within that circle, which controls the
            location of the first color of the gradient.  By default the focus is
            set to be the center of the circle.
            This paint will map the first color of the gradient to the focus point,
            and the last color to the perimeter of the circle, interpolating
            smoothly for any in-between colors specified by the user.  Any line drawn
            from the focus point to the circumference will thus span all the gradient
            colors.
            Specifying a focus point outside of the circle's radius will result in the
            focus being set to the intersection point of the focus-center line and the
            perimeter of the circle.
            The user must provide an array of integers specifying how to distribute the
            colors along the gradient.  These values should range from 0 to 255 and
            act like keyframes along the gradient (they mark where the gradient should
            be exactly a particular color).
            In the event that the user does not set the first keyframe value equal
            to 0 and/or the last keyframe value equal to 255, keyframes will be created
            at these positions and the first and last colors will be replicated there.
            So, if a user specifies the following arrays to construct a gradient:
            <pre>
                {Color.BLUE, Color.RED}, {100, 140}
            </pre>
            this will be converted to a gradient with the following keyframes:
            <pre>
                {Color.BLUE, Color.BLUE, Color.RED, Color.RED}, {0, 100, 140, 255}
            </pre>
            The user may also select what action the RadialGradientBrush
            should take when filling color outside the bounds of the circle's radius.
            If no cycle method is specified, NoCycle will be chosen by
            default, which means the the last keyframe color will be used to fill the
            remaining area.
            The following code demonstrates typical usage of
            RadialGradientBrush, where the center and focus points are
            the same:
            <pre>
                Point center = new Point(50, 50);
                int radius = 25;
                int[] dist = {0, 52, 255};
                Color[] colors = {Color.RED, Color.WHITE, Color.BLUE};
                RadialGradientBrush p =
                    new RadialGradientBrush(center, radius, dist, colors);
            </pre> 
            </remarks>
        </member>
        <member name="M:Mapdigit.Drawing.RadialGradientBrush.#ctor(System.Int32,System.Int32,System.Int32,System.Int32[],Mapdigit.Drawing.Color[])">
            <summary>
            Constructs a RadialGradientBrush with a default
            NoCycle repeating method and SRGB color space,
            using the center as the focus point.
            </summary>
            <param name="cx">the X coordinate in user space of the center point of the
                      circle defining the gradient.  The last color of the
                      gradient is mapped to the perimeter of this circle.</param>
            <param name="cy">the Y coordinate in user space of the center point of the
                      circle defining the gradient.  The last color of the
                      gradient is mapped to the perimeter of this circle.</param>
            <param name="radius">the radius of the circle defining the extents of the
                           color gradient</param>
            <param name="fractions">numbers ranging from 0.0 to 1.0 specifying the
                              distribution of colors along the gradient</param>
            <param name="colors">array of colors to use in the gradient.  The first color
                          is used at the focus point, the last color around the
                          perimeter of the circle.</param>
        </member>
        <member name="M:Mapdigit.Drawing.RadialGradientBrush.#ctor(Mapdigit.Drawing.Geometry.Point,System.Int32,System.Int32[],Mapdigit.Drawing.Color[])">
            <summary>
            Constructs a RadialGradientBrush with a default
            NoCycle repeating method and SRGB color space,
            using the center as the focus point.
            </summary>
            <param name="center">the center point, in user space, of the circle defining
                           the gradient</param>
            <param name="radius">the radius of the circle defining the extents of the
                           color gradient.</param>
            <param name="fractions">numbers ranging from 0.0 to 1.0 specifying the
                              distribution of colors along the gradient</param>
            <param name="colors">array of colors to use in the gradient.  The first color
                          is used at the focus point, the last color around the
                          perimeter of the circle.</param>
        </member>
        <member name="M:Mapdigit.Drawing.RadialGradientBrush.#ctor(Mapdigit.Drawing.Geometry.Point,System.Int32,System.Int32[],Mapdigit.Drawing.Color[],System.Int32,Mapdigit.Drawing.Geometry.AffineTransform)">
            <summary>
            Initializes a new instance of the <see cref="T:Mapdigit.Drawing.RadialGradientBrush"/> class.
            </summary>
            <param name="center">the center point in user space of the circle defining the
                          gradient.  The last color of the gradient is mapped to
                          the perimeter of this circle.</param>
            <param name="radius">the radius of the circle defining the extents of the
                           color gradient.</param>
            <param name="fractions">numbers ranging from 0.0 to 1.0 specifying the
                              distribution of colors along the gradient</param>
            <param name="colors">array of colors to use in the gradient.  The first color
                          is used at the focus point, the last color around the
                          perimeter of the circle.</param>
            <param name="fillType">either NoCycle,Reflect,
                                or Repeat</param>
            <param name="gradientTransform">ransform to apply to the gradient.</param>
        </member>
        <member name="F:Mapdigit.Drawing.RadialGradientBrush._center">
            Center of the circle defining the 100% gradient stop X coordinate. 
        </member>
        <member name="F:Mapdigit.Drawing.RadialGradientBrush._radius">
            Radius of the outermost circle defining the 100% gradient stop. 
        </member>
        <member name="F:Mapdigit.Drawing.RadialGradientBrush._fractions">
            Gradient keyframe values in the range 0 to 1. 
        </member>
        <member name="F:Mapdigit.Drawing.RadialGradientBrush._colors">
            Gradient colors. 
        </member>
        <member name="F:Mapdigit.Drawing.RadialGradientBrush._transparency">
            The transparency of this paint object. 
        </member>
        <member name="P:Mapdigit.Drawing.RadialGradientBrush.CenterPoint">
            <summary>
            Returns a copy of the center point of the radial gradient.
            </summary>
        </member>
        <member name="P:Mapdigit.Drawing.RadialGradientBrush.Radius">
            <summary>
            Returns the radius of the circle defining the radial gradient
            </summary>
        </member>
        <member name="P:Mapdigit.Drawing.RadialGradientBrush.FillType">
            <summary>
            get fill type of the radial gradient brush
            </summary>
        </member>
        <member name="P:Mapdigit.Drawing.RadialGradientBrush.Fractions">
            <summary>
            Returns a copy of the array of floats used by this gradient
            to calculate color distribution.
            </summary>
            <remarks>
            The returned array always has 0 as its first value and 1 as its
            last value, with increasing values in between.
            </remarks>
        </member>
        <member name="P:Mapdigit.Drawing.RadialGradientBrush.Colors">
            <summary>
            Returns a copy of the array of colors used by this gradient.
            </summary>
            <remarks>
            The first color maps to the first value in the fractions array,
            and the last color maps to the last value in the fractions array.
            </remarks>
        </member>
        <member name="P:Mapdigit.Drawing.RadialGradientBrush.Transparency">
            <summary>
            Returns the transparency mode for this Color.  
            </summary>
            <returns>
            this Color object's transparency mode.
            </returns>
        </member>
        <member name="T:Mapdigit.Drawing.SolidBrush">
            <summary>
            Defines a brush of a single color. Brushes are used to fill graphics shapes,
            such as rectangles, ellipses, pies, polygons, and paths. This class cannot
            be inherited.
            </summary>
        </member>
        <member name="M:Mapdigit.Drawing.SolidBrush.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates an opaque sRGB brush with the specified red, green,
            and blue values in the range (0 - 255).
            The actual color used in rendering depends
            on finding the best match given the color space
            available for a given output device.
            Alpha is defaulted to 255.
            </summary>
            <param name="r">the red component</param>
            <param name="g">the green component</param>
            <param name="b">the blue component.</param>
        </member>
        <member name="M:Mapdigit.Drawing.SolidBrush.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates an opaque sRGB brush with the specified red, green,
            and blue values in the range (0 - 255).
            The actual color used in rendering depends
            on finding the best match given the color space
            available for a given output device.
            Alpha is defaulted to 255.
            </summary>
            <param name="r">the red component</param>
            <param name="g">the green component</param>
            <param name="b">the blue component.</param>
            <param name="a">the alpha value</param>
        </member>
        <member name="M:Mapdigit.Drawing.SolidBrush.#ctor(System.Int32)">
            <summary>
            Creates an opaque sRGB brush with the specified combined RGB value
            consisting of the red component in bits 16-23, the green component
            in bits 8-15, and the blue component in bits 0-7.  The actual color
            used in rendering depends on finding the best match given the
            color space available for a particular output device.  Alpha is
            defaulted to 255.
            </summary>
            <param name="rgb">the combined RGB components</param>
        </member>
        <member name="M:Mapdigit.Drawing.SolidBrush.#ctor(System.Int32,System.Boolean)">
            <summary>
            Creates an sRGB brush with the specified combined RGBA value consisting
            of the alpha component in bits 24-31, the red component in bits 16-23,
            the green component in bits 8-15, and the blue component in bits 0-7.
            If the hasalpha argument is false, alpha
            is defaulted to 255.
            </summary>
            <param name="rgba">the combined RGBA components</param>
            <param name="hasalpha"> true if the alpha bits are valid;
                    false otherwise</param>
        </member>
        <member name="M:Mapdigit.Drawing.SolidBrush.#ctor(Mapdigit.Drawing.Color)">
            <summary>
            Creates an sRGB brush with the specified combined RGBA value consisting
            of the alpha component in bits 24-31, the red component in bits 16-23,
            the green component in bits 8-15, and the blue component in bits 0-7.
            If the hasalpha argument is false, alpha
            is defaulted to 255.
            </summary>
            <param name="color"> the color of the brush.</param>
        </member>
        <member name="P:Mapdigit.Drawing.SolidBrush.Color">
            <summary>
            get the color of the solid brush.
            </summary>
        </member>
        <member name="P:Mapdigit.Drawing.SolidBrush.Transparency">
            <summary>
            Returns the transparency mode for this Color. 
            </summary>
            <returns>
            this Color object's transparency mode.
            </returns>
        </member>
        <member name="T:Mapdigit.Drawing.TextureBrush">
            <summary>
             Defines a brush of a texture (bitmap).
            </summary>
        </member>
        <member name="M:Mapdigit.Drawing.TextureBrush.#ctor(System.Int32[],System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Mapdigit.Drawing.TextureBrush"/> class.
            </summary>
            <param name="image">The image.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="P:Mapdigit.Drawing.TextureBrush.Transparency">
            <summary>
            Returns the transparency mode for this Color.
            </summary>
        </member>
        <member name="T:Mapdigit.Drawing.Utils">
            <summary>
            utility functions to convert class from drawing to drawingfp.
            </summary>
        </member>
        <member name="M:Mapdigit.Drawing.Utils.ToMatrixFP(Mapdigit.Drawing.Geometry.AffineTransform)">
            <summary>
            from Affline Matrix to it's FP matrix
            </summary>
            <param name="matrix">The matrix.</param>
            <returns></returns>
        </member>
        <member name="M:Mapdigit.Drawing.Utils.ToMatrix(Mapdigit.Drawing.Core.MatrixFP)">
            <summary>
            from FP matrix to affine matrix
            </summary>
            <param name="matrixFP">The matrix FP.</param>
            <returns></returns>
        </member>
        <member name="M:Mapdigit.Drawing.Utils.ToRectangleFP(Mapdigit.Drawing.Geometry.Rectangle)">
             <summary>
            from rectange to rectangeFP
             </summary>
             <param name="rect">The rect.</param>
             <returns></returns>
        </member>
        <member name="M:Mapdigit.Drawing.Utils.ToPointFP(Mapdigit.Drawing.Geometry.Point)">
             <summary>
            from point to pointFP
             </summary>
             <param name="pnt">The PNT.</param>
             <returns></returns>
        </member>
        <member name="M:Mapdigit.Drawing.Utils.ToPoint(Mapdigit.Drawing.Core.PointFP)">
            <summary>
            from PointFP to Point
            </summary>
            <param name="pnt">The PNT.</param>
            <returns></returns>
        </member>
        <member name="M:Mapdigit.Drawing.Utils.ToPointFPArray(Mapdigit.Drawing.Geometry.Point[])">
            <summary>
            from Point array to pintFP array
            </summary>
            <param name="pnts">The PNTS.</param>
            <returns></returns>
        </member>
        <member name="M:Mapdigit.Drawing.Utils.ToPointArray(Mapdigit.Drawing.Core.PointFP[])">
            <summary>
            from PointFP array to point array
            </summary>
            <param name="pnts">The PNTS.</param>
            <returns></returns>
        </member>
    </members>
</doc>
